{
  "address": "0xd43ccED274016C4e19ae98135F1BEE823BE83D4b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_TYPE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__BaseYieldFactory_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__KUSDTYieldFactory_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyProfitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksd",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdRefundManager",
      "outputs": [
        {
          "internalType": "contract IKsdRefundManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdRewardManager",
      "outputs": [
        {
          "internalType": "contract IDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sortedYieldList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldManager",
      "outputs": [
        {
          "internalType": "contract IYieldManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8dc57e15ee27e12b78a9050221f3a4b86f5d17be4204ec284b2e71829eaaec09",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0xd43ccED274016C4e19ae98135F1BEE823BE83D4b",
    "transactionIndex": 0,
    "gasUsed": "1782909",
    "logsBloom": "0x
    "blockHash": "0xf32d08ba6ecd55a965a43f08e0400ee6bbb7eb7d4af285a66b56c82dc26aed13",
    "transactionHash": "0x8dc57e15ee27e12b78a9050221f3a4b86f5d17be4204ec284b2e71829eaaec09",
    "logs": [],
    "blockNumber": 79129646,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "daac9cba34dfabe5953ff704314717f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__BaseYieldFactory_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__KUSDTYieldFactory_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyProfitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksd\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdRefundManager\",\"outputs\":[{\"internalType\":\"contract IKsdRefundManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdRewardManager\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedYieldList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldManager\",\"outputs\":[{\"internalType\":\"contract IYieldManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Independent strategies are called yield.\",\"kind\":\"dev\",\"methods\":{\"stake(uint256)\":{\"params\":{\"tokenAmount\":\"Amount of token to stake\"}},\"unstake(uint256)\":{\"params\":{\"tokenAmount\":\"Amount of token to unstake\"}}},\"title\":\"Management of strategies to operate the deposited token.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyProfitAll()\":{\"notice\":\"In all yields, call claimReward function.\"},\"stake(uint256)\":{\"notice\":\"Add collateral to staking yield\"},\"unstake(uint256)\":{\"notice\":\"Remove token from yield.\"}},\"notice\":\"Each strategy can stake token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collateral/KUSDT/KUSDTYieldFactory.sol\":\"KUSDTYieldFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/collateral/KUSDT/KUSDTYieldFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../../yield/BaseYieldFactory.sol\\\";\\n\\n/// @title Management of strategies to operate the deposited token.\\n/// @notice Each strategy can stake token.\\n/// @dev Independent strategies are called yield.\\ncontract KUSDTYieldFactory is BaseYieldFactory {\\n    function __KUSDTYieldFactory_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    function COLLATERAL_TYPE() public view override returns (bytes32) {\\n        return bytes32(\\\"KUSDT\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb9ea912540f3f54efcad315a3e9a35d16b3b2af4c620ca749616edb352bf7455\",\"license\":\"MIT\"},\"contracts/interface/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title distribute ksd\\ninterface IDistributor {\\n    /// @notice distribute ksd profit\\n    /// @param amount amount of profit\\n    function distribute(uint256 amount) external;\\n\\n    event Distribute(uint256 now, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2758bce16dcd91f7f850cf38217460e7327d7b246fcd912b9f38b00a06949d83\",\"license\":\"MIT\"},\"contracts/interface/IKlayYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlayYield {\\n    event Stake(address from, uint256 amount);\\n    event Unstake(address from, uint256 amount);\\n    event Claim(address from, uint256 amount);\\n\\n    /// @notice total staked klay amount to the yield\\n    function totalStaked() external view returns (uint256);\\n\\n    /// @notice expected apr of this yield\\n    function expectedApr() external view returns (uint256);\\n\\n    /// @notice add klay to cn node\\n    function stake() external payable;\\n\\n    /// @notice remove klay from cn node\\n    /// @dev pending 7 days\\n    function unstake(uint256 amount) external;\\n\\n    function transferToken(address to, uint256 amount) external;\\n\\n    function transferKlay(address to, uint256 amount) external;\\n\\n    /// @notice claim unstaked usr's klay, send to usr\\n    function claim() external;\\n\\n    /// @notice unstake status\\n    /// @dev pending 7 days\\n    function pending() external view returns (uint256 completed, uint256 yet);\\n\\n    /// @notice Convert the generated reward(klay) to ksd and distribute it to the beneficiaries\\n    function applyProfit() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x0eb331210938a99123662e95462272a4555dde7e70a2888d68c19a4e58d3c722\",\"license\":\"MIT\"},\"contracts/interface/IKlayYieldFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlayYieldFactory {\\n    function totalStaked() external view returns (uint256);\\n\\n    /// @notice Add klay to staking yield\\n    function stake() external payable;\\n\\n    /// @notice Add klay to staking yield\\n    function stakeAKlay(uint256 amount) external;\\n\\n    /// @notice transfer token to address\\n    function withdrawToken(address to, uint256 amount) external;\\n\\n    function withdrawKlay(address to, uint256 amount) external;\\n\\n    /// @notice Remove klay from unstaking yield.\\n    function unstake(uint256 amount) external;\\n\\n    /// @notice Claim on every yield.\\n    function claim() external;\\n\\n    /// @notice unstake status\\n    function pending() external view returns (uint256 completed, uint256 yet);\\n\\n    /// @notice In all yields, call claimReward function.\\n    function applyProfitAll() external;\\n}\\n\",\"keccak256\":\"0xd29cab95600aa5cd6f8a3b9f54bf79f6a219528c36038ca51152b47fef2906fe\",\"license\":\"MIT\"},\"contracts/interface/IKsdRefundManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKsdRefundManager {\\n    event Refund(bytes32 collateralType, uint256 timestamp, uint256 refundAmount, uint256 totalLoan, uint256 accRewardPerShare);\\n    event Deposit(bytes32 collateralType, uint256 amount, address to);\\n    event Withdraw(bytes32 collateralType, uint256 amount, address to);\\n    event Claim(bytes32 collateralType, address from, uint256 amount);\\n\\n    struct PoolInfo {\\n        uint256 accAmountPerShare;\\n    }\\n\\n    struct UserInfo {\\n        int256 debt;\\n        uint256 claimedAmount;\\n    }\\n\\n    function refund(bytes32 collateralType, uint256 refundAmount) external;\\n\\n    function onDeposit(\\n        bytes32 collateralType,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function onWithdraw(\\n        bytes32 collateralType,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function onChanged(\\n        bytes32 collateralType,\\n        int256 amount,\\n        address to\\n    ) external;\\n\\n    function claimableAmount(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    function claim(bytes32 collateralType, address to) external;\\n\\n    function claimByOther(bytes32 collateralType, address usr) external;\\n}\\n\",\"keccak256\":\"0x72b832532c312b535bbb664c8a4262a590f2bdb56627f51efdba2d068457262b\",\"license\":\"MIT\"},\"contracts/interface/IYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IYield {\\n    event Stake(address from, uint256 amount);\\n    event Unstake(address from, uint256 amount);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    /// @notice expected apr of this yield\\n    function expectedApr() external view returns (uint256);\\n\\n    /// @notice add klay to cn node\\n    function stake(uint256 tokenAmount) external;\\n\\n    /// @notice remove klay from cn node\\n    /// @dev pending 7 days\\n    function unstake(uint256 tokenAmount) external;\\n\\n    /// @notice Convert the generated reward(klay) to ksd and distribute it to the beneficiaries\\n    function applyProfit() external returns (uint256 ksdAmount);\\n}\\n\",\"keccak256\":\"0xfd3ed9ddce1288a3b4b1d96d9be160b2a53e3750f3e5dfc5bc381af00f4deaac\",\"license\":\"MIT\"},\"contracts/interface/IYieldFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IYieldFactory {\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    /// @notice Add collateral to staking yield\\n    /// @param tokenAmount Amount of token to stake\\n    function stake(uint256 tokenAmount) external;\\n\\n    /// @notice Remove token from yield.\\n    /// @param tokenAmount Amount of token to unstake\\n    function unstake(uint256 tokenAmount) external;\\n\\n    /// @notice In all yields, call claimReward function.\\n    function applyProfitAll() external;\\n}\\n\",\"keccak256\":\"0x5b7493e5b8d178aa9d13974c23bc7312cd63ba3ff4bed1e72f6c6c9070f7cb8d\",\"license\":\"MIT\"},\"contracts/interface/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IYieldManager {\\n    struct YieldRecord {\\n        uint256 accYieldApr; // time weighted accumulative\\n        uint256 accEarnedKsdAmount;\\n        uint256 accRefundedKsdAmount;\\n        uint256 accStabilityFeeKsdAmount;\\n        uint256 accTargetKsdAmount; // exepct accumTargetKsdAmount == accumEarnedKsdAmount - accumRefundedKsdAmount + accumStabilityFeeKsdAmount\\n        uint256 totalLoan;\\n        uint256 rate;\\n        uint256 timestamp;\\n    }\\n\\n    function yieldFactory(bytes32 collateralType) external view returns (address);\\n\\n    function record(bytes32 collateralType, uint256 index)\\n        external\\n        view\\n        returns (\\n            uint256 accYieldApr,\\n            uint256 accEarnedKsdAmount,\\n            uint256 accRefundedKsdAmount,\\n            uint256 accStabilityFeeKsdAmount,\\n            uint256 accTargetKsdAmount,\\n            uint256 totalLoan,\\n            uint256 rate,\\n            uint256 timestamp\\n        );\\n\\n    function recordLength(bytes32 collateralType) external view returns (uint256);\\n\\n    function saveRecord(\\n        bytes32 collateralType,\\n        uint256 earnedKsdAmount,\\n        uint256 refundedKsdAmount,\\n        uint256 stabilityFeeKsdAmount,\\n        uint256 targetKsdAmount\\n    ) external;\\n\\n    function getYieldApr(bytes32 collateralType) external view returns (uint256);\\n\\n    function getTargetApr() external view returns (uint256);\\n\\n    function manageProfit(bytes32 collateralType, uint256 earnedKsdAmount) external;\\n}\\n\",\"keccak256\":\"0xf1b43930ed7b5bb9ab5b4c18ea14b959ce3e57d20ebeabfb67dc4ec757d8dab8\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    // -- Kokoa --\\n    // extended\\n\\n    function add(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + uint256(y);\\n            require(y >= 0 || z <= x, \\\"SafeMath: addition overflow\\\");\\n            require(y <= 0 || z >= x, \\\"SafeMath: addition overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - uint256(y);\\n            require(y <= 0 || z <= x, \\\"SafeMath: subtraction overflow\\\");\\n            require(y >= 0 || z >= x, \\\"SafeMath: subtraction overflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = int256(x) * y;\\n            require(int256(x) >= 0, \\\"SafeMath: multiplication overflow\\\");\\n            require(y == 0 || z / y == int256(x), \\\"SafeMath: multiplication overflow\\\");\\n        }\\n    }\\n\\n    function mul(int256 x, uint256 y) internal pure returns (int256 z) {\\n        z = x * int256(y);\\n        require(int256(y) >= 0, \\\"SafeMath: multiplication overflow\\\");\\n        require(x == 0 || z / x == int256(y), \\\"SafeMath: multiplication overflow\\\");\\n    }\\n\\n    // -- makerdao --\\n    // extended\\n    uint256 constant ONE = 10**27;\\n    uint256 constant RAY = 10**27;\\n    uint256 constant WAD = 10**18;\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"SafeMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"SafeMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x >= y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    // from uniswap\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n            z = x;\\n            x = (y / x + x) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc470c98add15d467271436b0ab2d99fc66a45f32d0ddd93d58436b74962b0f79\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/yield/BaseYieldFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../library/openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../library/AccessControl.sol\\\";\\nimport \\\"../library/Pausable.sol\\\";\\nimport \\\"../interface/IKlayYield.sol\\\";\\nimport \\\"../interface/IKlayYieldFactory.sol\\\";\\nimport \\\"../interface/kip/IKIP7.sol\\\";\\nimport \\\"../interface/IYieldFactory.sol\\\";\\nimport \\\"../interface/IYield.sol\\\";\\nimport \\\"../interface/IKsdRefundManager.sol\\\";\\nimport \\\"../interface/IYieldManager.sol\\\";\\nimport \\\"../interface/IDistributor.sol\\\";\\n\\n/// @title Management of strategies to operate the deposited token.\\n/// @notice Each strategy can stake token.\\n/// @dev Independent strategies are called yield.\\nabstract contract BaseYieldFactory is IYieldFactory, AccessControl, Pausable {\\n    // --- data ---\\n    IKIP7 public ksd;\\n    IKsdRefundManager public ksdRefundManager;\\n    IDistributor public ksdRewardManager;\\n    address public override token;\\n    address public yield;\\n    IYieldManager public yieldManager;\\n\\n    function __BaseYieldFactory_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    function COLLATERAL_TYPE() public view virtual returns (bytes32);\\n\\n    // --- config ---\\n    function config(bytes32 what, address data) external onlyAdmin whenNotPaused {\\n        if (what == \\\"ksd\\\") ksd = IKIP7(data);\\n        else if (what == \\\"ksdRefundManager\\\") ksdRefundManager = IKsdRefundManager(data);\\n        else if (what == \\\"ksdRewardManager\\\") ksdRewardManager = IDistributor(data);\\n        else if (what == \\\"token\\\") token = data;\\n        else if (what == \\\"yield\\\") yield = data;\\n        else if (what == \\\"yieldManager\\\") yieldManager = IYieldManager(data);\\n        else revert(\\\"BaseYieldFactory::config: unrecognized-param\\\");\\n    }\\n\\n    function defaultYieldList() internal view returns (address[] memory) {\\n        address[] memory list = new address[](1);\\n        list[0] = address(yield);\\n        return list;\\n    }\\n\\n    function sortedYieldList() public view returns (address[] memory) {\\n        address[] memory list = new address[](1);\\n        list[0] = address(yield);\\n        for (uint256 i = 0; i < list.length; i++) {\\n            uint256 apr_i = IKlayYield(list[i]).expectedApr();\\n            for (uint256 j = i + 1; j < list.length; j++) {\\n                uint256 apr_j = IKlayYield(list[j]).expectedApr();\\n                if (apr_i > apr_j) {\\n                    apr_i = apr_j;\\n                    address tmp = list[j];\\n                    list[j] = list[i];\\n                    list[i] = tmp;\\n                }\\n            }\\n        }\\n        return list;\\n    }\\n\\n    function totalValue() public view override returns (uint256) {\\n        address[] memory yieldList = defaultYieldList();\\n        uint256 value = 0;\\n        for (uint256 i = 0; i < yieldList.length; i++) {\\n            value += IYield(yieldList[i]).totalValue();\\n        }\\n        return value;\\n    }\\n\\n    function totalAmount() public view override returns (uint256) {\\n        address[] memory yieldList = defaultYieldList();\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i < yieldList.length; i++) {\\n            amount += IYield(yieldList[i]).totalAmount();\\n        }\\n        return amount;\\n    }\\n\\n    function stake(uint256 tokenAmount) external override onlyAdmin {\\n        IKIP7(token).transferFrom(msg.sender, address(this), tokenAmount);\\n        IKIP7(token).approve(yield, tokenAmount);\\n        address[] memory yieldList = sortedYieldList();\\n        address yield = yieldList[yieldList.length - 1];\\n        IYield(yield).stake(tokenAmount);\\n    }\\n\\n    function unstake(uint256 tokenAmount) external override onlyAdmin {\\n        address[] memory yieldList = sortedYieldList();\\n        uint256 amountToUnstake = tokenAmount;\\n        for (uint256 i = 0; i < yieldList.length; i++) {\\n            if (amountToUnstake == 0) break;\\n\\n            IYield yield = IYield(yieldList[i]);\\n            if (yield.totalAmount() >= amountToUnstake) {\\n                yield.unstake(amountToUnstake);\\n                amountToUnstake -= amountToUnstake;\\n            } else {\\n                uint256 _amount = yield.totalAmount();\\n                yield.unstake(_amount);\\n                amountToUnstake = amountToUnstake - _amount;\\n            }\\n        }\\n        require(amountToUnstake == 0, \\\"BaseYieldFactory::unstake: fail\\\");\\n    }\\n\\n    function applyProfitAll() external override {\\n        address[] memory yieldList = defaultYieldList();\\n        uint256 earnedKsdAmount = 0;\\n        for (uint256 i = 0; i < yieldList.length; i++) {\\n            uint256 ksdAmount = IYield(yieldList[i]).applyProfit();\\n            ksd.transferFrom(yieldList[i], address(this), ksdAmount);\\n            earnedKsdAmount += ksdAmount;\\n        }\\n\\n        bytes32 collateralType = COLLATERAL_TYPE();\\n        ksd.approve(address(yieldManager), earnedKsdAmount);\\n        yieldManager.manageProfit(collateralType, earnedKsdAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x759907e66043a581afd14f894a6da669005006c59471f9656887f2a449db717e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Independent strategies are called yield.",
    "kind": "dev",
    "methods": {
      "stake(uint256)": {
        "params": {
          "tokenAmount": "Amount of token to stake"
        }
      },
      "unstake(uint256)": {
        "params": {
          "tokenAmount": "Amount of token to unstake"
        }
      }
    },
    "title": "Management of strategies to operate the deposited token.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyProfitAll()": {
        "notice": "In all yields, call claimReward function."
      },
      "stake(uint256)": {
        "notice": "Add collateral to staking yield"
      },
      "unstake(uint256)": {
        "notice": "Remove token from yield."
      }
    },
    "notice": "Each strategy can stake token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23220,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23223,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20166,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)"
      },
      {
        "astId": 20556,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 39294,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "ksd",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 39297,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "ksdRefundManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKsdRefundManager)8504"
      },
      {
        "astId": 39300,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "ksdRewardManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDistributor)7358"
      },
      {
        "astId": 39303,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "token",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 39305,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "yield",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 39308,
        "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
        "label": "yieldManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IYieldManager)9728"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDistributor)7358": {
        "encoding": "inplace",
        "label": "contract IDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IKIP7)9881": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKsdRefundManager)8504": {
        "encoding": "inplace",
        "label": "contract IKsdRefundManager",
        "numberOfBytes": "20"
      },
      "t_contract(IYieldManager)9728": {
        "encoding": "inplace",
        "label": "contract IYieldManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)20161_storage"
      },
      "t_struct(RoleData)20161_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 20158,
            "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20160,
            "contract": "contracts/collateral/KUSDT/KUSDTYieldFactory.sol:KUSDTYieldFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}