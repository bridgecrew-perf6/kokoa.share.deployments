{
  "address": "0x4692B889A81fbfCC6a3f5712E1e14CaA02880659",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__SingleCollateralAuctionTaker_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBook",
      "outputs": [
        {
          "internalType": "contract IAddressBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "bondAmountWithMaxProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "data",
          "type": "address[]"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exitKsdGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isProfitable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "joinKsdGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "maxSwapView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "minProfitRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeCollateralGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "takeAndExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "owe",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "takerCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "colType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeCollateralGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawKlay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKIP7",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa13e09e410937d19550c4a1650dcb4e8da9ac1ebd186ba00373ad8a505f3b403",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0x4692B889A81fbfCC6a3f5712E1e14CaA02880659",
    "transactionIndex": 16,
    "gasUsed": "4108949",
    "logsBloom": "0x
    "blockHash": "0xbaec5974dd5cef8f8663d20c761babbd0cdba0cb9b7307460d1fcdd9da1ed1de",
    "transactionHash": "0xa13e09e410937d19550c4a1650dcb4e8da9ac1ebd186ba00373ad8a505f3b403",
    "logs": [],
    "blockNumber": 81181084,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "19681beed22c8895cf71a9afbd287fcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__SingleCollateralAuctionTaker_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"contract IAddressBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"bondAmountWithMaxProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"data\",\"type\":\"address[]\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitKsdGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isProfitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"joinKsdGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"maxSwapView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"minProfitRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeCollateralGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"takeAndExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"owe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"takerCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"colType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeCollateralGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawKlay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/keep/SingleCollateralAuctionTaker.sol\":\"SingleCollateralAuctionTaker\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IAddressBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressBook {\\n    struct CollateralContracts {\\n        address token;\\n        address bond;\\n        address bondAuctionHouse;\\n        address bondFeed;\\n        address bondIssuedKsdPool;\\n        address bondSchedule;\\n        address gateway;\\n        address yieldFactory;\\n    }\\n\\n    function config(bytes32 what, address data) external;\\n\\n    function config(\\n        bytes32 collateralType,\\n        bytes32 what,\\n        address data\\n    ) external;\\n\\n    function configurator() external view returns (address);\\n\\n    function ledger() external view returns (address);\\n\\n    function ksd() external view returns (address);\\n\\n    function ksdGateway() external view returns (address);\\n\\n    function yieldManager() external view returns (address);\\n\\n    function kokoaRewardManager() external view returns (address);\\n\\n    function ksdRewardManager() external view returns (address);\\n\\n    function ksdRefundManager() external view returns (address);\\n\\n    function collateralContracts(bytes32 collateralType)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            address\\n        );\\n\\n    function getCollateralContract(bytes32 collateralType, bytes32 what) external view returns (address);\\n\\n    function ksp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1607e62b9f40917da7653b0c0317b1fdf12186031077998991f8decc938f6d9a\",\"license\":\"MIT\"},\"contracts/interface/IAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IPausable.sol\\\";\\n\\n/// @notice manages auctions. It is used in liquidator.\\ninterface IAuctionHouse {\\n    struct Sale {\\n        uint256 index; // Index in active array\\n        uint256 raiseAmount; // KSD to raise       [rad]\\n        uint256 sellAmount; // collateral to sell [wad]\\n        address vaultOwner; // Liquidated vault\\n        uint96 startTime; // Auction start time\\n        uint256 startPrice; // Starting price     [ray]\\n    }\\n\\n    // --- Events ---\\n    event Config(bytes32 indexed what, uint256 data);\\n    event Config(bytes32 indexed what, address data);\\n\\n    event Start(\\n        uint256 indexed id,\\n        uint256 startPrice,\\n        uint256 raiseAmount,\\n        uint256 sellAmount,\\n        address indexed vaultOwner,\\n        address indexed keeper,\\n        uint256 coin\\n    );\\n    event Take(uint256 indexed id, uint256 max, uint256 price, uint256 owe, uint256 raiseAmount, uint256 sellAmount, address indexed vaultOwner);\\n    event Redo(\\n        uint256 indexed id,\\n        uint256 startPrice,\\n        uint256 raiseAmount,\\n        uint256 sellAmount,\\n        address indexed vaultOwner,\\n        address indexed keeper,\\n        uint256 coin\\n    );\\n\\n    event Cancel(uint256 id);\\n\\n    function collateralType() external view returns (bytes32);\\n\\n    function buf() external view returns (uint256);\\n\\n    function timeLimit() external view returns (uint256);\\n\\n    function dropLimit() external view returns (uint256);\\n\\n    function ratioIncentive() external view returns (uint64);\\n\\n    function constIncentive() external view returns (uint192);\\n\\n    function bound() external view returns (uint256);\\n\\n    function cnt() external view returns (uint256);\\n\\n    function active(uint256 id) external view returns (uint256);\\n\\n    function sales(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint96,\\n            uint256\\n        );\\n\\n    /// @notice starts an auction\\n    /// trusts the caller to transfer collateral to the contract\\n    /// The `startPrice` is obtained as follows:\\n    ///\\n    ///     startPrice = feedPrice * buf / par\\n    ///\\n    /// Where `feedPrice` is the collateral's unitary value in USD, `buf` is a\\n    /// multiplicative factor to increase the starting price, and `par` is a\\n    /// reference per KSD.\\n    /// @param raiseAmount ksd amount to raise through auction. [rad]\\n    /// @param sellAmount collateral amount to sell through auction. [rad]\\n    /// @param vaultOwner address will receive any leftover collateral\\n    /// @param keeper address that will receive incentives\\n    function start(\\n        uint256 raiseAmount,\\n        uint256 sellAmount,\\n        address vaultOwner,\\n        address keeper\\n    ) external returns (uint256 id);\\n\\n    /// @notice cancel an auction during EmergencyStop or via governance action.\\n    /// @param id sale id\\n    function cancel(uint256 id) external;\\n\\n    function take(\\n        uint256 id,\\n        uint256 amt,\\n        uint256 max,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getStatus(uint256 id)\\n        external\\n        view\\n        returns (\\n            bool needsRedo,\\n            uint256 price,\\n            uint256 sellAmount, // collateral amount\\n            uint256 raiseAmount // raise amount\\n        );\\n}\\n\",\"keccak256\":\"0xdca291346584c232b850e0aa33eae9b6d32bfa4f92705a3c97cba3bb15eda7ce\",\"license\":\"MIT\"},\"contracts/interface/IAuctionTakerCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAuctionTakerCallee {\\n    function takerCall(\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdecd05fe102ea4f90cf68e470b6adbdd29553f90d61562eafd0971bdc3ae77b1\",\"license\":\"MIT\"},\"contracts/interface/IBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"./kip/IKIP7Extended.sol\\\";\\n\\n/// @title Bonded Collateral Contract\\n/// @notice Mint/Burn logic of Bond\\ninterface IBond is IKIP7Extended {\\n    event Stake(address from, address to, uint256 tokenAmount, uint256 bondAmount);\\n    event Unstake(address from, address to, uint256 tokenAmount, uint256 bondAmount);\\n\\n    /// @notice Calculate bond amount corresponding to the given token amount\\n    function fromTokenAmount(uint256 tokenAmount) external view returns (uint256 bondAmount);\\n\\n    /// @notice Calculate token amount corresponding to the given bond amount\\n    function toTokenAmount(uint256 bondAmount) external view returns (uint256 tokenAmount);\\n\\n    /// @notice Stake token to this contract and return bond.\\n    function stake(address to, uint256 tokenAmount) external returns (uint256 bondAmount);\\n\\n    /// @notice Untake to return staked token.\\n    function unstake(address to, uint256 bondAmount) external returns (uint256 tokenAmount);\\n}\\n\",\"keccak256\":\"0x37f0de875521a4ea18dba309d70e9d2f9be8310f79ddd6cfe203dc8511664144\",\"license\":\"MIT\"},\"contracts/interface/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title Collateral input/output contract\\ninterface IGateway {\\n    /// @notice collateral type of this gateway\\n    function COLLATERAL_TYPE() external view returns (bytes32);\\n\\n    /// @notice Send token to bond contract, record on ledger.\\n    /// @dev User should call approve function of token before calling this function\\n    /// @return bondAmount amount of bond token corresponding to staked token\\n    function stake(uint256 tokenAmount) external returns (uint256 bondAmount);\\n\\n    /// @notice Loan ksd with bond.\\n    /// @dev Ledger decides whether or not to verify the stability of a secured loan or not.\\n    /// @dev Loan history recorded on ledger.\\n    /// @param bondAmount Amount of bond to be collateralized.\\n    /// @param loanAmount Amount of ksd to borrow (loan).\\n    function borrow(uint256 bondAmount, uint256 loanAmount) external;\\n\\n    /// @notice Execute stake and borrow functions at the same time.\\n    /// @dev User should call approve before calling this function\\n    /// @param tokenAmount Amount of token to stake.\\n    /// @param loanAmount Amount of ksd to borrow (loan).\\n    function stakeAndBorrow(uint256 tokenAmount, uint256 loanAmount) external;\\n\\n    /// @notice Execute unstake to get the entrusted token back.\\n    /// @param bondAmount Amount of bond to unbond.\\n    function unstake(uint256 bondAmount) external;\\n\\n    /// @notice Execute unstake to get the bond back.\\n    /// @param bondAmount Amount of bond you want to return.\\n    function unstakeInBond(uint256 bondAmount) external;\\n\\n    /// @notice Return ksd and unlock collateral (bond).\\n    /// @dev Record on ledge.\\n    /// @param bondAmount Amount of bond that was entrusted as collateral.\\n    /// @param loanAmount Amount of ksd borrowed (loan).\\n    function repay(uint256 bondAmount, uint256 loanAmount) external;\\n\\n    /// @notice Return ksd and unlock collateral (bond).\\n    /// @dev Record on ledge.\\n    /// @param bondAmount Amount of bond that was entrusted as collateral.\\n    function repayAll(uint256 bondAmount) external;\\n\\n    /// @notice Execute repay and unstake functions at the same time.\\n    /// @dev Unstake is executed after repay is executed.\\n    /// @param bondAmount Amount of bond that was entrusted as collateral.\\n    /// @param loanAmount Amount of ksd borrowed (loan).\\n    function repayAndUnstake(uint256 bondAmount, uint256 loanAmount) external;\\n\\n    /// @notice Execute repayAll and unstake functions at the same time.\\n    /// @dev Unstake is executed after repay is executed.\\n    /// @param bondAmount Amount of bond that was entrusted as collateral.\\n    function repayAllAndUnstake(uint256 bondAmount) external;\\n}\\n\",\"keccak256\":\"0xd56fe20973e9485b13b4fdf00c282008fb00dbae641da751bfb7aecc86c48a12\",\"license\":\"MIT\"},\"contracts/interface/IKSDGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title KSD input/output contract\\n/// @notice A collection of functions related to KSD move\\ninterface IKSDGateway {\\n    /// @notice ksd redemption & ksd burn\\n    function join(address usr, uint256 wad) external;\\n\\n    /// @notice ksd mint & borrow ksd (loan)\\n    function exit(address usr, uint256 wad) external;\\n\\n    /// @notice Ksd redemption & ksd burn.\\n    /// @dev Acting on behalf.\\n    function joinFrom(\\n        address ksdOwner,\\n        address usr,\\n        uint256 wad\\n    ) external;\\n\\n    /// @notice Ksd mint & borrow ksd (loan)\\n    /// @dev Acting on behalf (Transaction through ksd owner)\\n    function exitFrom(\\n        address ksdOwner,\\n        address usr,\\n        uint256 wad\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb68a88a40ccb45d304b0fd683f9e4e46407dea0d236115e145c935ebf1cf0d30\",\"license\":\"MIT\"},\"contracts/interface/ILedger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ILedger {\\n    // --- Events ---\\n    event CollateralChanged(bytes32 collateralType, address usr, int256 amount);\\n    event KSDChanged(address usr, int256 amount);\\n    event LoanChanged(bytes32 collateralType, address debtor, address collateralVault, address ksdVault, int256 collateralAmount, int256 loanAmount);\\n    event AccountChanged(bytes32 collateralType, address vault, uint256 lockedCollateral, uint256 loan);\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\uc900\\ub2e4.\\n    /// @notice authorize usr to manipulate msg.sender's vault\\n    function allow(address usr) external;\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\ubec7\\ub294.\\n    /// @notice Deauthorize usr from manipulating msg.sender's vault\\n    function disallow(address usr) external;\\n\\n    // --- Data view ---\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785.\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. totalLockedCollateral (\\uc804\\uccb4 locked\\ub41c \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. totalLoan (\\ubc1c\\ud589\\ub41c(\\ube4c\\ub9b0) KSD\\uc591)\\n    /// 3. rate (\\uc2dc\\uac04\\uc5d0 \\ub530\\ub77c \\uc810\\ucc28 \\uc99d\\uac00\\ud558\\uace0, accountInfo.loan \\uc5d0 \\uacf1\\ud574\\uc838\\uc11c \\uc0ac\\uc6a9\\uc790\\uac00 \\ube4c\\ub9b0 ksd\\uc758 \\uc591\\uc744 \\ub298\\ub9ac\\ub294 \\uc6a9\\ub3c4\\ub85c \\uc0ac\\uc6a9\\ub428. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (\\ub2f4\\ubcf4 \\ud0c0\\uc785\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd1d KSD)\\n    /// 6. dust (\\ud558\\ub098\\uc758 vault\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd5c\\uc800\\uc758 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Collateral Iinfo\\n    /// @param collateralType Type of collateral - initially, there's only one (Klay)\\n    /// @dev the value that it returns are\\n    /// 1. totalLockedCollateral\\n    /// 2. totalLoan\\n    /// 3. rate (It gradually increases over time and is multiplied by accountInfo.loan to increase the amount of ksd borrowed by the user.. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (Maximum KSD that can be minted from given collateral type)\\n    /// 6. dust (Minimum KSD that should be borrowed from a CDP)\\n    function collateralInfo(bytes32 collateralType)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\ub4e4 \\uc870\\ud68c\\n    /// @param collateralTypes \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785 list\\n    /// @dev collateralInfo \\uc758 \\uac12\\ub4e4\\uc744 array \\ub85c return\\n    function collateralInfos(bytes32[] calldata collateralTypes)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    /// @notice usr\\uc758 vault \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4 \\uc885\\ub958\\n    /// @param usr \\uc720\\uc800\\uc758 address\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. lockedCollateral (vault\\uc5d0 \\uc7a0\\uae34 \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. loan (vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Information of a user's vault\\n    /// @param collateralType type of collateral\\n    /// @param usr Address of the user\\n    /// @dev returns\\n    /// 1. lockedCollateral (amount of collateral locked in the user's vault)\\n    /// 2. loan (normalized amount of KSD minted from that vault)\\n    function accountInfo(bytes32 collateralType, address usr) external view returns (uint256, uint256);\\n\\n    /// @notice This function returns the index of a user of given collateral type\\n    ///         The index\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @dev \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785\\ub9c8\\ub2e4 cdp \\uc5f0 \\uc720\\uc800\\ub97c tracking \\ud558\\uae30 \\uc704\\ud55c \\uac83\\uc73c\\ub85c, \\uac01 \\uc720\\uc800\\uac00 \\uba87 \\ubc88\\uc9f8\\ub85c cdp\\ub97c \\uc5f4\\uc5c8\\ub294\\uc9c0\\ub97c \\uae30\\ub85d.\\n    /// @dev This function is designed to track the list of users who have opened a CDP (for each collateral type)\\n    ///       Since CDPs are never deleted once created, this index should not be update at any circumstances\\n    function accountIndex(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice access address of an account by index\\n    /// @param collateralType type of collateral\\n    /// @param index index of user\\n    /// @dev index \\ubc88\\uc9f8\\ub85c \\ub4e4\\uc5b4\\uc628 \\uc720\\uc800\\uc758 \\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\n    /// @dev returns the address of {index}-th CDP opener\\n    function accountByIndex(bytes32 collateralType, uint256 index) external view returns (address);\\n\\n    /// @notice Total number of user who have opened a CDP (given collateral type) - always increasing\\n    /// @param collateralType type of collateral\\n    /// @dev \\uc9c0\\uae08\\uae4c\\uc9c0 cdp\\ub97c \\uc5f0 \\uc720\\uc800\\uc758 \\uc218\\n    function accountLength(bytes32 collateralType) external view returns (uint256);\\n\\n    /// @notice locked \\ub418\\uc9c0 \\uc54a\\uc740 \\ub2f4\\ubcf4\\ubb3c\\uc758 \\uc591. \\ub2e8, \\uc2e4\\uc81c \\ub2f4\\ubcf4\\ubb3c\\uc740 gateway \\ucee8\\ud2b8\\ub809\\ud2b8\\uac00 \\uad00\\ub9ac\\ud558\\uace0 \\uc788\\uc74c.\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @notice The amount of collateral that are not locked.\\n    function token(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice \\ube4c\\ub9ac\\uac70\\ub098, ksdGateway\\ub97c \\ud1b5\\ud574\\uc11c \\ub4e4\\uc5b4\\uc628 ksd\\uc758 \\uc591.\\n    /// @param usr address of user\\n    /// @notice The amount of KSD lent to, or depositted by (through KSDGateway) the {usr}\\n    function ksd(address usr) external view returns (uint256);\\n\\n    /// @notice total KSD Issued [rad]\\n    function totalIssued() external view returns (uint256);\\n\\n    /// @notice Total Unbacked KSD [rad]\\n    function vice() external view returns (uint256);\\n\\n    /// @notice Total Debt Ceiling [rad]\\n    function line() external view returns (uint256);\\n\\n    /// @notice unbacked KSD [rad]\\n    function sin(address usr) external view returns (uint256);\\n\\n    /// @notice initialize collateral\\n    /// @param collateralType type of collateral to initialize.\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance\\n    function init(bytes32 collateralType) external;\\n\\n    /// @notice config something\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc640 \\uc624\\ub77c\\ud074 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance and oracle\\n    function config(\\n        bytes32 collateralType,\\n        bytes32 what,\\n        uint256 data\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0a8\\ub2e4.\\n    ///          \\uc7a5\\ubd80\\uc758 \\uae30\\ub85d\\ub41c token\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\uae30\\ud0a4 \\ub54c\\ubb38\\uc5d0 \\ubb34\\uc870\\uac74 \\ud5c8\\uac00\\ub41c contract\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    /// (eng)\\n    /// @notice Increase the amount of 'unlocked collateral'\\n    ///          (which means that the token is deposited into CDP but not yet considered as 'locked' as collateral)\\n    ///         This function changes the amount of 'unlocked collateral' of the CDP, so it should only be called by authorized contracts.\\n    function addCollateral(\\n        bytes32 collateralType,\\n        address usr,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc744 \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function.\\n    function sendCollateral(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        uint256 amoount\\n    ) external;\\n\\n    /// @notice ksd\\ub97c \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function. (\\uc2e4\\uc81c ksd token\\uc744 \\ubcf4\\ub0b4\\ub294 \\uac83\\uc774 \\uc544\\ub2c8\\ub77c, \\uc7a5\\ubd80 \\uc0c1\\uc758 \\uae30\\ub85d\\ub9cc \\ubc14\\ub01c)\\n    function sendKsd(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice token, ksd \\uc591\\uc744 \\ud1b5\\ud574\\uc11c vault\\uc758 \\uac12\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0b4.\\n    /// @param collateralType type of collateral\\n    /// @param debtor owner of vault\\n    /// @param collateralVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 token\\uc758 owner) \\ub2f4\\ubcf4\\ubb3c\\uc744 \\uac00\\uc838\\uc624\\uac70\\ub098 vault\\uc5d0\\uc11c unlock \\uc2dc\\ud0a8 \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub123\\uc744 \\uc8fc\\uc18c\\n    /// @param ksdVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 ksd\\uc758 owner) ksd\\ub97c vault\\uc5d0 \\ub123\\uc5b4\\uc8fc\\uac70\\ub098, vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd\\ub97c \\ub123\\uc5b4\\uc904 \\uacf3\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev vault\\uc5d0 ksd\\ub97c \\uac1a\\uac70\\ub098/\\ube4c\\ub9ac\\uac70\\ub098, \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub354 lock \\uc2dc\\ud0a4\\uac70\\ub098/\\ube7c\\uac70\\ub098\\n    /// \\ub2e8, vault\\ub294 \\ud56d\\uc0c1 safe \\ud574\\uc57c\\ud558\\uace0, dust \\uc774\\uc0c1\\uc758 ksd\\ub97c \\uc720\\uc9c0\\ud574\\uc57c \\ud55c\\ub2e4.\\n    /// \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4. \\uc608\\ub97c\\ub4e4\\uc5b4, \\ud5c8\\ub77d\\ubc1b\\uc9c0 \\uc54a\\uc740 \\uc0ac\\ub78c\\uc774 locked\\ub418\\uc9c0 \\uc54a\\uc740 \\ub0a8\\uc758 collateral\\ub97c \\uc790\\uc2e0\\uc758 vault\\ub85c lock \\uc2dc\\ud0a4\\uc9c0 \\ubabb\\ud574\\uc57c \\ud55c\\ub2e4.\\n    function actionLoan(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice vault\\uc5d0 \\uc7a0\\uae34 collateral\\uc591\\uc774\\ub098 ksd \\ubd80\\ucc44\\ub97c \\uc774\\ub3d9\\uc2dc\\ud0a8\\ub2e4.\\n    /// @param collateralType type of collateral\\n    /// @param src address of vault (accountInfo)\\n    /// @param dst address of vault (accountInfo)\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4.\\n    function fork(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\ubab0\\uc218 (confiscation)\\n    /// @param collateralType type of collateral\\n    /// @param debtor \\uccad\\uc0b0\\ub420 vault \\uc8fc\\uc18c\\n    /// @param collateralVault vault\\uc5d0\\uc11c locked\\ub41c \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ubab0\\uc218\\ud574\\uac08 \\uc8fc\\uccb4. (\\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 \\ud56d\\uc0c1 auctionHouse. auction\\uc5d0\\uc11c \\ud314\\uc544\\uc57c \\ud558\\uae30 \\ub54c\\ubb38)\\n    /// @param ksdVault vault\\uc5d0\\uc11c \\ube4c\\ub824\\uac04 ksd\\ub294 \\ub2f4\\ubcf4\\ubb3c\\uc774 auction\\uc5d0 \\ub4e4\\uc5b4\\uac04 \\uc21c\\uac04 backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\uc774\\uae30 \\ub54c\\ubb38\\uc5d0, \\uc774\\uac83\\uc744 \\ub9e1\\uc544\\uc904 \\uc8fc\\uccb4\\uac00 \\ud544\\uc694. \\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 minusBank\\uac00 \\ub9e1\\uc544\\uc900\\ub2e4.\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev liquidator\\uc758 liquidate\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub9bc\\n    function grab(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\uc0c1\\uc1c4\\ud558\\ub294 function. msg.sender\\uc758 ksd\\ub97c \\uc18c\\ubaa8\\ud55c\\ub2e4.\\n    function heal(uint256 amount) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\ub9cc\\ub4e4\\uc5b4\\uc11c msg.sender\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev minusBank\\uc5d0\\uc11c keeper\\ub4e4\\uc5d0\\uac8c incentive\\ub97c \\uc8fc\\uae30 \\uc704\\ud574\\uc11c, \\ubbf8\\ub9ac ksd\\ub97c \\ub300\\ucd9c\\ubc1b\\ub294 \\uc5ed\\ud560\\ub85c \\uc4f0\\uc778\\ub2e4.\\n    /// \\ub530\\ub77c\\uc11c, \\uc624\\uc9c1 minusBank\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function suck(\\n        address u,\\n        address v,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice stability fee\\ub97c ksdReceiver\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev StabilityFeeCollector\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function collectStabilityFee(\\n        bytes32 collateralType,\\n        address ksdReceiver,\\n        int256 rateDiff\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd665010e6fac1b9f0423339abad116c599c5ef2960fac177b2108fa68fd15b71\",\"license\":\"MIT\"},\"contracts/interface/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title Pausable contract\\ninterface IPausable {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    function paused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x5c4f557b09f3f3cf5a8ed0868fb545c91f5206144818a09d538243e48b9237e4\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\n\\ninterface IKIP7Detailed is IKIP7 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb19fcc63818f59c23defe41b45aa9235cd43a373d97fe222fc939ad3f0f697c9\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\nimport \\\"./IKIP7Detailed.sol\\\";\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7Extended is IKIP7Detailed {\\n    function mint(address usr, uint256 amount) external returns (bool);\\n\\n    function burn(address usr, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x68ea4321698aef5d82970660626d6e07ea4908b0b94bee9d6ceb2f8776c6c06b\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnExchangeImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../kip/IKIP7Detailed.sol\\\";\\n\\ninterface IKlaytnExchange is IKIP7Detailed {\\n    function fee() external view returns (uint256);\\n\\n    function getCurrentPool() external view returns (uint256, uint256);\\n\\n    function addKctLiquidity(uint256 amountA, uint256 amountB) external;\\n\\n    function estimatePos(address token, uint256 amount) external view returns (uint256);\\n\\n    function estimateNeg(address token, uint256 amount) external view returns (uint256);\\n\\n    function addKlayLiquidity(uint256 amount) external payable;\\n\\n    function tokenA() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function removeLiquidity(uint256 amount) external;\\n\\n    function claimReward() external;\\n\\n    function updateMiningIndex() external;\\n\\n    function changeMiningRate(uint256 _mining) external;\\n}\\n\",\"keccak256\":\"0xf73ef854715fe5c95229cb544fb23bb98483976769eace23a24a9b841c4cbe44\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnFactoryImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlaytnFactory {\\n    function tokenToPool(address tokenA, address tokenB) external view returns (address);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function getPoolCount() external view returns (uint256);\\n\\n    function createKctPool(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        uint256 fee\\n    ) external;\\n\\n    function createKlayPool(\\n        address token,\\n        uint256 amount,\\n        uint256 fee\\n    ) external payable;\\n\\n    function getPoolAddress(uint256 idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1dff8b30ec20ec0060f34b4255e919823c1725a0190fc9e413dc0afa72f2b8f0\",\"license\":\"MIT\"},\"contracts/keep/SingleCollateralAuctionTaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../interface/kip/IKIP7.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnExchangeImpl.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnFactoryImpl.sol\\\";\\nimport \\\"../interface/IAuctionHouse.sol\\\";\\nimport \\\"../interface/IAuctionTakerCallee.sol\\\";\\nimport \\\"../interface/IBond.sol\\\";\\nimport \\\"../interface/IGateway.sol\\\";\\nimport \\\"../interface/IKSDGateway.sol\\\";\\nimport \\\"../interface/ILedger.sol\\\";\\nimport \\\"../library/AccessControl.sol\\\";\\nimport \\\"../library/Pausable.sol\\\";\\nimport \\\"../interface/IAddressBook.sol\\\";\\n\\ncontract SingleCollateralAuctionTaker is AccessControl, Pausable, IAuctionTakerCallee {\\n    struct TakerInfo {\\n        // collateral -> ksd path\\n        address[] swapPath;\\n    }\\n\\n    IAddressBook public addressBook;\\n    mapping(bytes32 => TakerInfo) internal takerInfos;\\n\\n    mapping(bytes32 => uint256) public minProfitRate; // min profit rate * 1e9\\n\\n    uint256 constant RAY = 10**27;\\n\\n    function __SingleCollateralAuctionTaker_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    function config(bytes32 what, address data) external onlyAdmin {\\n        if (what == \\\"addressBook\\\") addressBook = IAddressBook(data);\\n        else revert(\\\"Taker::config:unrecognized-param\\\");\\n    }\\n\\n    function config(\\n        bytes32 what,\\n        bytes32 colType,\\n        address[] calldata data\\n    ) external onlyAdmin {\\n        if (what == \\\"swapPath\\\") takerInfos[colType].swapPath = data;\\n        else revert(\\\"Taker::config:unrecognized-param\\\");\\n    }\\n\\n    function config(\\n        bytes32 what,\\n        bytes32 colType,\\n        uint256 data\\n    ) external onlyAdmin {\\n        if (what == \\\"minProfitRate\\\") minProfitRate[colType] = data;\\n        else revert(\\\"Taker::config:unrecognized-param\\\");\\n    }\\n\\n    function withdrawKlay(address to, uint256 amount) external onlyAdmin {\\n        if (amount == 0) {\\n            (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n            require(success);\\n        } else {\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success);\\n        }\\n    }\\n\\n    function withdrawToken(\\n        IKIP7 token,\\n        address to,\\n        uint256 amount\\n    ) external onlyAdmin {\\n        if (amount == 0) {\\n            token.transfer(to, token.balanceOf(address(this)));\\n        } else {\\n            token.transfer(to, amount);\\n        }\\n    }\\n\\n    function joinKsdGateway(uint256 amount) external onlyAdmin {\\n        IKSDGateway(addressBook.ksdGateway()).join(address(this), amount);\\n    }\\n\\n    function exitKsdGateway(uint256 amount) external onlyAdmin {\\n        IKSDGateway(addressBook.ksdGateway()).exit(address(this), amount);\\n    }\\n\\n    function stakeCollateralGateway(bytes32 colType, uint256 amount) external onlyAdmin {\\n        IGateway(addressBook.getCollateralContract(colType, bytes32(\\\"gateway\\\"))).stake(amount);\\n    }\\n\\n    function unstakeCollateralGateway(bytes32 colType, uint256 amount) external onlyAdmin {\\n        IGateway(addressBook.getCollateralContract(colType, bytes32(\\\"gateway\\\"))).unstake(amount);\\n    }\\n\\n    function isProfitable(bytes32 colType, uint256 id) external view returns (bool) {\\n        uint256 bondAmount = bondAmountWithMaxProfit(colType, id);\\n        return bondAmount != 0;\\n    }\\n\\n    // take auction -> sell collateral -> repay ksd\\n    function takeAndExchange(bytes32 colType, uint256 id) external onlyOperator {\\n        uint256 bondAmount = bondAmountWithMaxProfit(colType, id);\\n        if (bondAmount == 0) {\\n            return;\\n        }\\n        bytes memory data = abi.encode(colType);\\n        address auctionHouse = addressBook.getCollateralContract(colType, bytes32(\\\"bondAuctionHouse\\\"));\\n        IAuctionHouse(auctionHouse).take(id, bondAmount, uint256(int256(-1)), address(this), data);\\n    }\\n\\n    function bondAmountWithMaxProfit(bytes32 colType, uint256 id) public view returns (uint256 bondAmount) {\\n        // price: ray, sellAmount: wad, raiseAmount: rad\\n        address auctionHouse = addressBook.getCollateralContract(colType, bytes32(\\\"bondAuctionHouse\\\"));\\n        address bond = addressBook.getCollateralContract(colType, bytes32(\\\"bond\\\"));\\n        (bool needsRedo, uint256 price, uint256 sellAmount, uint256 raiseAmount) = IAuctionHouse(auctionHouse).getStatus(id);\\n        if (needsRedo) {\\n            return 0;\\n        }\\n\\n        // collateral price in ray\\n        // ksd --(auction)-> collateral --(klayswap)-> ksd\\n        // collateral sell price must be higher than this\\n\\n        // collateral token sell amount\\n        uint256 maxSwapColAmount = maxSwap(colType, IBond(bond).toTokenAmount(sellAmount), (price * minProfitRate[colType]) / 1e9);\\n\\n        bondAmount = IBond(bond).fromTokenAmount(maxSwapColAmount);\\n        uint256 maxBondAmount = min(sellAmount, raiseAmount / price + 1);\\n        if (bondAmount >= maxBondAmount) {\\n            bondAmount = maxBondAmount;\\n        } else if (raiseAmount <= IAuctionHouse(auctionHouse).bound()) {\\n            // no partial take for small auctions\\n            return 0;\\n        }\\n    }\\n\\n    function takerCall(\\n        address taker,\\n        uint256 owe,\\n        uint256 slice,\\n        bytes calldata data\\n    ) external override {\\n        bytes32 colType = abi.decode(data, (bytes32));\\n        TakerInfo memory takerInfo = takerInfos[colType];\\n        address token = addressBook.getCollateralContract(colType, bytes32(\\\"token\\\"));\\n\\n        // called only when this contract takes an auction from the auction house\\n        require(msg.sender == addressBook.getCollateralContract(colType, bytes32(\\\"bondAuctionHouse\\\")));\\n        require(taker == address(this));\\n\\n        // exit collateral gateway\\n        uint256 tokenBefore = IKIP7(token).balanceOf(address(this));\\n        IGateway(addressBook.getCollateralContract(colType, bytes32(\\\"gateway\\\"))).unstake(slice);\\n        uint256 tokenAmount = IKIP7(token).balanceOf(address(this)) - tokenBefore;\\n\\n        // swap to ksd\\n        {\\n            address ksp = addressBook.ksp();\\n            address ksd = addressBook.ksd();\\n            IKIP7(token).approve(ksp, tokenAmount);\\n            IKlaytnFactory(ksp).exchangeKctPos(token, tokenAmount, ksd, 1, takerInfo.swapPath);\\n        }\\n\\n        // join ksd gateway\\n        IKSDGateway(addressBook.ksdGateway()).join(address(this), owe / RAY);\\n    }\\n\\n    // returns amountIn of the maximum swap\\n    function maxSwapView(bytes32 colType, uint256 amountIn_) external view returns (uint256) {\\n        address tokenIn = addressBook.getCollateralContract(colType, bytes32(\\\"token\\\"));\\n        address tokenOut = addressBook.ksd();\\n        address[] memory path = takerInfos[colType].swapPath;\\n        uint256 n = path.length;\\n\\n        // Caching\\n        uint256[] memory cachePoolIn = new uint256[](n + 1);\\n        uint256[] memory cachePoolOut = new uint256[](n + 1);\\n        uint256[] memory cacheFee = new uint256[](n + 1);\\n\\n        {\\n            address ksp = addressBook.ksp();\\n            address nowToken = tokenIn;\\n            address pool;\\n            address tokenA;\\n            uint256 poolA;\\n            uint256 poolB;\\n            uint256 fee;\\n            for (uint256 i = 0; i < n; i++) {\\n                pool = IKlaytnFactory(ksp).tokenToPool(nowToken, path[i]);\\n                tokenA = IKlaytnExchange(pool).tokenA();\\n                (poolA, poolB) = IKlaytnExchange(pool).getCurrentPool();\\n                fee = IKlaytnExchange(pool).fee();\\n                if (tokenA == path[i]) {\\n                    cachePoolIn[i] = poolB;\\n                    cachePoolOut[i] = poolA;\\n                } else {\\n                    cachePoolIn[i] = poolA;\\n                    cachePoolOut[i] = poolB;\\n                }\\n                cacheFee[i] = fee;\\n                nowToken = path[i];\\n            }\\n            pool = IKlaytnFactory(ksp).tokenToPool(nowToken, tokenOut);\\n            tokenA = IKlaytnExchange(pool).tokenA();\\n            (poolA, poolB) = IKlaytnExchange(pool).getCurrentPool();\\n            fee = IKlaytnExchange(pool).fee();\\n            if (tokenA == tokenOut) {\\n                cachePoolIn[n] = poolB;\\n                cachePoolOut[n] = poolA;\\n            } else {\\n                cachePoolIn[n] = poolA;\\n                cachePoolOut[n] = poolB;\\n            }\\n            cacheFee[n] = fee;\\n        }\\n\\n        uint256 amountIn = amountIn_;\\n        uint256 priceAfter = RAY;\\n        for (uint256 i = 0; i < n + 1; i++) {\\n            uint256 poolIn = cachePoolIn[i];\\n            uint256 poolOut = cachePoolOut[i];\\n            uint256 fee = cacheFee[i];\\n\\n            uint256 num = poolOut * amountIn * (10000 - fee);\\n            uint256 den = poolIn * 10000 + amountIn * (10000 - fee);\\n            uint256 amountOut = num / den;\\n\\n            // XXX: for whitelisted pools, use `amountIn * (10000 - fee)`\\n            poolIn = poolIn + amountIn;\\n            poolOut = poolOut - amountOut;\\n\\n            // update\\n            amountIn = amountOut;\\n            priceAfter = (priceAfter * poolOut * (10000 - fee)) / poolIn / 10000;\\n        }\\n        return priceAfter;\\n    }\\n\\n    // returns amountIn of the maximum swap\\n    function maxSwap(\\n        bytes32 colType,\\n        uint256 maxAmountIn,\\n        uint256 minPrice // ray\\n    ) internal view returns (uint256) {\\n        address tokenIn = addressBook.getCollateralContract(colType, bytes32(\\\"token\\\"));\\n        address tokenOut = addressBook.ksd();\\n        address[] memory path = takerInfos[colType].swapPath;\\n        uint256 n = path.length;\\n\\n        // Caching\\n        uint256[] memory cachePoolIn = new uint256[](n + 1);\\n        uint256[] memory cachePoolOut = new uint256[](n + 1);\\n        uint256[] memory cacheFee = new uint256[](n + 1);\\n\\n        {\\n            address ksp = addressBook.ksp();\\n            address nowToken = tokenIn;\\n            address pool;\\n            address tokenA;\\n            uint256 poolA;\\n            uint256 poolB;\\n            uint256 fee;\\n            for (uint256 i = 0; i < n; i++) {\\n                pool = IKlaytnFactory(ksp).tokenToPool(nowToken, path[i]);\\n                tokenA = IKlaytnExchange(pool).tokenA();\\n                (poolA, poolB) = IKlaytnExchange(pool).getCurrentPool();\\n                fee = IKlaytnExchange(pool).fee();\\n                if (tokenA == path[i]) {\\n                    cachePoolIn[i] = poolB;\\n                    cachePoolOut[i] = poolA;\\n                } else {\\n                    cachePoolIn[i] = poolA;\\n                    cachePoolOut[i] = poolB;\\n                }\\n                cacheFee[i] = fee;\\n                nowToken = path[i];\\n            }\\n            pool = IKlaytnFactory(ksp).tokenToPool(nowToken, tokenOut);\\n            tokenA = IKlaytnExchange(pool).tokenA();\\n            (poolA, poolB) = IKlaytnExchange(pool).getCurrentPool();\\n            fee = IKlaytnExchange(pool).fee();\\n            if (tokenA == tokenOut) {\\n                cachePoolIn[n] = poolB;\\n                cachePoolOut[n] = poolA;\\n            } else {\\n                cachePoolIn[n] = poolA;\\n                cachePoolOut[n] = poolB;\\n            }\\n            cacheFee[n] = fee;\\n        }\\n\\n        // Binary search\\n        uint256 high = maxAmountIn;\\n        uint256 low = 0;\\n        while (high > low) {\\n            uint256 mid = (high + low) / 2;\\n            // Get price after swap\\n            uint256 amountIn = mid;\\n            uint256 priceAfter = RAY;\\n            for (uint256 i = 0; i < n + 1; i++) {\\n                uint256 poolIn = cachePoolIn[i];\\n                uint256 poolOut = cachePoolOut[i];\\n                uint256 fee = cacheFee[i];\\n\\n                uint256 num = poolOut * amountIn * (10000 - fee);\\n                uint256 den = poolIn * 10000 + amountIn * (10000 - fee);\\n                uint256 amountOut = num / den;\\n\\n                // XXX: for whitelisted pools, use `amountIn * (10000 - fee)`\\n                poolIn = poolIn + amountIn;\\n                poolOut = poolOut - amountOut;\\n\\n                // update\\n                amountIn = amountOut;\\n                priceAfter = ((priceAfter * poolOut) / poolIn / 10000) * (10000 - fee);\\n            }\\n            if (priceAfter > minPrice) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return high;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (x < y) {\\n            return x;\\n        } else {\\n            return y;\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x29216543f8a7ec5bd785b72711f5e6f326a4b7ab8262270d9e88e086f7752569\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b7a806100206000396000f3fe6080604052600436106101a05760003560e01c80637b3a0d1b116100ec578063bed4df201161008a578063d6d7391711610064578063d6d7391714610485578063e90daa9b146104a5578063f2fde38b146104c5578063f5887cdd146104e5576101a7565b8063bed4df2014610425578063d366f3b914610445578063d547741f14610465576101a7565b806391d14854116100c657806391d14854146103b05780639708a9c8146103d0578063a217fddf146103f0578063b37cff9014610405576101a7565b80637b3a0d1b1461034e57806381bf74b61461036e5780638456cb591461039b576101a7565b806336568abe11610159578063560b4f2711610133578063560b4f27146102d65780635c975abb146102f65780636e6593a01461030e578063763323481461032e576101a7565b806336568abe1461028c57806339ccbe81146102ac5780633f4ba83a146102c1576101a7565b806301e33667146101a9578063147bfcdd146101c957806315a42d59146101e95780631b6c36cc1461021e578063248a9ca31461023e5780632f2ff15d1461026c576101a7565b366101a757005b005b3480156101b557600080fd5b506101a76101c43660046138df565b610522565b3480156101d557600080fd5b506101a76101e43660046136e7565b6106c7565b3480156101f557600080fd5b506102096102043660046138be565b610db4565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b506101a76102393660046138be565b610dcd565b34801561024a57600080fd5b5061025e6102593660046137ce565b610ed2565b604051908152602001610215565b34801561027857600080fd5b506101a76102873660046137e6565b610eeb565b34801561029857600080fd5b506101a76102a73660046137e6565b610f08565b3480156102b857600080fd5b506101a7610f8b565b3480156102cd57600080fd5b506101a7611009565b3480156102e257600080fd5b506101a76102f1366004613893565b6110a7565b34801561030257600080fd5b5060025460ff16610209565b34801561031a57600080fd5b506101a7610329366004613815565b61112f565b34801561033a57600080fd5b506101a76103493660046136bc565b611173565b34801561035a57600080fd5b506101a76103693660046138be565b61124f565b34801561037a57600080fd5b5061025e6103893660046137ce565b60046020526000908152604090205481565b3480156103a757600080fd5b506101a7611370565b3480156103bc57600080fd5b506102096103cb3660046137e6565b611407565b3480156103dc57600080fd5b506101a76103eb3660046137ce565b611432565b3480156103fc57600080fd5b5061025e600081565b34801561041157600080fd5b5061025e6104203660046138be565b611530565b34801561043157600080fd5b506101a76104403660046138be565b6118fa565b34801561045157600080fd5b506101a76104603660046137e6565b611a5c565b34801561047157600080fd5b506101a76104803660046137e6565b611aa9565b34801561049157600080fd5b5061025e6104a03660046138be565b611ac6565b3480156104b157600080fd5b506101a76104c03660046137ce565b6125fe565b3480156104d157600080fd5b506101a76104e036600461367d565b6126cb565b3480156104f157600080fd5b5060025461050a9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610215565b6105346430b236b4b760d91b33612701565b8061063e576040516370a0823160e01b81523060048201526001600160a01b0384169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561058257600080fd5b505afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba919061391f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561060057600080fd5b505af1158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190613778565b506106c2565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190613778565b505b505050565b60006106d5828401846137ce565b60008181526003602090815260408083208151815480850282018401845293810184815295965093949092849284919084018282801561073e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610720575b50505091909252505060025460405163f084b66960e01b815260048101869052643a37b5b2b760d91b60248201529293506000926101009091046001600160a01b0316915063f084b6699060440160206040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc91906136a0565b60025460405163f084b66960e01b8152600481018690526f626f6e6441756374696f6e486f75736560801b602482015291925061010090046001600160a01b03169063f084b6699060440160206040518083038186803b15801561083f57600080fd5b505afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087791906136a0565b6001600160a01b0316336001600160a01b03161461089457600080fd5b6001600160a01b03881630146108a957600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610923919061391f565b60025460405163f084b66960e01b815260048101879052666761746577617960c81b602482015291925061010090046001600160a01b03169063f084b6699060440160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906136a0565b6001600160a01b0316632e17de78886040518263ffffffff1660e01b81526004016109e291815260200190565b600060405180830381600087803b1580156109fc57600080fd5b505af1158015610a10573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a90919061391f565b610a9a9190613ae7565b90506000600260019054906101000a90046001600160a01b03166001600160a01b0316639082d0ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906136a0565b90506000600260019054906101000a90046001600160a01b03166001600160a01b031663a6d5f1036040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae91906136a0565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018690529192509086169063095ea7b390604401602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190613778565b5085516040516352f28c1760e01b81526001600160a01b038416916352f28c1791610c6b918991889187916001919060040161395a565b600060405180830381600087803b158015610c8557600080fd5b505af1158015610c99573d6000803e3d6000fd5b505050505050600260019054906101000a90046001600160a01b03166001600160a01b031663f223fab46040518163ffffffff1660e01b815260040160206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2591906136a0565b6001600160a01b0316633b4da69f30610d4a6b033b2e3c9fd0803ce80000008d613aa8565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b5050505050505050505050505050565b600080610dc18484611530565b15159150505b92915050565b610ddf6430b236b4b760d91b33612701565b60025460405163f084b66960e01b815260048101849052666761746577617960c81b60248201526101009091046001600160a01b03169063f084b6699060440160206040518083038186803b158015610e3757600080fd5b505afa158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f91906136a0565b6001600160a01b0316632e17de78826040518263ffffffff1660e01b8152600401610e9c91815260200190565b600060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050505050565b600081815260016020819052604090912001545b919050565b610ef482610ed2565b610efe8133612701565b6106c28383612765565b6001600160a01b0381163314610f7d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610f8782826127d0565b5050565b600054610100900460ff1680610fa05750303b155b80610fae575060005460ff16155b610fca5760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff16158015610fec576000805461ffff19166101011790555b610ff4612837565b8015611006576000805461ff00191690555b50565b60025460ff166110525760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610f74565b653830bab9b2b960d11b6110668133612701565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6110b96430b236b4b760d91b33612701565b826c6d696e50726f6669745261746560981b14156110e75760008281526004602052604090208190556106c2565b60405162461bcd60e51b815260206004820181905260248201527f54616b65723a3a636f6e6669673a756e7265636f676e697a65642d706172616d6044820152606401610f74565b6111416430b236b4b760d91b33612701565b83670e6eec2e0a0c2e8d60c31b14156110e757600083815260036020526040902061116d9083836135f5565b506106c0565b6111856430b236b4b760d91b33612701565b806111ef576040516000906001600160a01b038416903031908381818185875af1925050503d80600081146111d6576040519150601f19603f3d011682016040523d82523d6000602084013e6111db565b606091505b50509050806111e957600080fd5b50610f87565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461123c576040519150601f19603f3d011682016040523d82523d6000602084013e611241565b606091505b50509050806106c257600080fd5b6112616430b236b4b760d91b33612701565b60025460405163f084b66960e01b815260048101849052666761746577617960c81b60248201526101009091046001600160a01b03169063f084b6699060440160206040518083038186803b1580156112b957600080fd5b505afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f191906136a0565b6001600160a01b031663a694fc3a826040518263ffffffff1660e01b815260040161131e91815260200190565b602060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c2919061391f565b60025460ff16156113b65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610f74565b653830bab9b2b960d11b6113ca8133612701565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589060200161109c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114446430b236b4b760d91b33612701565b600260019054906101000a90046001600160a01b03166001600160a01b031663f223fab46040518163ffffffff1660e01b815260040160206040518083038186803b15801561149257600080fd5b505afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca91906136a0565b604051633b4da69f60e01b8152306004820152602481018390526001600160a01b039190911690633b4da69f906044015b600060405180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b5050505050565b60025460405163f084b66960e01b8152600481018490526f626f6e6441756374696f6e486f75736560801b602482015260009182916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b15801561159657600080fd5b505afa1580156115aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ce91906136a0565b60025460405163f084b66960e01b81526004810187905263189bdb9960e21b60248201529192506000916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166191906136a0565b9050600080600080856001600160a01b0316635c622a0e896040518263ffffffff1660e01b815260040161169791815260200190565b60806040518083038186803b1580156116af57600080fd5b505afa1580156116c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e79190613792565b935093509350935083156117045760009650505050505050610dc7565b60006117b68a876001600160a01b031663174e4ea6866040518263ffffffff1660e01b815260040161173891815260200190565b60206040518083038186803b15801561175057600080fd5b505afa158015611764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611788919061391f565b60008d815260046020526040902054633b9aca00906117a79089613ac8565b6117b19190613aa8565b6128ce565b604051637214956f60e01b8152600481018290529091506001600160a01b03871690637214956f9060240160206040518083038186803b1580156117f957600080fd5b505afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611831919061391f565b97506000611853846118438786613aa8565b61184e906001613a90565b613444565b9050808910611864578098506118ec565b876001600160a01b031663be4df7d66040518163ffffffff1660e01b815260040160206040518083038186803b15801561189d57600080fd5b505afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d5919061391f565b83116118ec57600098505050505050505050610dc7565b505050505050505092915050565b61190f6737b832b930ba37b960c11b33612701565b600061191b8383611530565b9050806119285750610f87565b60008360405160200161193d91815260200190565b60408051808303601f190181529082905260025463f084b66960e01b8352600483018790526f626f6e6441756374696f6e486f75736560801b60248401529092506000916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b1580156119b257600080fd5b505afa1580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea91906136a0565b6040516381a794cb60e01b81529091506001600160a01b038216906381a794cb90611a2390879087906000199030908990600401613a18565b600060405180830381600087803b158015611a3d57600080fd5b505af1158015611a51573d6000803e3d6000fd5b505050505050505050565b611a6e6430b236b4b760d91b33612701565b816a61646472657373426f6f6b60a81b14156110e75760028054610100600160a81b0319166101006001600160a01b03841602179055610f87565b611ab282610ed2565b611abc8133612701565b6106c283836127d0565b60025460405163f084b66960e01b815260048101849052643a37b5b2b760d91b602482015260009182916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b158015611b2157600080fd5b505afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5991906136a0565b90506000600260019054906101000a90046001600160a01b03166001600160a01b031663a6d5f1036040518163ffffffff1660e01b815260040160206040518083038186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be391906136a0565b600086815260036020908152604080832080548251818502810185019093528083529495509293909291830182828015611c4657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c28575b5050835193945060009250611c6091508390506001613a90565b67ffffffffffffffff811115611c8657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611caf578160200160208202803683370190505b5090506000611cbf836001613a90565b67ffffffffffffffff811115611ce557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d0e578160200160208202803683370190505b5090506000611d1e846001613a90565b67ffffffffffffffff811115611d4457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d6d578160200160208202803683370190505b5090506000600260019054906101000a90046001600160a01b03166001600160a01b0316639082d0ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc057600080fd5b505afa158015611dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df891906136a0565b905087600080808080805b8b81101561218a57876001600160a01b031663fd435cb9888f8481518110611e3b57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401611e759291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015611e8d57600080fd5b505afa158015611ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec591906136a0565b9550856001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0057600080fd5b505afa158015611f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3891906136a0565b9450856001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b158015611f7257600080fd5b505afa158015611f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faa9190613937565b8094508195505050856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015611feb57600080fd5b505afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612023919061391f565b91508c818151811061204557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316856001600160a01b031614156120c557828b828151811061208757634e487b7160e01b600052603260045260246000fd5b602002602001018181525050838a82815181106120b457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612120565b838b82815181106120e657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050828a828151811061211357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b8189828151811061214157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508c818151811061216d57634e487b7160e01b600052603260045260246000fd5b60200260200101519650808061218290613afe565b915050611e03565b5060405163fd435cb960e01b81526001600160a01b0387811660048301528e8116602483015288169063fd435cb99060440160206040518083038186803b1580156121d457600080fd5b505afa1580156121e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220c91906136a0565b9450846001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561224757600080fd5b505afa15801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f91906136a0565b9350846001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b1580156122b957600080fd5b505afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f19190613937565b8093508194505050846001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561233257600080fd5b505afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a919061391f565b90508c6001600160a01b0316846001600160a01b031614156123e557818a8c815181106123a757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505082898c815181106123d457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612440565b828a8c8151811061240657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081898c8151811061243357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80888c8151811061246157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508e95506b033b2e3c9fd0803ce80000009450600093505050505b612492876001613a90565b8110156125ee5760008682815181106124bb57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106124e757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600086848151811061251357634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008161271061252d9190613ae7565b6125378885613ac8565b6125419190613ac8565b9050600061255183612710613ae7565b61255b9089613ac8565b61256786612710613ac8565b6125719190613a90565b9050600061257f8284613aa8565b905061258b8987613a90565b95506125978186613ae7565b909850935087612710866125ab8683613ae7565b6125b5888c613ac8565b6125bf9190613ac8565b6125c99190613aa8565b6125d39190613aa8565b975050505050505080806125e690613afe565b915050612487565b509b9a5050505050505050505050565b6126106430b236b4b760d91b33612701565b600260019054906101000a90046001600160a01b03166001600160a01b031663f223fab46040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269691906136a0565b60405163ef693bed60e01b8152306004820152602481018390526001600160a01b03919091169063ef693bed906044016114fb565b6126dd6437bbb732b960d91b33612701565b6126ef6437bbb732b960d91b82612765565b6110066437bbb732b960d91b336127d0565b61270b8282611407565b610f875760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b6064820152608401610f74565b61276f8282611407565b610f875760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6127da8282611407565b15610f875760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff168061284c5750303b155b8061285a575060005460ff16155b6128765760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff16158015612898576000805461ffff19166101011790555b6128a061345c565b6128bb653830bab9b2b960d11b6437bbb732b960d91b6134c5565b610ff4653830bab9b2b960d11b3361351a565b60025460405163f084b66960e01b815260048101859052643a37b5b2b760d91b602482015260009182916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b15801561292957600080fd5b505afa15801561293d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296191906136a0565b90506000600260019054906101000a90046001600160a01b03166001600160a01b031663a6d5f1036040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b357600080fd5b505afa1580156129c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129eb91906136a0565b600087815260036020908152604080832080548251818502810185019093528083529495509293909291830182828015612a4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a30575b5050835193945060009250612a6891508390506001613a90565b67ffffffffffffffff811115612a8e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ab7578160200160208202803683370190505b5090506000612ac7836001613a90565b67ffffffffffffffff811115612aed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b16578160200160208202803683370190505b5090506000612b26846001613a90565b67ffffffffffffffff811115612b4c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b75578160200160208202803683370190505b5090506000600260019054906101000a90046001600160a01b03166001600160a01b0316639082d0ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc857600080fd5b505afa158015612bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0091906136a0565b905087600080808080805b8b811015612f9257876001600160a01b031663fd435cb9888f8481518110612c4357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401612c7d9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015612c9557600080fd5b505afa158015612ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccd91906136a0565b9550856001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0857600080fd5b505afa158015612d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4091906136a0565b9450856001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b158015612d7a57600080fd5b505afa158015612d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db29190613937565b8094508195505050856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015612df357600080fd5b505afa158015612e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2b919061391f565b91508c8181518110612e4d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316856001600160a01b03161415612ecd57828b8281518110612e8f57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050838a8281518110612ebc57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612f28565b838b8281518110612eee57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050828a8281518110612f1b57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b81898281518110612f4957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508c8181518110612f7557634e487b7160e01b600052603260045260246000fd5b602002602001015196508080612f8a90613afe565b915050612c0b565b5060405163fd435cb960e01b81526001600160a01b0387811660048301528e8116602483015288169063fd435cb99060440160206040518083038186803b158015612fdc57600080fd5b505afa158015612ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301491906136a0565b9450846001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561304f57600080fd5b505afa158015613063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308791906136a0565b9350846001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b1580156130c157600080fd5b505afa1580156130d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f99190613937565b8093508194505050846001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561313a57600080fd5b505afa15801561314e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613172919061391f565b90508c6001600160a01b0316846001600160a01b031614156131ed57818a8c815181106131af57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505082898c815181106131dc57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050613248565b828a8c8151811061320e57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081898c8151811061323b57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80888c8151811061326957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508f955060009450505050505b808211156125ee57600060026132978385613a90565b6132a19190613aa8565b9050806b033b2e3c9fd0803ce800000060005b6132bf8a6001613a90565b81101561341d5760008982815181106132e857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600089838151811061331457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600089848151811061334057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008161271061335a9190613ae7565b6133648885613ac8565b61336e9190613ac8565b9050600061337e83612710613ae7565b6133889089613ac8565b61339486612710613ac8565b61339e9190613a90565b905060006133ac8284613aa8565b90506133b88987613a90565b95506133c48186613ae7565b9098509350876133d684612710613ae7565b612710876133e4888c613ac8565b6133ee9190613aa8565b6133f89190613aa8565b6134029190613ac8565b9750505050505050808061341590613afe565b9150506132b4565b508d81111561343857613431836001613a90565b935061343c565b8294505b505050613281565b600081831015613455575081610dc7565b5080610dc7565b600054610100900460ff16806134715750303b155b8061347f575060005460ff16155b61349b5760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff161580156134bd576000805461ffff19166101011790555b610ff4613524565b60006134d083610ed2565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610f878282612765565b600054610100900460ff16806135395750303b155b80613547575060005460ff16155b6135635760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff16158015613585576000805461ffff19166101011790555b6135976437bbb732b960d91b3361351a565b6135b16430b236b4b760d91b6437bbb732b960d91b6134c5565b6135ce6737b832b930ba37b960c11b6437bbb732b960d91b6134c5565b6135e06430b236b4b760d91b3361351a565b610ff46737b832b930ba37b960c11b3361351a565b828054828255906000526020600020908101928215613648579160200282015b828111156136485781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613615565b50613654929150613658565b5090565b5b808211156136545760008155600101613659565b80518015158114610ee657600080fd5b60006020828403121561368e578081fd5b813561369981613b2f565b9392505050565b6000602082840312156136b1578081fd5b815161369981613b2f565b600080604083850312156136ce578081fd5b82356136d981613b2f565b946020939093013593505050565b6000806000806000608086880312156136fe578081fd5b853561370981613b2f565b94506020860135935060408601359250606086013567ffffffffffffffff80821115613733578283fd5b818801915088601f830112613746578283fd5b813581811115613754578384fd5b896020828501011115613765578384fd5b9699959850939650602001949392505050565b600060208284031215613789578081fd5b6136998261366d565b600080600080608085870312156137a7578384fd5b6137b08561366d565b60208601516040870151606090970151919890975090945092505050565b6000602082840312156137df578081fd5b5035919050565b600080604083850312156137f8578182fd5b82359150602083013561380a81613b2f565b809150509250929050565b6000806000806060858703121561382a578384fd5b8435935060208501359250604085013567ffffffffffffffff8082111561384f578384fd5b818701915087601f830112613862578384fd5b813581811115613870578485fd5b8860208260051b8501011115613884578485fd5b95989497505060200194505050565b6000806000606084860312156138a7578283fd5b505081359360208301359350604090920135919050565b600080604083850312156138d0578182fd5b50508035926020909101359150565b6000806000606084860312156138f3578283fd5b83356138fe81613b2f565b9250602084013561390e81613b2f565b929592945050506040919091013590565b600060208284031215613930578081fd5b5051919050565b60008060408385031215613949578182fd5b505080516020909101519092909150565b600060a0820160018060a01b03808916845260208881860152818816604086015286606086015260a0608086015282865180855260c0870191508288019450855b818110156139b957855185168352948301949183019160010161399b565b50909b9a5050505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008682526020868184015285604084015260018060a01b038516606084015260a0608084015283518060a0850152825b81811015613a655785810183015185820160c001528201613a49565b81811115613a76578360c083870101525b50601f01601f19169290920160c001979650505050505050565b60008219821115613aa357613aa3613b19565b500190565b600082613ac357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613ae257613ae2613b19565b500290565b600082821015613af957613af9613b19565b500390565b6000600019821415613b1257613b12613b19565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461100657600080fdfea2646970667358221220a5f5c44ae8dab2aa00fcf29c178e84da5e84c0ecc224dc2bdb1490a7e4e046ab64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80637b3a0d1b116100ec578063bed4df201161008a578063d6d7391711610064578063d6d7391714610485578063e90daa9b146104a5578063f2fde38b146104c5578063f5887cdd146104e5576101a7565b8063bed4df2014610425578063d366f3b914610445578063d547741f14610465576101a7565b806391d14854116100c657806391d14854146103b05780639708a9c8146103d0578063a217fddf146103f0578063b37cff9014610405576101a7565b80637b3a0d1b1461034e57806381bf74b61461036e5780638456cb591461039b576101a7565b806336568abe11610159578063560b4f2711610133578063560b4f27146102d65780635c975abb146102f65780636e6593a01461030e578063763323481461032e576101a7565b806336568abe1461028c57806339ccbe81146102ac5780633f4ba83a146102c1576101a7565b806301e33667146101a9578063147bfcdd146101c957806315a42d59146101e95780631b6c36cc1461021e578063248a9ca31461023e5780632f2ff15d1461026c576101a7565b366101a757005b005b3480156101b557600080fd5b506101a76101c43660046138df565b610522565b3480156101d557600080fd5b506101a76101e43660046136e7565b6106c7565b3480156101f557600080fd5b506102096102043660046138be565b610db4565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b506101a76102393660046138be565b610dcd565b34801561024a57600080fd5b5061025e6102593660046137ce565b610ed2565b604051908152602001610215565b34801561027857600080fd5b506101a76102873660046137e6565b610eeb565b34801561029857600080fd5b506101a76102a73660046137e6565b610f08565b3480156102b857600080fd5b506101a7610f8b565b3480156102cd57600080fd5b506101a7611009565b3480156102e257600080fd5b506101a76102f1366004613893565b6110a7565b34801561030257600080fd5b5060025460ff16610209565b34801561031a57600080fd5b506101a7610329366004613815565b61112f565b34801561033a57600080fd5b506101a76103493660046136bc565b611173565b34801561035a57600080fd5b506101a76103693660046138be565b61124f565b34801561037a57600080fd5b5061025e6103893660046137ce565b60046020526000908152604090205481565b3480156103a757600080fd5b506101a7611370565b3480156103bc57600080fd5b506102096103cb3660046137e6565b611407565b3480156103dc57600080fd5b506101a76103eb3660046137ce565b611432565b3480156103fc57600080fd5b5061025e600081565b34801561041157600080fd5b5061025e6104203660046138be565b611530565b34801561043157600080fd5b506101a76104403660046138be565b6118fa565b34801561045157600080fd5b506101a76104603660046137e6565b611a5c565b34801561047157600080fd5b506101a76104803660046137e6565b611aa9565b34801561049157600080fd5b5061025e6104a03660046138be565b611ac6565b3480156104b157600080fd5b506101a76104c03660046137ce565b6125fe565b3480156104d157600080fd5b506101a76104e036600461367d565b6126cb565b3480156104f157600080fd5b5060025461050a9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610215565b6105346430b236b4b760d91b33612701565b8061063e576040516370a0823160e01b81523060048201526001600160a01b0384169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561058257600080fd5b505afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba919061391f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561060057600080fd5b505af1158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190613778565b506106c2565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561068857600080fd5b505af115801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190613778565b505b505050565b60006106d5828401846137ce565b60008181526003602090815260408083208151815480850282018401845293810184815295965093949092849284919084018282801561073e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610720575b50505091909252505060025460405163f084b66960e01b815260048101869052643a37b5b2b760d91b60248201529293506000926101009091046001600160a01b0316915063f084b6699060440160206040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc91906136a0565b60025460405163f084b66960e01b8152600481018690526f626f6e6441756374696f6e486f75736560801b602482015291925061010090046001600160a01b03169063f084b6699060440160206040518083038186803b15801561083f57600080fd5b505afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087791906136a0565b6001600160a01b0316336001600160a01b03161461089457600080fd5b6001600160a01b03881630146108a957600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610923919061391f565b60025460405163f084b66960e01b815260048101879052666761746577617960c81b602482015291925061010090046001600160a01b03169063f084b6699060440160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906136a0565b6001600160a01b0316632e17de78886040518263ffffffff1660e01b81526004016109e291815260200190565b600060405180830381600087803b1580156109fc57600080fd5b505af1158015610a10573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a90919061391f565b610a9a9190613ae7565b90506000600260019054906101000a90046001600160a01b03166001600160a01b0316639082d0ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906136a0565b90506000600260019054906101000a90046001600160a01b03166001600160a01b031663a6d5f1036040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae91906136a0565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018690529192509086169063095ea7b390604401602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190613778565b5085516040516352f28c1760e01b81526001600160a01b038416916352f28c1791610c6b918991889187916001919060040161395a565b600060405180830381600087803b158015610c8557600080fd5b505af1158015610c99573d6000803e3d6000fd5b505050505050600260019054906101000a90046001600160a01b03166001600160a01b031663f223fab46040518163ffffffff1660e01b815260040160206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2591906136a0565b6001600160a01b0316633b4da69f30610d4a6b033b2e3c9fd0803ce80000008d613aa8565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610d9057600080fd5b505af1158015610da4573d6000803e3d6000fd5b5050505050505050505050505050565b600080610dc18484611530565b15159150505b92915050565b610ddf6430b236b4b760d91b33612701565b60025460405163f084b66960e01b815260048101849052666761746577617960c81b60248201526101009091046001600160a01b03169063f084b6699060440160206040518083038186803b158015610e3757600080fd5b505afa158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f91906136a0565b6001600160a01b0316632e17de78826040518263ffffffff1660e01b8152600401610e9c91815260200190565b600060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050505050565b600081815260016020819052604090912001545b919050565b610ef482610ed2565b610efe8133612701565b6106c28383612765565b6001600160a01b0381163314610f7d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610f8782826127d0565b5050565b600054610100900460ff1680610fa05750303b155b80610fae575060005460ff16155b610fca5760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff16158015610fec576000805461ffff19166101011790555b610ff4612837565b8015611006576000805461ff00191690555b50565b60025460ff166110525760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610f74565b653830bab9b2b960d11b6110668133612701565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6110b96430b236b4b760d91b33612701565b826c6d696e50726f6669745261746560981b14156110e75760008281526004602052604090208190556106c2565b60405162461bcd60e51b815260206004820181905260248201527f54616b65723a3a636f6e6669673a756e7265636f676e697a65642d706172616d6044820152606401610f74565b6111416430b236b4b760d91b33612701565b83670e6eec2e0a0c2e8d60c31b14156110e757600083815260036020526040902061116d9083836135f5565b506106c0565b6111856430b236b4b760d91b33612701565b806111ef576040516000906001600160a01b038416903031908381818185875af1925050503d80600081146111d6576040519150601f19603f3d011682016040523d82523d6000602084013e6111db565b606091505b50509050806111e957600080fd5b50610f87565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461123c576040519150601f19603f3d011682016040523d82523d6000602084013e611241565b606091505b50509050806106c257600080fd5b6112616430b236b4b760d91b33612701565b60025460405163f084b66960e01b815260048101849052666761746577617960c81b60248201526101009091046001600160a01b03169063f084b6699060440160206040518083038186803b1580156112b957600080fd5b505afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f191906136a0565b6001600160a01b031663a694fc3a826040518263ffffffff1660e01b815260040161131e91815260200190565b602060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c2919061391f565b60025460ff16156113b65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610f74565b653830bab9b2b960d11b6113ca8133612701565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589060200161109c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114446430b236b4b760d91b33612701565b600260019054906101000a90046001600160a01b03166001600160a01b031663f223fab46040518163ffffffff1660e01b815260040160206040518083038186803b15801561149257600080fd5b505afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca91906136a0565b604051633b4da69f60e01b8152306004820152602481018390526001600160a01b039190911690633b4da69f906044015b600060405180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b5050505050565b60025460405163f084b66960e01b8152600481018490526f626f6e6441756374696f6e486f75736560801b602482015260009182916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b15801561159657600080fd5b505afa1580156115aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ce91906136a0565b60025460405163f084b66960e01b81526004810187905263189bdb9960e21b60248201529192506000916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166191906136a0565b9050600080600080856001600160a01b0316635c622a0e896040518263ffffffff1660e01b815260040161169791815260200190565b60806040518083038186803b1580156116af57600080fd5b505afa1580156116c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e79190613792565b935093509350935083156117045760009650505050505050610dc7565b60006117b68a876001600160a01b031663174e4ea6866040518263ffffffff1660e01b815260040161173891815260200190565b60206040518083038186803b15801561175057600080fd5b505afa158015611764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611788919061391f565b60008d815260046020526040902054633b9aca00906117a79089613ac8565b6117b19190613aa8565b6128ce565b604051637214956f60e01b8152600481018290529091506001600160a01b03871690637214956f9060240160206040518083038186803b1580156117f957600080fd5b505afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611831919061391f565b97506000611853846118438786613aa8565b61184e906001613a90565b613444565b9050808910611864578098506118ec565b876001600160a01b031663be4df7d66040518163ffffffff1660e01b815260040160206040518083038186803b15801561189d57600080fd5b505afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d5919061391f565b83116118ec57600098505050505050505050610dc7565b505050505050505092915050565b61190f6737b832b930ba37b960c11b33612701565b600061191b8383611530565b9050806119285750610f87565b60008360405160200161193d91815260200190565b60408051808303601f190181529082905260025463f084b66960e01b8352600483018790526f626f6e6441756374696f6e486f75736560801b60248401529092506000916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b1580156119b257600080fd5b505afa1580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea91906136a0565b6040516381a794cb60e01b81529091506001600160a01b038216906381a794cb90611a2390879087906000199030908990600401613a18565b600060405180830381600087803b158015611a3d57600080fd5b505af1158015611a51573d6000803e3d6000fd5b505050505050505050565b611a6e6430b236b4b760d91b33612701565b816a61646472657373426f6f6b60a81b14156110e75760028054610100600160a81b0319166101006001600160a01b03841602179055610f87565b611ab282610ed2565b611abc8133612701565b6106c283836127d0565b60025460405163f084b66960e01b815260048101849052643a37b5b2b760d91b602482015260009182916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b158015611b2157600080fd5b505afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5991906136a0565b90506000600260019054906101000a90046001600160a01b03166001600160a01b031663a6d5f1036040518163ffffffff1660e01b815260040160206040518083038186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be391906136a0565b600086815260036020908152604080832080548251818502810185019093528083529495509293909291830182828015611c4657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c28575b5050835193945060009250611c6091508390506001613a90565b67ffffffffffffffff811115611c8657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611caf578160200160208202803683370190505b5090506000611cbf836001613a90565b67ffffffffffffffff811115611ce557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d0e578160200160208202803683370190505b5090506000611d1e846001613a90565b67ffffffffffffffff811115611d4457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d6d578160200160208202803683370190505b5090506000600260019054906101000a90046001600160a01b03166001600160a01b0316639082d0ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc057600080fd5b505afa158015611dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df891906136a0565b905087600080808080805b8b81101561218a57876001600160a01b031663fd435cb9888f8481518110611e3b57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401611e759291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015611e8d57600080fd5b505afa158015611ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec591906136a0565b9550856001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0057600080fd5b505afa158015611f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3891906136a0565b9450856001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b158015611f7257600080fd5b505afa158015611f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faa9190613937565b8094508195505050856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015611feb57600080fd5b505afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612023919061391f565b91508c818151811061204557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316856001600160a01b031614156120c557828b828151811061208757634e487b7160e01b600052603260045260246000fd5b602002602001018181525050838a82815181106120b457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612120565b838b82815181106120e657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050828a828151811061211357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b8189828151811061214157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508c818151811061216d57634e487b7160e01b600052603260045260246000fd5b60200260200101519650808061218290613afe565b915050611e03565b5060405163fd435cb960e01b81526001600160a01b0387811660048301528e8116602483015288169063fd435cb99060440160206040518083038186803b1580156121d457600080fd5b505afa1580156121e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220c91906136a0565b9450846001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561224757600080fd5b505afa15801561225b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227f91906136a0565b9350846001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b1580156122b957600080fd5b505afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f19190613937565b8093508194505050846001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561233257600080fd5b505afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a919061391f565b90508c6001600160a01b0316846001600160a01b031614156123e557818a8c815181106123a757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505082898c815181106123d457634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612440565b828a8c8151811061240657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081898c8151811061243357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80888c8151811061246157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508e95506b033b2e3c9fd0803ce80000009450600093505050505b612492876001613a90565b8110156125ee5760008682815181106124bb57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106124e757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600086848151811061251357634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008161271061252d9190613ae7565b6125378885613ac8565b6125419190613ac8565b9050600061255183612710613ae7565b61255b9089613ac8565b61256786612710613ac8565b6125719190613a90565b9050600061257f8284613aa8565b905061258b8987613a90565b95506125978186613ae7565b909850935087612710866125ab8683613ae7565b6125b5888c613ac8565b6125bf9190613ac8565b6125c99190613aa8565b6125d39190613aa8565b975050505050505080806125e690613afe565b915050612487565b509b9a5050505050505050505050565b6126106430b236b4b760d91b33612701565b600260019054906101000a90046001600160a01b03166001600160a01b031663f223fab46040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269691906136a0565b60405163ef693bed60e01b8152306004820152602481018390526001600160a01b03919091169063ef693bed906044016114fb565b6126dd6437bbb732b960d91b33612701565b6126ef6437bbb732b960d91b82612765565b6110066437bbb732b960d91b336127d0565b61270b8282611407565b610f875760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b6064820152608401610f74565b61276f8282611407565b610f875760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6127da8282611407565b15610f875760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff168061284c5750303b155b8061285a575060005460ff16155b6128765760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff16158015612898576000805461ffff19166101011790555b6128a061345c565b6128bb653830bab9b2b960d11b6437bbb732b960d91b6134c5565b610ff4653830bab9b2b960d11b3361351a565b60025460405163f084b66960e01b815260048101859052643a37b5b2b760d91b602482015260009182916101009091046001600160a01b03169063f084b6699060440160206040518083038186803b15801561292957600080fd5b505afa15801561293d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296191906136a0565b90506000600260019054906101000a90046001600160a01b03166001600160a01b031663a6d5f1036040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b357600080fd5b505afa1580156129c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129eb91906136a0565b600087815260036020908152604080832080548251818502810185019093528083529495509293909291830182828015612a4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a30575b5050835193945060009250612a6891508390506001613a90565b67ffffffffffffffff811115612a8e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ab7578160200160208202803683370190505b5090506000612ac7836001613a90565b67ffffffffffffffff811115612aed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b16578160200160208202803683370190505b5090506000612b26846001613a90565b67ffffffffffffffff811115612b4c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b75578160200160208202803683370190505b5090506000600260019054906101000a90046001600160a01b03166001600160a01b0316639082d0ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc857600080fd5b505afa158015612bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0091906136a0565b905087600080808080805b8b811015612f9257876001600160a01b031663fd435cb9888f8481518110612c4357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401612c7d9291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015612c9557600080fd5b505afa158015612ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccd91906136a0565b9550856001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0857600080fd5b505afa158015612d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4091906136a0565b9450856001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b158015612d7a57600080fd5b505afa158015612d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db29190613937565b8094508195505050856001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015612df357600080fd5b505afa158015612e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2b919061391f565b91508c8181518110612e4d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316856001600160a01b03161415612ecd57828b8281518110612e8f57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050838a8281518110612ebc57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050612f28565b838b8281518110612eee57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050828a8281518110612f1b57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b81898281518110612f4957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508c8181518110612f7557634e487b7160e01b600052603260045260246000fd5b602002602001015196508080612f8a90613afe565b915050612c0b565b5060405163fd435cb960e01b81526001600160a01b0387811660048301528e8116602483015288169063fd435cb99060440160206040518083038186803b158015612fdc57600080fd5b505afa158015612ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301491906136a0565b9450846001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561304f57600080fd5b505afa158015613063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308791906136a0565b9350846001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b1580156130c157600080fd5b505afa1580156130d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f99190613937565b8093508194505050846001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561313a57600080fd5b505afa15801561314e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613172919061391f565b90508c6001600160a01b0316846001600160a01b031614156131ed57818a8c815181106131af57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505082898c815181106131dc57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050613248565b828a8c8151811061320e57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081898c8151811061323b57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80888c8151811061326957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508f955060009450505050505b808211156125ee57600060026132978385613a90565b6132a19190613aa8565b9050806b033b2e3c9fd0803ce800000060005b6132bf8a6001613a90565b81101561341d5760008982815181106132e857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600089838151811061331457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600089848151811061334057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008161271061335a9190613ae7565b6133648885613ac8565b61336e9190613ac8565b9050600061337e83612710613ae7565b6133889089613ac8565b61339486612710613ac8565b61339e9190613a90565b905060006133ac8284613aa8565b90506133b88987613a90565b95506133c48186613ae7565b9098509350876133d684612710613ae7565b612710876133e4888c613ac8565b6133ee9190613aa8565b6133f89190613aa8565b6134029190613ac8565b9750505050505050808061341590613afe565b9150506132b4565b508d81111561343857613431836001613a90565b935061343c565b8294505b505050613281565b600081831015613455575081610dc7565b5080610dc7565b600054610100900460ff16806134715750303b155b8061347f575060005460ff16155b61349b5760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff161580156134bd576000805461ffff19166101011790555b610ff4613524565b60006134d083610ed2565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610f878282612765565b600054610100900460ff16806135395750303b155b80613547575060005460ff16155b6135635760405162461bcd60e51b8152600401610f74906139ca565b600054610100900460ff16158015613585576000805461ffff19166101011790555b6135976437bbb732b960d91b3361351a565b6135b16430b236b4b760d91b6437bbb732b960d91b6134c5565b6135ce6737b832b930ba37b960c11b6437bbb732b960d91b6134c5565b6135e06430b236b4b760d91b3361351a565b610ff46737b832b930ba37b960c11b3361351a565b828054828255906000526020600020908101928215613648579160200282015b828111156136485781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613615565b50613654929150613658565b5090565b5b808211156136545760008155600101613659565b80518015158114610ee657600080fd5b60006020828403121561368e578081fd5b813561369981613b2f565b9392505050565b6000602082840312156136b1578081fd5b815161369981613b2f565b600080604083850312156136ce578081fd5b82356136d981613b2f565b946020939093013593505050565b6000806000806000608086880312156136fe578081fd5b853561370981613b2f565b94506020860135935060408601359250606086013567ffffffffffffffff80821115613733578283fd5b818801915088601f830112613746578283fd5b813581811115613754578384fd5b896020828501011115613765578384fd5b9699959850939650602001949392505050565b600060208284031215613789578081fd5b6136998261366d565b600080600080608085870312156137a7578384fd5b6137b08561366d565b60208601516040870151606090970151919890975090945092505050565b6000602082840312156137df578081fd5b5035919050565b600080604083850312156137f8578182fd5b82359150602083013561380a81613b2f565b809150509250929050565b6000806000806060858703121561382a578384fd5b8435935060208501359250604085013567ffffffffffffffff8082111561384f578384fd5b818701915087601f830112613862578384fd5b813581811115613870578485fd5b8860208260051b8501011115613884578485fd5b95989497505060200194505050565b6000806000606084860312156138a7578283fd5b505081359360208301359350604090920135919050565b600080604083850312156138d0578182fd5b50508035926020909101359150565b6000806000606084860312156138f3578283fd5b83356138fe81613b2f565b9250602084013561390e81613b2f565b929592945050506040919091013590565b600060208284031215613930578081fd5b5051919050565b60008060408385031215613949578182fd5b505080516020909101519092909150565b600060a0820160018060a01b03808916845260208881860152818816604086015286606086015260a0608086015282865180855260c0870191508288019450855b818110156139b957855185168352948301949183019160010161399b565b50909b9a5050505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008682526020868184015285604084015260018060a01b038516606084015260a0608084015283518060a0850152825b81811015613a655785810183015185820160c001528201613a49565b81811115613a76578360c083870101525b50601f01601f19169290920160c001979650505050505050565b60008219821115613aa357613aa3613b19565b500190565b600082613ac357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613ae257613ae2613b19565b500290565b600082821015613af957613af9613b19565b500390565b6000600019821415613b1257613b12613b19565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461100657600080fdfea2646970667358221220a5f5c44ae8dab2aa00fcf29c178e84da5e84c0ecc224dc2bdb1490a7e4e046ab64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25518,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25521,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22464,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)22459_storage)"
      },
      {
        "astId": 22854,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 15452,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "addressBook",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IAddressBook)7368"
      },
      {
        "astId": 15457,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "takerInfos",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(TakerInfo)15449_storage)"
      },
      {
        "astId": 15461,
        "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
        "label": "minProfitRate",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressBook)7368": {
        "encoding": "inplace",
        "label": "contract IAddressBook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)22459_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)22459_storage"
      },
      "t_mapping(t_bytes32,t_struct(TakerInfo)15449_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SingleCollateralAuctionTaker.TakerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TakerInfo)15449_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)22459_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 22456,
            "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 22458,
            "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TakerInfo)15449_storage": {
        "encoding": "inplace",
        "label": "struct SingleCollateralAuctionTaker.TakerInfo",
        "members": [
          {
            "astId": 15448,
            "contract": "contracts/keep/SingleCollateralAuctionTaker.sol:SingleCollateralAuctionTaker",
            "label": "swapPath",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}