{
  "address": "0x10EE6a2cA32F8575301057aA2A078C2A75f268a8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKokoaRewardManager",
          "name": "_kokoaRewardManager",
          "type": "address"
        },
        {
          "internalType": "contract IKSDRewardManager",
          "name": "_ksdRewardManager",
          "type": "address"
        },
        {
          "internalType": "contract ISKokoaToken",
          "name": "_sKokoa",
          "type": "address"
        },
        {
          "internalType": "contract ILedger",
          "name": "_ledger",
          "type": "address"
        }
      ],
      "name": "__Helpr_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addKctLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addKctLiquidityWithPausedA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addKctLiquidityWithPausedAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addKctLiquidityWithPausedB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addKlayLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addKlayLiquidityWithPaused",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBook",
      "outputs": [
        {
          "internalType": "contract IAddressBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bklay",
      "outputs": [
        {
          "internalType": "contract IBKlay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "createKctPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "createKctPoolWithPausedA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "createKctPoolWithPausedAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "createKctPoolWithPausedB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createKlayPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createKlayPoolWithPaused",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dksd",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IKlaytnFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_collateralTypes",
          "type": "bytes32[]"
        }
      ],
      "name": "getAccountCollateralInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "collateralType",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "lockedCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loan",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AccountCollateralInfo[]",
          "name": "accountCollateralInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDksdApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dksdApr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getKokoaClaimableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "claimableRewards",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getKokoaClaimableRewardsWithBonus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "claimableRewards",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_collateralTypes",
          "type": "bytes32[]"
        }
      ],
      "name": "getKsdClaimableRefunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "collateralType",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.Bytes32Uint256Pair[]",
          "name": "claimableRefunds",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getKsdClaimableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "claimableRewards",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLatestKlayUnstakeHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "completionTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.UnstakeRecord[]",
          "name": "unstakeHistory",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLatestKokoaUnstakeHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "completionTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.UnstakeRecord[]",
          "name": "unstakeHistory",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpPools",
          "type": "address[]"
        }
      ],
      "name": "getLpPoolInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lpTokenTotalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.LpPoolInfo[]",
          "name": "lpPoolInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "kokoaPrice",
          "type": "uint256"
        }
      ],
      "name": "getSKokoaKsdApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "skokoaApr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kokoaRewardManager",
      "outputs": [
        {
          "internalType": "contract IKokoaRewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdRewardManager",
      "outputs": [
        {
          "internalType": "contract IKSDRewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ledger",
      "outputs": [
        {
          "internalType": "contract ILedger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sKokoa",
      "outputs": [
        {
          "internalType": "contract ISKokoaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skokoa",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_lpPools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "kokoaPrice",
          "type": "uint256"
        }
      ],
      "name": "statusQuery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "totalSupplies",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lpTokenTotalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.LpPoolInfo[]",
          "name": "lpPoolInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "dksdApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "skokoaApr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_spenders",
          "type": "address[]"
        }
      ],
      "name": "userAllowanceQuery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "allowances",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "userBalanceQuery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "balances",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_collateralTypes",
          "type": "bytes32[]"
        }
      ],
      "name": "userDataQuery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "kokoaClaimableRewards",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "completionTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.UnstakeRecord[]",
          "name": "kokoaUnstakeHistories",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "ksdClaimableRewards",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "collateralType",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "lockedCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loan",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AccountCollateralInfo[]",
          "name": "accountCollateralInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "completionTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.UnstakeRecord[]",
          "name": "klayUnstakeHistories",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.AddressUint256Pair[]",
          "name": "kokoaClaimableRewardsWithBonus",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "collateralType",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Helper.Bytes32Uint256Pair[]",
          "name": "ksdClaimableRefunds",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawAllToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x94788741de1de86d3d6cdba54c9ee8e3441be2e2b17f75893c496ecbfa1900e5",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0x10EE6a2cA32F8575301057aA2A078C2A75f268a8",
    "transactionIndex": 21,
    "gasUsed": "5566858",
    "logsBloom": "0x
    "blockHash": "0xf2d68500ffa1d0baa55d4bf71801d724cf8d1f9811398b70191830634c26b53e",
    "transactionHash": "0x94788741de1de86d3d6cdba54c9ee8e3441be2e2b17f75893c496ecbfa1900e5",
    "logs": [],
    "blockNumber": 80581943,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "de4f5741dec2c2b2fd1b551e118f3df0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKokoaRewardManager\",\"name\":\"_kokoaRewardManager\",\"type\":\"address\"},{\"internalType\":\"contract IKSDRewardManager\",\"name\":\"_ksdRewardManager\",\"type\":\"address\"},{\"internalType\":\"contract ISKokoaToken\",\"name\":\"_sKokoa\",\"type\":\"address\"},{\"internalType\":\"contract ILedger\",\"name\":\"_ledger\",\"type\":\"address\"}],\"name\":\"__Helpr_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addKctLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addKctLiquidityWithPausedA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addKctLiquidityWithPausedAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addKctLiquidityWithPausedB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addKlayLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addKlayLiquidityWithPaused\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"contract IAddressBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bklay\",\"outputs\":[{\"internalType\":\"contract IBKlay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"createKctPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"createKctPoolWithPausedA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"createKctPoolWithPausedAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"createKctPoolWithPausedB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createKlayPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createKlayPoolWithPaused\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dksd\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IKlaytnFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_collateralTypes\",\"type\":\"bytes32[]\"}],\"name\":\"getAccountCollateralInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AccountCollateralInfo[]\",\"name\":\"accountCollateralInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDksdApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dksdApr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getKokoaClaimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"claimableRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getKokoaClaimableRewardsWithBonus\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"claimableRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_collateralTypes\",\"type\":\"bytes32[]\"}],\"name\":\"getKsdClaimableRefunds\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.Bytes32Uint256Pair[]\",\"name\":\"claimableRefunds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getKsdClaimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"claimableRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLatestKlayUnstakeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.UnstakeRecord[]\",\"name\":\"unstakeHistory\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLatestKokoaUnstakeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.UnstakeRecord[]\",\"name\":\"unstakeHistory\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpPools\",\"type\":\"address[]\"}],\"name\":\"getLpPoolInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenTotalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.LpPoolInfo[]\",\"name\":\"lpPoolInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kokoaPrice\",\"type\":\"uint256\"}],\"name\":\"getSKokoaKsdApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"skokoaApr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kokoaRewardManager\",\"outputs\":[{\"internalType\":\"contract IKokoaRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdRewardManager\",\"outputs\":[{\"internalType\":\"contract IKSDRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"contract ILedger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sKokoa\",\"outputs\":[{\"internalType\":\"contract ISKokoaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skokoa\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_lpPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"kokoaPrice\",\"type\":\"uint256\"}],\"name\":\"statusQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"totalSupplies\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenTotalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.LpPoolInfo[]\",\"name\":\"lpPoolInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"dksdApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skokoaApr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_spenders\",\"type\":\"address[]\"}],\"name\":\"userAllowanceQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"allowances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"userBalanceQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_collateralTypes\",\"type\":\"bytes32[]\"}],\"name\":\"userDataQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"kokoaClaimableRewards\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.UnstakeRecord[]\",\"name\":\"kokoaUnstakeHistories\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"ksdClaimableRewards\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AccountCollateralInfo[]\",\"name\":\"accountCollateralInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.UnstakeRecord[]\",\"name\":\"klayUnstakeHistories\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.AddressUint256Pair[]\",\"name\":\"kokoaClaimableRewardsWithBonus\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Helper.Bytes32Uint256Pair[]\",\"name\":\"ksdClaimableRefunds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Helper.sol\":\"Helper\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IAddressBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressBook {\\n    struct CollateralContracts {\\n        address token;\\n        address bond;\\n        address bondAuctionHouse;\\n        address bondFeed;\\n        address bondIssuedKsdPool;\\n        address bondSchedule;\\n        address gateway;\\n        address yieldFactory;\\n    }\\n\\n    function config(bytes32 what, address data) external;\\n\\n    function config(\\n        bytes32 collateralType,\\n        bytes32 what,\\n        address data\\n    ) external;\\n\\n    function configurator() external view returns (address);\\n\\n    function ledger() external view returns (address);\\n\\n    function ksd() external view returns (address);\\n\\n    function ksdGateway() external view returns (address);\\n\\n    function yieldManager() external view returns (address);\\n\\n    function kokoaRewardManager() external view returns (address);\\n\\n    function ksdRewardManager() external view returns (address);\\n\\n    function ksdRefundManager() external view returns (address);\\n\\n    function collateralContracts(bytes32 collateralType)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            address\\n        );\\n\\n    function getCollateralContract(bytes32 collateralType, bytes32 what) external view returns (address);\\n\\n    function ksp() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1607e62b9f40917da7653b0c0317b1fdf12186031077998991f8decc938f6d9a\",\"license\":\"MIT\"},\"contracts/interface/IBKlay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./kip/IKIP7Extended.sol\\\";\\n\\n/// @title Bonded Klay Contract\\n/// @notice Mint/Burn logic of Bklay via klay\\ninterface IBKlay is IKIP7Extended {\\n    event UnstakeKlay(address from, address to, uint256 amount);\\n    event WithdrawToken(address from, address to, uint256 amount);\\n    event WithdrawKlay(address from, address to, uint256 amount);\\n    event ClaimKlay(address usr, uint256 amount);\\n\\n    function claimCount(address user) external view returns (uint256);\\n\\n    function unstakeRecordCount(address user) external view returns (uint256);\\n\\n    function unstakeRecord(address user, uint256 index)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function stakeKlay(address to) external payable;\\n\\n    function stakeAKlay(address to, uint256 amount) external;\\n\\n    function unstakeKlay(address to, uint256 amount) external;\\n\\n    function withdrawToken(address to, uint256 amount) external;\\n\\n    function withdrawKlay(address to, uint256 amount) external;\\n\\n    /// @notice Unstaking status for all yields.\\n    function pendingKlay(address usr) external view returns (uint256 completed, uint256 yet);\\n\\n    /// @notice Claim on every yield, send claimed klay to user.\\n    function claimKlay(address usr) external;\\n}\\n\",\"keccak256\":\"0x7dfee04969033816255389bd4edaaf00cc084eb6f446ae91fdce62d1ed87e6a2\",\"license\":\"MIT\"},\"contracts/interface/IDKSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/kip/KIP7Detailed.sol\\\";\\n\\npragma solidity 0.8.3;\\n\\n/// @title A delegated stable coin.\\n/// @notice Users can deposit ksd and in return receive dksd,\\n/// and also dksd holder can exchange dksd to ksd in a ratio of 1 to 1.\\n/// The purpose of this contract is distributing profit of yield farming to dksd holder.\\n/// The profit of yield framing is swapped into KSD, and the KSD distributed to dKSD holder.\\n/// Therefore, the balance of dKSD holder increases with the passing of time.\\n/// For example, if you deposit 100KSD at first, you receive 100dKSD.\\n/// With the passing of time, the balance of your DKSD becomes 101dKSD.\\n/// And then, you can withdraw 101KSD.\\ninterface IDKSD is IKIP7Detailed {\\n    /// @notice value of liquidityIndex\\n    function liquidityIndex() external view returns (uint256);\\n\\n    /// @notice precision of scaled values\\n    function precision() external pure returns (uint256);\\n\\n    /// @notice deposit ksd\\n    /// @param to address of receiving dksd\\n    /// @param amount amount of depositing ksd\\n    function deposit(address to, uint256 amount) external;\\n\\n    /// @notice withdraw ksd\\n    /// @param to address of receiving ksd\\n    /// @param amount amount of withdrawing dksd\\n    function withdraw(address to, uint256 amount) external;\\n\\n    /// @notice receive ksd and distribute the ksd to dksd holder\\n    /// @param ksdAmount amount of receiving ksd\\n    function earn(uint256 ksdAmount) external;\\n\\n    /// @notice calculate amount of corresponding to rawAmount\\n    /// @param rawAmount rawAmount\\n    /// @return amount of corresponding to rawAmount\\n    function fromRawAmount(uint256 rawAmount) external view returns (uint256);\\n\\n    /// @notice calculate rawAmount of corresponding to amount\\n    /// @param amount amount\\n    function toRawAmount(uint256 amount) external view returns (uint256);\\n\\n    /// @notice get raw balance of user\\n    /// @param usr address of user\\n    function rawBalanceOf(address usr) external view returns (uint256);\\n\\n    /// @notice get raw total balance\\n    function rawTotalSupply() external view returns (uint256);\\n\\n    event Deposit(address indexed user, address to, uint256 amount, uint256 liquidityIndex);\\n    event Withdraw(address indexed user, address to, uint256 amount, uint256 liquidityIndex);\\n    event Earn(uint256 now, uint256 ksdAmount, uint256 liquidityIndex);\\n}\\n\",\"keccak256\":\"0x10b1a2c17e756ccf1fc1b13a431d175e3b570d1db9b4bb12059131ea843fce58\",\"license\":\"MIT\"},\"contracts/interface/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title distribute ksd\\ninterface IDistributor {\\n    /// @notice distribute ksd profit\\n    /// @param amount amount of profit\\n    function distribute(uint256 amount) external;\\n\\n    event Distribute(uint256 now, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2758bce16dcd91f7f850cf38217460e7327d7b246fcd912b9f38b00a06949d83\",\"license\":\"MIT\"},\"contracts/interface/IKSDRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IRewardPool.sol\\\";\\nimport \\\"./IDistributor.sol\\\";\\n\\n/// @title A manager about ksd rewards.\\n/// @dev It manages all ksd rewards. It's base code is sushiswap.\\n/// Therefore, the way to distribute reward is very similar to sushiswap.\\n/// The main difference between sushiswap and KSDRewardManager is staking.\\n/// Sushiswap forces to stake token. But, KSDRewardManager does not own token.\\n/// It just expect registered pool to call onDeposit/onWithdraw/onChanged.\\n/// \\ub610\\ud55c, \\uae30\\uc874 sushiswap \\uc5d0\\uc11c\\ub294 \\ube14\\ub85d\\ub2f9 minting\\uc774 \\ub418\\uc5b4 \\ub9ac\\uc6cc\\ub4dc\\ub97c \\uc0dd\\uc0b0\\ud588\\uc9c0\\ub9cc,\\n/// \\uc774 \\ubcc0\\ud615\\ub41c \\ucf54\\ub4dc\\uc5d0\\uc11c\\ub294 yield\\uc5d0\\uc11c \\uc0dd\\uc0b0\\ub41c \\uc774\\uc775\\uc744 \\uc774 \\ucee8\\ud2b8\\ub809\\ud2b8\\uc758 distribute \\ud568\\uc218\\ub97c \\ud1b5\\ud574\\uc11c \\ub123\\uc5b4\\uc900 \\uac83\\ub9cc \\ubd84\\ubc30\\ud55c\\ub2e4.\\ninterface IKSDRewardManager is IDistributor {\\n    struct PoolInfo {\\n        uint256 accRewardPerShare;\\n        uint256 ksdReward;\\n        uint256 allocPoint;\\n        bool init;\\n    }\\n\\n    struct UserInfo {\\n        int256 rewardDebt;\\n        uint256 claimedReward;\\n    }\\n\\n    struct EarnHistory {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    function range() external view returns (uint256);\\n\\n    function targetDksdApr() external view returns (uint256);\\n\\n    function earnHistoriesLength() external view returns (uint256);\\n\\n    function earnHistories(uint256 index) external view returns (uint256 timestamp, uint256 amount);\\n\\n    function earnCursor() external view returns (uint256);\\n\\n    function earnSumInRange() external view returns (uint256);\\n\\n    /// @notice count of registered pools\\n    function poolLength() external view returns (uint256);\\n\\n    /// @notice user info.\\n    function userInfo(address, address) external view returns (int256, uint256);\\n\\n    /// @notice registered pool\\n    function rewardPool(uint256 index) external view returns (IRewardPool);\\n\\n    /// @notice pool info\\n    function poolInfo(address pool)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    /// @notice all registered pools\\n    function rewardPools() external view returns (address[] memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function add(uint256 allocPoint, address token) external;\\n\\n    function set(address pool, uint256 allocPoint) external;\\n\\n    function claimableReward(address pool, address user) external view returns (uint256 pending);\\n\\n    function massUpdatePools(address[] calldata pools) external;\\n\\n    function accRewardPrecision() external pure returns (uint256);\\n\\n    function updatePool(address pool) external;\\n\\n    function onDeposit(uint256 amount, address to) external;\\n\\n    function onWithdraw(uint256 amount, address to) external;\\n\\n    function onChanged(int256 amount, address to) external;\\n\\n    function claimReward(address pool, address to) external returns (bool success);\\n\\n    function claimRewardByOther(address pool, address usr) external returns (bool success);\\n\\n    function claimRewardAllByOther(address usr) external returns (bool success);\\n\\n    /// distribute \\ud568\\uc218\\ub294 IDistributor.sol\\uc5d0 \\uc788\\ub2e4.\\n\\n    event Deposit(address indexed pool, uint256 amount, address indexed to);\\n    event Withdraw(address indexed pool, uint256 amount, address indexed to);\\n    event ClaimReward(address indexed pool, address indexed user, uint256 amount);\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, address indexed lpToken);\\n    event LogSetPool(address indexed pool, uint256 allocPoint);\\n    event LogUpdatePool(address indexed pool, uint256 now, uint256 lpSupply, uint256 accRewardPerShare);\\n    event LogInit();\\n}\\n\",\"keccak256\":\"0xce783ec1e1efc6ad90166888851045a6ea9712ec502a7d62fbec675a684a3c5b\",\"license\":\"MIT\"},\"contracts/interface/IKokoaRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\n/// @title A manager about kokoa rewards.\\n/// @dev It manages all kokoa rewards. It's base code is from sushiswap.\\n/// Therefore, the way to distribute reward is very similar to sushiswap.\\n/// The main difference between sushiswap and KokoaRewardManager is staking.\\n/// Sushiswap forces to stake token, but KokoaRewardManager does not own token.\\n/// It just expect registered pool to call onDeposit/onWithdraw/onChanged, and\\n/// get balance and totalSupply of pool to calculate how to distribute reward.\\n/// \\ub610\\ud55c, \\uae30\\uc874 sushiswap \\uc5d0\\uc11c\\ub294 \\ube14\\ub85d\\ub2f9 minting\\uc774 \\ub418\\uc5b4 \\ub9ac\\uc6cc\\ub4dc\\ub97c \\uc0dd\\uc0b0\\ud588\\uc9c0\\ub9cc,\\n/// \\uc774 \\ubcc0\\ud615\\ub41c \\ucf54\\ub4dc\\uc5d0\\uc11c\\ub294 vesting \\ub85c\\uc9c1\\uc5d0 \\ub530\\ub77c\\uc11c vesting\\ub41c \\uc591\\uc744 \\ub4f1\\ub85d\\ub41c \\ud480\\uc5d0\\uac8c \\ubd84\\ubc30\\ud55c\\ub2e4.\\ninterface IKokoaRewardManager {\\n    struct PoolInfo {\\n        uint256 accRewardPerShare;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        bool init;\\n        uint256 fee;\\n    }\\n\\n    struct UserInfo {\\n        int256 rewardDebt;\\n        uint256 claimedReward; // it is used in referral contract.\\n    }\\n\\n    /// @notice count of registered pools\\n    function poolLength() external view returns (uint256);\\n\\n    /// @notice user info.\\n    function userInfo(address, address) external view returns (int256, uint256);\\n\\n    /// @notice registered pool\\n    function rewardPool(uint256 index) external view returns (IRewardPool);\\n\\n    /// @notice all registered pools\\n    function rewardPools() external view returns (address[] memory);\\n\\n    /// @notice pool info\\n    function poolInfo(address pool)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n\\n    /// @notice total allocation point\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    /// @notice add pool to kokoaRewardManager\\n    /// @param allocPoint (allocPoint / totalAllocPoint) == kokoaRewardManager\\ub97c \\ud1b5\\ud574\\uc11c \\ub9c8\\uc774\\ub2dd\\ub41c \\ucd1d kokoa \\uc591 \\uc911\\uc5d0 \\uc774 \\ud480\\uc5d0 \\ubd84\\ubc30\\ub420 \\ube44\\uc728\\n    /// @param pool address of pool to register\\n    /// @dev \\uc774 \\ud568\\uc218\\ub294 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function add(\\n        uint256 allocPoint,\\n        address pool,\\n        uint256 fee\\n    ) external;\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c \\ud480\\uc774 \\ubc1b\\ub294 kokoa reward\\uc758 \\ube44\\uc728\\uc744 \\uc870\\uc808\\ud55c\\ub2e4.\\n    /// @param pool address of pool to register\\n    /// @param allocPoint (allocPoint / totalAllocPoint) == kokoaRewardManager\\ub97c \\ud1b5\\ud574\\uc11c \\ub9c8\\uc774\\ub2dd\\ub41c \\ucd1d kokoa \\uc591 \\uc911\\uc5d0 \\uc774 \\ud480\\uc5d0 \\ubd84\\ubc30\\ub420 \\ube44\\uc728\\n    /// @dev \\uc774 \\ud568\\uc218\\ub294 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function set(\\n        address pool,\\n        uint256 allocPoint,\\n        uint256 fee\\n    ) external;\\n\\n    /// @notice amount of kokoa reward to distribute, but not claimed yet\\n    /// @param pool address of pool\\n    /// @param usr address of user who is distributed kokoa reward\\n    function claimableReward(\\n        address pool,\\n        address usr,\\n        bool bonus\\n    ) external view returns (uint256 pending);\\n\\n    /// @notice \\uc720\\uc800\\uc5d0\\uac8c \\ubd84\\ubc30\\ub420 reward \\uc591\\uc744 \\uc5c5\\ub370\\uc774\\ud2b8 \\uc2dc\\ud0a8\\ub2e4.\\n    /// @param pool address of pool to update\\n    /// @dev \\ub0b4\\ubd80\\uc801\\uc73c\\ub85c _updatePool\\uc774 \\ubd88\\ub9ac\\ub294\\ub370, \\uc774 \\ud568\\uc218\\ub294 \\uc720\\uc800\\uac00 \\ud480\\uc5d0 staking \\uc591\\uc774 \\ubcc0\\ud654\\ud558\\uac70\\ub098, reward\\ub97c claim\\ud558\\uae30 \\uc804\\uc5d0 \\ud56d\\uc0c1 \\ubd88\\ub9b0\\ub2e4\\n    /// \\ub530\\ub77c\\uc11c \\uc774 \\ud568\\uc218\\ub97c \\ubc16\\uc5d0\\uc11c \\uba85\\uc2dc\\uc801\\uc73c\\ub85c \\ubd88\\ub9b4 \\uc77c\\uc740 \\uac70\\uc758 \\uc5c6\\uc744 \\uac83\\uc774\\ub2e4. \\uc77c\\ub2e8 sushiswap \\uc5d0\\uc11c \\uad6c\\ud604\\ud588\\uae30 \\ub54c\\ubb38\\uc5d0 \\uac00\\uc838\\uc654\\ub2e4.\\n    function updatePool(address pool) external;\\n\\n    /// @notice \\uc5ec\\ub7ec \\ud480\\ub4e4\\uc5d0 \\ub300\\ud574\\uc11c updatePool\\uc744 \\uc2dc\\ucf1c\\uc900\\ub2e4.\\n    /// @param pools address list of pools to update\\n    function massUpdatePools(address[] calldata pools) external;\\n\\n    /// @notice reward \\ubd84\\ubc30\\uc591\\uc744 \\uacc4\\uc0b0\\ud560 \\ub54c \\ub098\\ub217\\uc148\\uc744 \\ud558\\ub294\\ub370, \\uc774\\ub54c \\uc5bc\\ub9c8\\ub9cc\\ud07c\\uc758 \\uc720\\ud6a8\\uc22b\\uc790\\ub85c \\ub098\\ub217\\uc148\\uc744 \\ud560 \\uac83\\uc778\\uc9c0 \\uacb0\\uc815\\ud55c\\ub2e4.\\n    function accRewardPrecision() external pure returns (uint256);\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c pool\\uc5d0\\uc11c \\uc720\\uc800\\uac00 staking\\ud55c \\uc591\\uc774 \\ub298\\uc5c8\\uc744 \\ub54c, \\uc720\\uc800\\uc5d0\\uac8c \\ubd84\\ubc30\\ud560 reward \\uc591\\uc744 \\uacc4\\uc0b0\\ud558\\uae30 \\uc704\\ud574\\uc11c \\ubd88\\ub9b0\\ub2e4.\\n    /// @param amount amount of increasing user's balance\\n    /// @param to address of user\\n    /// @dev \\ubb34\\uc870\\uac74 \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4. \\uc989 msg.sender == pool\\n    function onDeposit(uint256 amount, address to) external;\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c pool\\uc5d0\\uc11c \\uc720\\uc800\\uac00 staking\\ud55c \\uc591\\uc774 \\uc904\\uc5c8\\uc744 \\ub54c, \\uc720\\uc800\\uc5d0\\uac8c \\ubd84\\ubc30\\ud560 reward \\uc591\\uc744 \\uacc4\\uc0b0\\ud558\\uae30 \\uc704\\ud574\\uc11c \\ubd88\\ub9b0\\ub2e4.\\n    /// @param amount amount of increasing user's balance\\n    /// @param to address of user\\n    /// @dev \\ubb34\\uc870\\uac74 \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4. \\uc989 msg.sender == pool\\n    function onWithdraw(uint256 amount, address to) external;\\n\\n    /// @notice onDeposit\\uacfc onWithdraw\\uc758 wrapper\\n    /// @param amount amount of increasing user's balance\\n    /// @param to address of user\\n    /// @dev \\ubb34\\uc870\\uac74 \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4. \\uc989 msg.sender == pool\\n    function onChanged(int256 amount, address to) external;\\n\\n    /// @notice \\uc720\\uc800\\uac00 \\ubd84\\ubc30\\ubc1b\\uc740 kokoa reward\\ub97c claim \\ud558\\ub294 function\\n    /// @param pool address of pool\\n    /// @param to receiver address of kokoa reward\\n    function claimReward(address pool, address to) external returns (bool success);\\n\\n    function claimRewardAll() external returns (bool success);\\n\\n    function claimRewardByOther(address pool, address usr) external returns (bool success);\\n\\n    function claimRewardAllByOther(address usr) external returns (bool success);\\n\\n    function claimRewardAndStake(address pool) external returns (bool success);\\n\\n    function claimRewardAndStakeByOther(address pool, address usr) external returns (bool success);\\n\\n    function claimRewardAndStakeAll() external returns (bool success);\\n\\n    // --- Event ---\\n\\n    event Deposit(address indexed pool, uint256 amount, address indexed to);\\n    event Withdraw(address indexed pool, uint256 amount, address indexed to);\\n    event ClaimReward(address indexed pool, address indexed user, uint256 amount);\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, address indexed lpToken, uint256 fee);\\n    event LogSetPool(address indexed pool, uint256 allocPoint, uint256 fee);\\n    event LogUpdatePool(address indexed pool, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accRewardPerShare);\\n    event LogInit();\\n}\\n\",\"keccak256\":\"0xf5fd39c90207f92e54dfface789fc8b9949c7fe270da35c57c503163db521e65\",\"license\":\"MIT\"},\"contracts/interface/IKsdRefundManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKsdRefundManager {\\n    event Refund(bytes32 collateralType, uint256 timestamp, uint256 refundAmount, uint256 totalLoan, uint256 accRewardPerShare);\\n    event Deposit(bytes32 collateralType, uint256 amount, address to);\\n    event Withdraw(bytes32 collateralType, uint256 amount, address to);\\n    event Claim(bytes32 collateralType, address from, uint256 amount);\\n\\n    struct PoolInfo {\\n        uint256 accAmountPerShare;\\n    }\\n\\n    struct UserInfo {\\n        int256 debt;\\n        uint256 claimedAmount;\\n    }\\n\\n    function refund(bytes32 collateralType, uint256 refundAmount) external;\\n\\n    function onDeposit(\\n        bytes32 collateralType,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function onWithdraw(\\n        bytes32 collateralType,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function onChanged(\\n        bytes32 collateralType,\\n        int256 amount,\\n        address to\\n    ) external;\\n\\n    function claimableAmount(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    function claim(bytes32 collateralType, address to) external;\\n\\n    function claimByOther(bytes32 collateralType, address usr) external;\\n}\\n\",\"keccak256\":\"0x72b832532c312b535bbb664c8a4262a590f2bdb56627f51efdba2d068457262b\",\"license\":\"MIT\"},\"contracts/interface/ILedger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ILedger {\\n    // --- Events ---\\n    event CollateralChanged(bytes32 collateralType, address usr, int256 amount);\\n    event KSDChanged(address usr, int256 amount);\\n    event LoanChanged(bytes32 collateralType, address debtor, address collateralVault, address ksdVault, int256 collateralAmount, int256 loanAmount);\\n    event AccountChanged(bytes32 collateralType, address vault, uint256 lockedCollateral, uint256 loan);\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\uc900\\ub2e4.\\n    /// @notice authorize usr to manipulate msg.sender's vault\\n    function allow(address usr) external;\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\ubec7\\ub294.\\n    /// @notice Deauthorize usr from manipulating msg.sender's vault\\n    function disallow(address usr) external;\\n\\n    // --- Data view ---\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785.\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. totalLockedCollateral (\\uc804\\uccb4 locked\\ub41c \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. totalLoan (\\ubc1c\\ud589\\ub41c(\\ube4c\\ub9b0) KSD\\uc591)\\n    /// 3. rate (\\uc2dc\\uac04\\uc5d0 \\ub530\\ub77c \\uc810\\ucc28 \\uc99d\\uac00\\ud558\\uace0, accountInfo.loan \\uc5d0 \\uacf1\\ud574\\uc838\\uc11c \\uc0ac\\uc6a9\\uc790\\uac00 \\ube4c\\ub9b0 ksd\\uc758 \\uc591\\uc744 \\ub298\\ub9ac\\ub294 \\uc6a9\\ub3c4\\ub85c \\uc0ac\\uc6a9\\ub428. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (\\ub2f4\\ubcf4 \\ud0c0\\uc785\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd1d KSD)\\n    /// 6. dust (\\ud558\\ub098\\uc758 vault\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd5c\\uc800\\uc758 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Collateral Iinfo\\n    /// @param collateralType Type of collateral - initially, there's only one (Klay)\\n    /// @dev the value that it returns are\\n    /// 1. totalLockedCollateral\\n    /// 2. totalLoan\\n    /// 3. rate (It gradually increases over time and is multiplied by accountInfo.loan to increase the amount of ksd borrowed by the user.. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (Maximum KSD that can be minted from given collateral type)\\n    /// 6. dust (Minimum KSD that should be borrowed from a CDP)\\n    function collateralInfo(bytes32 collateralType)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\ub4e4 \\uc870\\ud68c\\n    /// @param collateralTypes \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785 list\\n    /// @dev collateralInfo \\uc758 \\uac12\\ub4e4\\uc744 array \\ub85c return\\n    function collateralInfos(bytes32[] calldata collateralTypes)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    /// @notice usr\\uc758 vault \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4 \\uc885\\ub958\\n    /// @param usr \\uc720\\uc800\\uc758 address\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. lockedCollateral (vault\\uc5d0 \\uc7a0\\uae34 \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. loan (vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Information of a user's vault\\n    /// @param collateralType type of collateral\\n    /// @param usr Address of the user\\n    /// @dev returns\\n    /// 1. lockedCollateral (amount of collateral locked in the user's vault)\\n    /// 2. loan (normalized amount of KSD minted from that vault)\\n    function accountInfo(bytes32 collateralType, address usr) external view returns (uint256, uint256);\\n\\n    /// @notice This function returns the index of a user of given collateral type\\n    ///         The index\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @dev \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785\\ub9c8\\ub2e4 cdp \\uc5f0 \\uc720\\uc800\\ub97c tracking \\ud558\\uae30 \\uc704\\ud55c \\uac83\\uc73c\\ub85c, \\uac01 \\uc720\\uc800\\uac00 \\uba87 \\ubc88\\uc9f8\\ub85c cdp\\ub97c \\uc5f4\\uc5c8\\ub294\\uc9c0\\ub97c \\uae30\\ub85d.\\n    /// @dev This function is designed to track the list of users who have opened a CDP (for each collateral type)\\n    ///       Since CDPs are never deleted once created, this index should not be update at any circumstances\\n    function accountIndex(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice access address of an account by index\\n    /// @param collateralType type of collateral\\n    /// @param index index of user\\n    /// @dev index \\ubc88\\uc9f8\\ub85c \\ub4e4\\uc5b4\\uc628 \\uc720\\uc800\\uc758 \\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\n    /// @dev returns the address of {index}-th CDP opener\\n    function accountByIndex(bytes32 collateralType, uint256 index) external view returns (address);\\n\\n    /// @notice Total number of user who have opened a CDP (given collateral type) - always increasing\\n    /// @param collateralType type of collateral\\n    /// @dev \\uc9c0\\uae08\\uae4c\\uc9c0 cdp\\ub97c \\uc5f0 \\uc720\\uc800\\uc758 \\uc218\\n    function accountLength(bytes32 collateralType) external view returns (uint256);\\n\\n    /// @notice locked \\ub418\\uc9c0 \\uc54a\\uc740 \\ub2f4\\ubcf4\\ubb3c\\uc758 \\uc591. \\ub2e8, \\uc2e4\\uc81c \\ub2f4\\ubcf4\\ubb3c\\uc740 gateway \\ucee8\\ud2b8\\ub809\\ud2b8\\uac00 \\uad00\\ub9ac\\ud558\\uace0 \\uc788\\uc74c.\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @notice The amount of collateral that are not locked.\\n    function token(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice \\ube4c\\ub9ac\\uac70\\ub098, ksdGateway\\ub97c \\ud1b5\\ud574\\uc11c \\ub4e4\\uc5b4\\uc628 ksd\\uc758 \\uc591.\\n    /// @param usr address of user\\n    /// @notice The amount of KSD lent to, or depositted by (through KSDGateway) the {usr}\\n    function ksd(address usr) external view returns (uint256);\\n\\n    /// @notice total KSD Issued [rad]\\n    function totalIssued() external view returns (uint256);\\n\\n    /// @notice Total Unbacked KSD [rad]\\n    function vice() external view returns (uint256);\\n\\n    /// @notice Total Debt Ceiling [rad]\\n    function line() external view returns (uint256);\\n\\n    /// @notice unbacked KSD [rad]\\n    function sin(address usr) external view returns (uint256);\\n\\n    /// @notice initialize collateral\\n    /// @param collateralType type of collateral to initialize.\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance\\n    function init(bytes32 collateralType) external;\\n\\n    /// @notice config something\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc640 \\uc624\\ub77c\\ud074 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance and oracle\\n    function config(\\n        bytes32 collateralType,\\n        bytes32 what,\\n        uint256 data\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0a8\\ub2e4.\\n    ///          \\uc7a5\\ubd80\\uc758 \\uae30\\ub85d\\ub41c token\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\uae30\\ud0a4 \\ub54c\\ubb38\\uc5d0 \\ubb34\\uc870\\uac74 \\ud5c8\\uac00\\ub41c contract\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    /// (eng)\\n    /// @notice Increase the amount of 'unlocked collateral'\\n    ///          (which means that the token is deposited into CDP but not yet considered as 'locked' as collateral)\\n    ///         This function changes the amount of 'unlocked collateral' of the CDP, so it should only be called by authorized contracts.\\n    function addCollateral(\\n        bytes32 collateralType,\\n        address usr,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc744 \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function.\\n    function sendCollateral(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        uint256 amoount\\n    ) external;\\n\\n    /// @notice ksd\\ub97c \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function. (\\uc2e4\\uc81c ksd token\\uc744 \\ubcf4\\ub0b4\\ub294 \\uac83\\uc774 \\uc544\\ub2c8\\ub77c, \\uc7a5\\ubd80 \\uc0c1\\uc758 \\uae30\\ub85d\\ub9cc \\ubc14\\ub01c)\\n    function sendKsd(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice token, ksd \\uc591\\uc744 \\ud1b5\\ud574\\uc11c vault\\uc758 \\uac12\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0b4.\\n    /// @param collateralType type of collateral\\n    /// @param debtor owner of vault\\n    /// @param collateralVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 token\\uc758 owner) \\ub2f4\\ubcf4\\ubb3c\\uc744 \\uac00\\uc838\\uc624\\uac70\\ub098 vault\\uc5d0\\uc11c unlock \\uc2dc\\ud0a8 \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub123\\uc744 \\uc8fc\\uc18c\\n    /// @param ksdVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 ksd\\uc758 owner) ksd\\ub97c vault\\uc5d0 \\ub123\\uc5b4\\uc8fc\\uac70\\ub098, vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd\\ub97c \\ub123\\uc5b4\\uc904 \\uacf3\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev vault\\uc5d0 ksd\\ub97c \\uac1a\\uac70\\ub098/\\ube4c\\ub9ac\\uac70\\ub098, \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub354 lock \\uc2dc\\ud0a4\\uac70\\ub098/\\ube7c\\uac70\\ub098\\n    /// \\ub2e8, vault\\ub294 \\ud56d\\uc0c1 safe \\ud574\\uc57c\\ud558\\uace0, dust \\uc774\\uc0c1\\uc758 ksd\\ub97c \\uc720\\uc9c0\\ud574\\uc57c \\ud55c\\ub2e4.\\n    /// \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4. \\uc608\\ub97c\\ub4e4\\uc5b4, \\ud5c8\\ub77d\\ubc1b\\uc9c0 \\uc54a\\uc740 \\uc0ac\\ub78c\\uc774 locked\\ub418\\uc9c0 \\uc54a\\uc740 \\ub0a8\\uc758 collateral\\ub97c \\uc790\\uc2e0\\uc758 vault\\ub85c lock \\uc2dc\\ud0a4\\uc9c0 \\ubabb\\ud574\\uc57c \\ud55c\\ub2e4.\\n    function actionLoan(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice vault\\uc5d0 \\uc7a0\\uae34 collateral\\uc591\\uc774\\ub098 ksd \\ubd80\\ucc44\\ub97c \\uc774\\ub3d9\\uc2dc\\ud0a8\\ub2e4.\\n    /// @param collateralType type of collateral\\n    /// @param src address of vault (accountInfo)\\n    /// @param dst address of vault (accountInfo)\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4.\\n    function fork(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\ubab0\\uc218 (confiscation)\\n    /// @param collateralType type of collateral\\n    /// @param debtor \\uccad\\uc0b0\\ub420 vault \\uc8fc\\uc18c\\n    /// @param collateralVault vault\\uc5d0\\uc11c locked\\ub41c \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ubab0\\uc218\\ud574\\uac08 \\uc8fc\\uccb4. (\\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 \\ud56d\\uc0c1 auctionHouse. auction\\uc5d0\\uc11c \\ud314\\uc544\\uc57c \\ud558\\uae30 \\ub54c\\ubb38)\\n    /// @param ksdVault vault\\uc5d0\\uc11c \\ube4c\\ub824\\uac04 ksd\\ub294 \\ub2f4\\ubcf4\\ubb3c\\uc774 auction\\uc5d0 \\ub4e4\\uc5b4\\uac04 \\uc21c\\uac04 backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\uc774\\uae30 \\ub54c\\ubb38\\uc5d0, \\uc774\\uac83\\uc744 \\ub9e1\\uc544\\uc904 \\uc8fc\\uccb4\\uac00 \\ud544\\uc694. \\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 minusBank\\uac00 \\ub9e1\\uc544\\uc900\\ub2e4.\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev liquidator\\uc758 liquidate\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub9bc\\n    function grab(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\uc0c1\\uc1c4\\ud558\\ub294 function. msg.sender\\uc758 ksd\\ub97c \\uc18c\\ubaa8\\ud55c\\ub2e4.\\n    function heal(uint256 amount) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\ub9cc\\ub4e4\\uc5b4\\uc11c msg.sender\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev minusBank\\uc5d0\\uc11c keeper\\ub4e4\\uc5d0\\uac8c incentive\\ub97c \\uc8fc\\uae30 \\uc704\\ud574\\uc11c, \\ubbf8\\ub9ac ksd\\ub97c \\ub300\\ucd9c\\ubc1b\\ub294 \\uc5ed\\ud560\\ub85c \\uc4f0\\uc778\\ub2e4.\\n    /// \\ub530\\ub77c\\uc11c, \\uc624\\uc9c1 minusBank\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function suck(\\n        address u,\\n        address v,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice stability fee\\ub97c ksdReceiver\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev StabilityFeeCollector\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function collectStabilityFee(\\n        bytes32 collateralType,\\n        address ksdReceiver,\\n        int256 rateDiff\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd665010e6fac1b9f0423339abad116c599c5ef2960fac177b2108fa68fd15b71\",\"license\":\"MIT\"},\"contracts/interface/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IRewardPool {\\n    function balanceOf(address usr) external view returns (uint256 balance);\\n\\n    function totalSupply() external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xeee82cf1d159c402ad5a1994821948516e692dcb5c20ae6235e5686ffea8b47d\",\"license\":\"MIT\"},\"contracts/interface/ISKokoaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./kip/IKIP7Extended.sol\\\";\\n\\ninterface ISKokoaToken {\\n    event Stake(address from, address to, uint256 amount);\\n\\n    event Unstake(address from, address to, uint256 amount);\\n\\n    event Claim(address usr, uint256 amount);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint96 previousBalance, uint96 newBalance);\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address delegatee);\\n\\n    function checkpoints(address account, uint32 index) external view returns (Checkpoint memory);\\n\\n    function numCheckpoints(address account) external view returns (uint32 index);\\n\\n    function nonces(address account) external view returns (uint256 nonce);\\n\\n    function unstakeCount(address user) external view returns (uint256);\\n\\n    function claimCount(address user) external view returns (uint256);\\n\\n    function unstakeRecord(address user, uint256 index) external view returns (uint256 block, uint256 amount);\\n\\n    function lockUpPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return votes The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return votes The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96 votes);\\n}\\n\",\"keccak256\":\"0x4ff2b40ccf0bc59ca66c1ccdf134b7f8f77955f80eb88d7c0fa7d0d1343af489\",\"license\":\"MIT\"},\"contracts/interface/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IRewardPool.sol\\\";\\nimport \\\"./kip/IKIP7.sol\\\";\\n\\n/// @title A token staking pool.\\n/// @dev KokoaRewardManager gives reward user who stakes token to this pool.\\ninterface IStakingPool is IRewardPool {\\n    event Stake(address indexed from, address indexed to, uint256 amount);\\n    event Unstake(address indexed from, address indexed to, uint256 amount);\\n\\n    function token() external view returns (IKIP7);\\n\\n    /// @notice stake token\\n    function stake(address to, uint256 amount) external;\\n\\n    /// @notice unstake token\\n    function unstake(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xad13533bf43060acf2c6341c1a4ea798ebd008aa6a40dbe1b729edd683eb9ee0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\n\\ninterface IKIP7Detailed is IKIP7 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb19fcc63818f59c23defe41b45aa9235cd43a373d97fe222fc939ad3f0f697c9\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\nimport \\\"./IKIP7Detailed.sol\\\";\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7Extended is IKIP7Detailed {\\n    function mint(address usr, uint256 amount) external returns (bool);\\n\\n    function burn(address usr, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x68ea4321698aef5d82970660626d6e07ea4908b0b94bee9d6ceb2f8776c6c06b\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP7Receiver {\\n    function onKIP7Received(\\n        address _operator,\\n        address _from,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x28382ebf22d533d01fb1385a4a598f98769ed91e657208711ba5797a1509d261\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnExchangeImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../kip/IKIP7Detailed.sol\\\";\\n\\ninterface IKlaytnExchange is IKIP7Detailed {\\n    function fee() external view returns (uint256);\\n\\n    function getCurrentPool() external view returns (uint256, uint256);\\n\\n    function addKctLiquidity(uint256 amountA, uint256 amountB) external;\\n\\n    function estimatePos(address token, uint256 amount) external view returns (uint256);\\n\\n    function estimateNeg(address token, uint256 amount) external view returns (uint256);\\n\\n    function addKlayLiquidity(uint256 amount) external payable;\\n\\n    function tokenA() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function removeLiquidity(uint256 amount) external;\\n\\n    function claimReward() external;\\n\\n    function updateMiningIndex() external;\\n\\n    function changeMiningRate(uint256 _mining) external;\\n}\\n\",\"keccak256\":\"0xf73ef854715fe5c95229cb544fb23bb98483976769eace23a24a9b841c4cbe44\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnFactoryImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlaytnFactory {\\n    function tokenToPool(address tokenA, address tokenB) external view returns (address);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function getPoolCount() external view returns (uint256);\\n\\n    function createKctPool(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        uint256 fee\\n    ) external;\\n\\n    function createKlayPool(\\n        address token,\\n        uint256 amount,\\n        uint256 fee\\n    ) external payable;\\n\\n    function getPoolAddress(uint256 idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1dff8b30ec20ec0060f34b4255e919823c1725a0190fc9e413dc0afa72f2b8f0\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, \\\"WadRayMath::wadMul: overflow\\\");\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::wadDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, \\\"WadRayMath::wadDiv: overflow\\\");\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    function rayCeilMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - RAY + 1) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + RAY - 1) / RAY;\\n    }\\n\\n    function rayCeilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n\\n        require(a <= (type(uint256).max - b + 1) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + b - 1) / b;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    // copy from maker dao\\n    // https://github.com/makerdao/dss/blob/6c1c780d3c8ab6e27ea63d272e0d1176b05b9871/src/jug.sol#L62\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 b\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(b, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, b)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, \\\"WadRayMath::rayToWad: overflow\\\");\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, \\\"WadRayMath::wadToRay: overflow\\\");\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xbfda078b46cc0f7958d40bf2a4d9b8c10f3405680093aa3004c2e76e515651c4\",\"license\":\"MIT\"},\"contracts/library/kip/KIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../../interface/kip/IKIP13.sol\\\";\\nimport \\\"../openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract KIP13 is Initializable, IKIP13 {\\n    bytes4 private constant _INTERFACE_ID_KIP13 = 0x01ffc9a7;\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __KIP13_init() internal initializer {\\n        _registerInterface(_INTERFACE_ID_KIP13);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"KIP13::_registerInterface: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb258571d866799d24f0334192c74b12c90462a1838e7478d5ae9855fef40b8cf\",\"license\":\"MIT\"},\"contracts/library/kip/KIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../openzeppelin/proxy/Initializable.sol\\\";\\nimport \\\"../../interface/kip/IKIP7.sol\\\";\\nimport \\\"../../interface/kip/IKIP7Receiver.sol\\\";\\nimport \\\"./KIP13.sol\\\";\\n\\ncontract KIP7 is KIP13, IKIP7 {\\n    using Address for address;\\n\\n    bytes4 private constant _KIP7_RECEIVED = 0x9d188c22;\\n\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    bytes4 private constant _INTERFACE_ID_KIP7 = 0x65787371;\\n\\n    function __KIP7_init() internal initializer {\\n        __KIP13_init();\\n        __KIP7_init_unchained();\\n    }\\n\\n    function __KIP7_init_unchained() private initializer {\\n        _registerInterface(_INTERFACE_ID_KIP7);\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function safeTransfer(address recipient, uint256 amount) public virtual override {\\n        safeTransfer(recipient, amount, \\\"\\\");\\n    }\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        transfer(recipient, amount);\\n        require(_checkOnKIP7Received(msg.sender, recipient, amount, data), \\\"KIP7::safeTransfer: transfer to non KIP7Receiver implementer\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override {\\n        safeTransferFrom(sender, recipient, amount, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        transferFrom(sender, recipient, amount);\\n        require(_checkOnKIP7Received(sender, recipient, amount, data), \\\"KIP7::safeTransferFrom: transfer to non KIP7Receiver implementer\\\");\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"KIP7::_transfer: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"KIP7::_transfer: transfer to the zero address\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(owner != address(0), \\\"KIP7::_approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"KIP7::_approve: approve to the zero address\\\");\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _checkOnKIP7Received(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (!recipient.isContract()) {\\n            return true;\\n        }\\n\\n        bytes4 retval = IKIP7Receiver(recipient).onKIP7Received(msg.sender, sender, amount, _data);\\n        return (retval == _KIP7_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x521bfda25e27804fa98e9e4ecc3ecd02dda2d4adc807fba29749fddbe30c215c\",\"license\":\"MIT\"},\"contracts/library/kip/KIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\nimport \\\"../openzeppelin/proxy/Initializable.sol\\\";\\nimport \\\"../../interface/kip/IKIP7Detailed.sol\\\";\\nimport \\\"./KIP7.sol\\\";\\n\\ncontract KIP7Detailed is KIP7, IKIP7Detailed {\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 internal _decimals;\\n\\n    bytes4 private constant INTERFACE_ID_KIP7_METADATA = 0xa219a025;\\n\\n    function __KIP7Detailed_init(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal initializer {\\n        __KIP7_init();\\n        __KIP7Detailed_init_unchained(name_, symbol_, decimals_);\\n    }\\n\\n    function __KIP7Detailed_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) private initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        _registerInterface(INTERFACE_ID_KIP7_METADATA);\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x601577a4c26b7675999a2eb07e99c4b59f82b0faa5a15202be72f4a49366c1e0\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    // -- Kokoa --\\n    // extended\\n\\n    function add(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + uint256(y);\\n            require(y >= 0 || z <= x, \\\"SafeMath: addition overflow\\\");\\n            require(y <= 0 || z >= x, \\\"SafeMath: addition overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - uint256(y);\\n            require(y <= 0 || z <= x, \\\"SafeMath: subtraction overflow\\\");\\n            require(y >= 0 || z >= x, \\\"SafeMath: subtraction overflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = int256(x) * y;\\n            require(int256(x) >= 0, \\\"SafeMath: multiplication overflow\\\");\\n            require(y == 0 || z / y == int256(x), \\\"SafeMath: multiplication overflow\\\");\\n        }\\n    }\\n\\n    function mul(int256 x, uint256 y) internal pure returns (int256 z) {\\n        z = x * int256(y);\\n        require(int256(y) >= 0, \\\"SafeMath: multiplication overflow\\\");\\n        require(x == 0 || z / x == int256(y), \\\"SafeMath: multiplication overflow\\\");\\n    }\\n\\n    // -- makerdao --\\n    // extended\\n    uint256 constant ONE = 10**27;\\n    uint256 constant RAY = 10**27;\\n    uint256 constant WAD = 10**18;\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"SafeMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"SafeMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x >= y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    // from uniswap\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n            z = x;\\n            x = (y / x + x) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc470c98add15d467271436b0ab2d99fc66a45f32d0ddd93d58436b74962b0f79\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x61c683ae2ea61903ccc65eb60878b7ab1f1513412221dcbdca4178fceddd45fe\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    function add(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + uint256(y);\\n            require(y >= 0 || z <= x, \\\"Math: addition overflow\\\");\\n            require(y <= 0 || z >= x, \\\"Math: addition overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - uint256(y);\\n            require(y <= 0 || z <= x, \\\"Math: subtraction overflow\\\");\\n            require(y >= 0 || z >= x, \\\"Math: subtraction overflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = int256(x) * y;\\n            require(int256(x) >= 0, \\\"Math: multiplication overflow\\\");\\n            require(y == 0 || z / y == int256(x), \\\"Math: multiplication overflow\\\");\\n        }\\n    }\\n\\n    function mul(int256 x, uint256 y) internal pure returns (int256 z) {\\n        z = x * int256(y);\\n        require(int256(y) >= 0, \\\"Math: multiplication overflow\\\");\\n        require(x == 0 || z / x == int256(y), \\\"Math: multiplication overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    // from uniswap\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n            z = x;\\n            x = (y / x + x) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd94cce7a88a43ad7e95b468dbd59a18e62f95be8b23a1619e0b96bfc1246eae1\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/reward/pool/TokenStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../.././library/openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../.././interface/IStakingPool.sol\\\";\\nimport \\\"../.././interface/IKokoaRewardManager.sol\\\";\\nimport \\\"../.././interface/kip/IKIP7.sol\\\";\\nimport \\\"../.././library/AccessControl.sol\\\";\\nimport \\\"../.././library/Pausable.sol\\\";\\n\\ncontract TokenStakingPool is IStakingPool, AccessControl, Pausable {\\n    // --- data ---\\n    IKIP7 public override token; // usually, lp token\\n    IKokoaRewardManager public kokoaRewardManager;\\n\\n    uint256 public override totalSupply;\\n    mapping(address => uint256) public override balanceOf;\\n\\n    function __TokenStakingPool_init(address token_, address kokoaRewardManager_) public initializer {\\n        __Pausable_init();\\n        token = IKIP7(token_);\\n        kokoaRewardManager = IKokoaRewardManager(kokoaRewardManager_);\\n    }\\n\\n    // bypress\\uc5d0\\uc11c bypress stable lp -> cypress stable lp \\uc774\\ub3d9\\uc744 \\uc704\\ud574\\uc11c \\ucd94\\n    function config(bytes32 what, address data) external onlyOwner {\\n        if (what == \\\"token\\\") token = IKIP7(data);\\n        else revert(\\\"TokenStakingPool::config: unrecognized-param\\\");\\n    }\\n\\n    function stake(address to, uint256 amount) external override whenNotPaused {\\n        kokoaRewardManager.onDeposit(amount, to);\\n\\n        token.transferFrom(msg.sender, address(this), amount);\\n        balanceOf[to] = balanceOf[to] + amount;\\n        totalSupply = totalSupply + amount;\\n\\n        emit Stake(msg.sender, to, amount);\\n    }\\n\\n    function unstake(address to, uint256 amount) public override whenNotPaused {\\n        kokoaRewardManager.onWithdraw(amount, msg.sender);\\n\\n        token.transfer(to, amount);\\n        balanceOf[msg.sender] = balanceOf[msg.sender] - amount;\\n        totalSupply = totalSupply - amount;\\n\\n        emit Unstake(msg.sender, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x271a104190e87a3aa308effdbab2fb2b0d446bf5763a56a697af30ed7297cdac\",\"license\":\"MIT\"},\"contracts/utils/Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../library/AccessControl.sol\\\";\\nimport \\\"../interface/kip/IKIP7.sol\\\";\\nimport \\\"../interface/IKokoaRewardManager.sol\\\";\\nimport \\\"../interface/ISKokoaToken.sol\\\";\\nimport \\\"../library/openzeppelin/contracts/utils/Math.sol\\\";\\nimport \\\"../library/WadRayMath.sol\\\";\\nimport \\\"../interface/IKSDRewardManager.sol\\\";\\nimport \\\"../interface/IDKSD.sol\\\";\\nimport \\\"../interface/ILedger.sol\\\";\\nimport \\\"../interface/IBKlay.sol\\\";\\nimport \\\"../reward/pool/TokenStakingPool.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnFactoryImpl.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnExchangeImpl.sol\\\";\\nimport \\\"../interface/IKsdRefundManager.sol\\\";\\nimport \\\"../interface/IAddressBook.sol\\\";\\n\\ncontract Helper is AccessControl {\\n    IKokoaRewardManager public kokoaRewardManager;\\n    IKSDRewardManager public ksdRewardManager;\\n    ISKokoaToken public sKokoa;\\n    ILedger public ledger;\\n    IKlaytnFactory public factory;\\n    IBKlay public bklay;\\n    IKIP7 public dksd;\\n    IKIP7 public skokoa;\\n    IAddressBook public addressBook;\\n\\n    struct AddressUint256Pair {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct Bytes32Uint256Pair {\\n        bytes32 collateralType;\\n        uint256 value;\\n    }\\n\\n    struct LpPoolInfo {\\n        address addr;\\n        uint256 totalSupply;\\n        address lpTokenAddress;\\n        uint256 lpTokenTotalSupply;\\n    }\\n\\n    struct UnstakeRecord {\\n        uint256 index;\\n        uint256 amount;\\n        uint256 completionTime;\\n        bool isClaimed;\\n    }\\n\\n    struct AccountCollateralInfo {\\n        bytes32 collateralType;\\n        uint256 lockedCollateral;\\n        uint256 loan;\\n    }\\n\\n    function __Helpr_init(\\n        IKokoaRewardManager _kokoaRewardManager,\\n        IKSDRewardManager _ksdRewardManager,\\n        ISKokoaToken _sKokoa,\\n        ILedger _ledger\\n    ) public initializer {\\n        kokoaRewardManager = _kokoaRewardManager;\\n        ksdRewardManager = _ksdRewardManager;\\n        sKokoa = _sKokoa;\\n        ledger = _ledger;\\n        __AccessControl_init();\\n    }\\n\\n    function config(bytes32 what, address data) external onlyOwner {\\n        if (what == \\\"factory\\\") {\\n            factory = IKlaytnFactory(data);\\n        } else if (what == \\\"bklay\\\") {\\n            bklay = IBKlay(data);\\n        } else if (what == \\\"dksd\\\") {\\n            dksd = IKIP7(data);\\n        } else if (what == \\\"skokoa\\\") {\\n            skokoa = IKIP7(data);\\n        } else if (what == \\\"addressBook\\\") {\\n            addressBook = IAddressBook(data);\\n        } else revert(\\\"Helper::config: unrecognized-param\\\");\\n    }\\n\\n    function userBalanceQuery(address _user, address[] calldata _tokens) external view returns (AddressUint256Pair[] memory balances) {\\n        balances = new AddressUint256Pair[](_tokens.length + 1);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            balances[i] = AddressUint256Pair(_tokens[i], IKIP7(_tokens[i]).balanceOf(_user));\\n        }\\n        balances[_tokens.length] = AddressUint256Pair(address(0), _user.balance);\\n    }\\n\\n    function userAllowanceQuery(\\n        address _user,\\n        address[] calldata _tokens,\\n        address[] calldata _spenders\\n    ) external view returns (AddressUint256Pair[] memory allowances) {\\n        allowances = new AddressUint256Pair[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            allowances[i] = AddressUint256Pair(_tokens[i], IKIP7(_tokens[i]).allowance(_user, _spenders[i]));\\n        }\\n    }\\n\\n    function userDataQuery(address _user, bytes32[] calldata _collateralTypes)\\n        external\\n        view\\n        returns (\\n            AddressUint256Pair[] memory kokoaClaimableRewards,\\n            UnstakeRecord[] memory kokoaUnstakeHistories,\\n            AddressUint256Pair[] memory ksdClaimableRewards,\\n            AccountCollateralInfo[] memory accountCollateralInfos,\\n            UnstakeRecord[] memory klayUnstakeHistories,\\n            AddressUint256Pair[] memory kokoaClaimableRewardsWithBonus,\\n            Bytes32Uint256Pair[] memory ksdClaimableRefunds\\n        )\\n    {\\n        kokoaClaimableRewards = getKokoaClaimableRewards(_user);\\n        kokoaUnstakeHistories = getLatestKokoaUnstakeHistory(_user);\\n        ksdClaimableRewards = getKsdClaimableRewards(_user);\\n        accountCollateralInfos = getAccountCollateralInfos(_user, _collateralTypes);\\n        klayUnstakeHistories = getLatestKlayUnstakeHistory(_user);\\n        kokoaClaimableRewardsWithBonus = getKokoaClaimableRewardsWithBonus(_user);\\n        ksdClaimableRefunds = getKsdClaimableRefunds(_user, _collateralTypes);\\n    }\\n\\n    function statusQuery(\\n        address[] calldata _tokens,\\n        address[] calldata _lpPools,\\n        uint256 kokoaPrice\\n    )\\n        external\\n        view\\n        returns (\\n            AddressUint256Pair[] memory totalSupplies,\\n            LpPoolInfo[] memory lpPoolInfos,\\n            uint256 dksdApr,\\n            uint256 skokoaApr\\n        )\\n    {\\n        totalSupplies = new AddressUint256Pair[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            totalSupplies[i] = AddressUint256Pair(_tokens[i], IKIP7(_tokens[i]).totalSupply());\\n        }\\n        lpPoolInfos = getLpPoolInfos(_lpPools);\\n        dksdApr = getDksdApr();\\n        skokoaApr = getSKokoaKsdApr(kokoaPrice);\\n    }\\n\\n    function getLpPoolInfos(address[] calldata _lpPools) public view returns (LpPoolInfo[] memory lpPoolInfos) {\\n        lpPoolInfos = new LpPoolInfo[](_lpPools.length);\\n        for (uint256 i = 0; i < _lpPools.length; i++) {\\n            TokenStakingPool pool = TokenStakingPool(_lpPools[i]);\\n            IKIP7 lpToken = IKIP7(address(pool.token()));\\n            lpPoolInfos[i] = LpPoolInfo(address(pool), pool.totalSupply(), address(lpToken), lpToken.totalSupply());\\n        }\\n    }\\n\\n    function getKokoaClaimableRewardsWithBonus(address _user) public view returns (AddressUint256Pair[] memory claimableRewards) {\\n        address[] memory pools = kokoaRewardManager.rewardPools();\\n        claimableRewards = new AddressUint256Pair[](pools.length);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            claimableRewards[i] = AddressUint256Pair(pools[i], kokoaRewardManager.claimableReward(pools[i], _user, true));\\n        }\\n    }\\n\\n    function getKokoaClaimableRewards(address _user) public view returns (AddressUint256Pair[] memory claimableRewards) {\\n        address[] memory pools = kokoaRewardManager.rewardPools();\\n        claimableRewards = new AddressUint256Pair[](pools.length);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            claimableRewards[i] = AddressUint256Pair(pools[i], kokoaRewardManager.claimableReward(pools[i], _user, false));\\n        }\\n    }\\n\\n    function getKsdClaimableRewards(address _user) public view returns (AddressUint256Pair[] memory claimableRewards) {\\n        address[] memory pools = ksdRewardManager.rewardPools();\\n        claimableRewards = new AddressUint256Pair[](pools.length);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            claimableRewards[i] = AddressUint256Pair(pools[i], ksdRewardManager.claimableReward(pools[i], _user));\\n        }\\n    }\\n\\n    function getKsdClaimableRefunds(address _user, bytes32[] calldata _collateralTypes) public view returns (Bytes32Uint256Pair[] memory claimableRefunds) {\\n        claimableRefunds = new Bytes32Uint256Pair[](_collateralTypes.length);\\n        IKsdRefundManager ksdRefundManager = IKsdRefundManager(addressBook.ksdRefundManager());\\n        for (uint256 i = 0; i < _collateralTypes.length; i++) {\\n            claimableRefunds[i] = Bytes32Uint256Pair(_collateralTypes[i], ksdRefundManager.claimableAmount(_collateralTypes[i], _user));\\n        }\\n    }\\n\\n    function getLatestKokoaUnstakeHistory(address _user) public view returns (UnstakeRecord[] memory unstakeHistory) {\\n        uint256 recordCount = sKokoa.unstakeCount(_user);\\n        uint256 length = Math.min(recordCount, 20);\\n\\n        unstakeHistory = new UnstakeRecord[](length);\\n        uint256 unstakeDuration = sKokoa.lockUpPeriod();\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 recordIndex = recordCount - i - 1;\\n            bool isClaimed;\\n            (uint256 blockTime, uint256 amount) = sKokoa.unstakeRecord(_user, recordIndex);\\n            uint256 completionTime = blockTime + unstakeDuration;\\n            if (recordIndex + 1 <= sKokoa.claimCount(_user)) {\\n                isClaimed = true;\\n            } else {\\n                isClaimed = false;\\n            }\\n            unstakeHistory[i] = UnstakeRecord(recordIndex, amount, completionTime, isClaimed);\\n        }\\n    }\\n\\n    function getLatestKlayUnstakeHistory(address _user) public view returns (UnstakeRecord[] memory unstakeHistory) {\\n        uint256 recordCount = bklay.unstakeRecordCount(_user);\\n        uint256 length = Math.min(recordCount, 20);\\n\\n        unstakeHistory = new UnstakeRecord[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 recordIndex = recordCount - i;\\n            (, uint256 amount, uint256 completionTime, bool isClaimed) = bklay.unstakeRecord(_user, recordIndex);\\n            unstakeHistory[i] = UnstakeRecord(recordIndex, amount, completionTime, isClaimed);\\n        }\\n    }\\n\\n    function getAccountCollateralInfos(address _user, bytes32[] calldata _collateralTypes)\\n        public\\n        view\\n        returns (AccountCollateralInfo[] memory accountCollateralInfos)\\n    {\\n        accountCollateralInfos = new AccountCollateralInfo[](_collateralTypes.length);\\n        for (uint256 i = 0; i < _collateralTypes.length; i++) {\\n            (, , uint256 rate, , , ) = ledger.collateralInfo(_collateralTypes[i]);\\n            (uint256 lockedCollateral, uint256 loan) = ledger.accountInfo(_collateralTypes[i], _user);\\n            accountCollateralInfos[i] = AccountCollateralInfo(_collateralTypes[i], lockedCollateral, (loan * rate) / WadRayMath.RAY);\\n        }\\n    }\\n\\n    function getDksdApr() public view returns (uint256 dksdApr) {\\n        uint256 targetDksdApr = ksdRewardManager.targetDksdApr();\\n        uint256 earnSumInRange = ksdRewardManager.earnSumInRange();\\n        uint256 earnCursor = ksdRewardManager.earnCursor();\\n        if (ksdRewardManager.earnHistoriesLength() <= 0) {\\n            return 0;\\n        }\\n        (uint256 oldestTimstamp, uint256 oldestAmount) = ksdRewardManager.earnHistories(earnCursor);\\n        uint256 estimatedRange = block.timestamp - oldestTimstamp;\\n        if (estimatedRange != 0 && dksd.totalSupply() > 0) {\\n            uint256 estimatedKsdPerYear = ((earnSumInRange - oldestAmount) * 365 days) / estimatedRange;\\n            dksdApr = Math.min(targetDksdApr * 100, (estimatedKsdPerYear * 10000) / dksd.totalSupply());\\n        } else {\\n            dksdApr = 0;\\n        }\\n    }\\n\\n    function getSKokoaKsdApr(uint256 kokoaPrice) public view returns (uint256 skokoaApr) {\\n        uint256 targetDksdApr = ksdRewardManager.targetDksdApr();\\n        uint256 earnSumInRange = ksdRewardManager.earnSumInRange();\\n        uint256 earnCursor = ksdRewardManager.earnCursor();\\n        if (ksdRewardManager.earnHistoriesLength() <= 0) {\\n            return 0;\\n        }\\n        (uint256 oldestTimstamp, uint256 oldestAmount) = ksdRewardManager.earnHistories(earnCursor);\\n        uint256 estimatedRange = block.timestamp - oldestTimstamp;\\n        if (estimatedRange != 0 && skokoa.totalSupply() * kokoaPrice > 0) {\\n            uint256 estimatedKsdPerYear = ((earnSumInRange - oldestAmount) * 365 days) / estimatedRange;\\n            uint256 dksdInterestPerYear = Math.min((dksd.totalSupply() * targetDksdApr) / 100, estimatedKsdPerYear);\\n            uint256 skokoaInterestPerYear = estimatedKsdPerYear - dksdInterestPerYear;\\n            skokoaApr = ((skokoaInterestPerYear * 10000) * 10**18) / (skokoa.totalSupply() * kokoaPrice);\\n        } else {\\n            skokoaApr = 0;\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    // -- for creating pool --\\n    function withdrawAllToken(address _token, address _recipient) external onlyOwner {\\n        bool success;\\n        if (_token == address(0)) {\\n            (success, ) = _recipient.call{value: address(this).balance}(\\\"\\\");\\n        } else {\\n            success = IKIP7(_token).transfer(_recipient, IKIP7(_token).balanceOf(address(this)));\\n        }\\n        require(success, \\\"Helper::withdrawAllToken: failed\\\");\\n    }\\n\\n    function pause(address deployed) external onlyOwner {\\n        Pausable(deployed).pause();\\n    }\\n\\n    function unpause(address deployed) external onlyOwner {\\n        Pausable(deployed).unpause();\\n    }\\n\\n    function createKlayPoolWithPaused(address token, uint256 amount) external payable onlyOwner {\\n        Pausable(token).unpause();\\n        createKlayPool(token, amount);\\n        Pausable(token).pause();\\n    }\\n\\n    function createKlayPool(address token, uint256 amount) public payable onlyOwner {\\n        IKIP7(token).transferFrom(msg.sender, address(this), amount);\\n        IKIP7(token).approve(address(factory), amount);\\n        factory.createKlayPool{value: msg.value}(token, amount, 30);\\n    }\\n\\n    function createKctPoolWithPausedA(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) external onlyOwner {\\n        Pausable(tokenA).unpause();\\n        createKctPool(tokenA, amountA, tokenB, amountB);\\n        Pausable(tokenA).pause();\\n    }\\n\\n    function createKctPoolWithPausedB(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) external onlyOwner {\\n        Pausable(tokenB).unpause();\\n        createKctPool(tokenA, amountA, tokenB, amountB);\\n        Pausable(tokenB).pause();\\n    }\\n\\n    function createKctPoolWithPausedAll(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) external onlyOwner {\\n        Pausable(tokenA).unpause();\\n        Pausable(tokenB).unpause();\\n        createKctPool(tokenA, amountA, tokenB, amountB);\\n        Pausable(tokenA).pause();\\n        Pausable(tokenB).pause();\\n    }\\n\\n    function createKctPool(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) public onlyOwner {\\n        IKIP7(tokenA).transferFrom(msg.sender, address(this), amountA);\\n        IKIP7(tokenB).transferFrom(msg.sender, address(this), amountB);\\n        IKIP7(tokenA).approve(address(factory), amountA);\\n        IKIP7(tokenB).approve(address(factory), amountB);\\n        factory.createKctPool(tokenA, amountA, tokenB, amountB, 30);\\n    }\\n\\n    function addKlayLiquidityWithPaused(address token, uint256 amount) external payable onlyOwner {\\n        Pausable(token).unpause();\\n        addKlayLiquidity(token, amount);\\n        Pausable(token).pause();\\n    }\\n\\n    function addKlayLiquidity(address token, uint256 amount) public payable onlyOwner {\\n        IKIP7(token).transferFrom(msg.sender, address(this), amount);\\n        address exchange = factory.tokenToPool(address(0), token);\\n        IKIP7(token).approve(address(exchange), amount);\\n        address _tokenA = IKlaytnExchange(exchange).tokenA();\\n        address _tokenB = IKlaytnExchange(exchange).tokenB();\\n        require(address(0) == _tokenA && token == _tokenB, \\\"Helper::addKlayLiquidity: invalid token order\\\");\\n        IKlaytnExchange(exchange).addKlayLiquidity{value: msg.value}(amount);\\n    }\\n\\n    function addKctLiquidityWithPausedA(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) external onlyOwner {\\n        Pausable(tokenA).unpause();\\n        addKctLiquidity(tokenA, amountA, tokenB, amountB);\\n        Pausable(tokenA).pause();\\n    }\\n\\n    function addKctLiquidityWithPausedB(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) external onlyOwner {\\n        Pausable(tokenB).unpause();\\n        addKctLiquidity(tokenA, amountA, tokenB, amountB);\\n        Pausable(tokenB).pause();\\n    }\\n\\n    function addKctLiquidityWithPausedAll(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) external onlyOwner {\\n        Pausable(tokenA).unpause();\\n        Pausable(tokenB).unpause();\\n        addKctLiquidity(tokenA, amountA, tokenB, amountB);\\n        Pausable(tokenA).pause();\\n        Pausable(tokenB).pause();\\n    }\\n\\n    function addKctLiquidity(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB\\n    ) public onlyOwner {\\n        IKIP7(tokenA).transferFrom(msg.sender, address(this), amountA);\\n        IKIP7(tokenB).transferFrom(msg.sender, address(this), amountB);\\n        address exchange = factory.tokenToPool(tokenA, tokenB);\\n        IKIP7(tokenA).approve(address(exchange), amountA);\\n        IKIP7(tokenB).approve(address(exchange), amountB);\\n        address _tokenA = IKlaytnExchange(exchange).tokenA();\\n        address _tokenB = IKlaytnExchange(exchange).tokenB();\\n        require(tokenA == _tokenA && tokenB == _tokenB, \\\"Helper::addKctLiquidity: invalid token order\\\");\\n        IKlaytnExchange(exchange).addKctLiquidity(amountA, amountB);\\n    }\\n}\\n\",\"keccak256\":\"0x8a90c75be5c14cfee48121f37fff747b7c946549267a6279a8626f806d63e95b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506150df806100206000396000f3fe60806040526004361061028c5760003560e01c806387fad2731161015a578063d366f3b9116100c1578063e33674001161007a578063e336740014610820578063e6b7929114610840578063f2fde38b14610853578063f4ca202514610873578063f5887cdd14610893578063fd9ea8e5146108b357610293565b8063d366f3b914610753578063d547741f14610773578063e017335514610793578063e0509086146107b3578063e127f946146107d3578063e25d2e29146107f357610293565b8063acc5ed4911610113578063acc5ed4914610683578063b38e66f1146106a3578063c2c37f04146106c3578063c45a0155146106e3578063ceaded6514610703578063d05f70711461073357610293565b806387fad273146105d85780638bf2c994146105eb57806391d14854146105fe578063a217fddf1461062e578063a333330914610643578063a6c1f6791461066357610293565b806356397c35116101fe578063680ed01e116101b7578063680ed01e146105185780636d1565521461052b5780636f3ed0b314610558578063727750401461057857806376a67a51146105985780637f4ed023146105b857610293565b806356397c351461044057806357b001f9146104785780635a21af5a146104985780635fcb5c89146104b857806364d3e090146104d85780636546d448146104f857610293565b80632f2ff15d116102505780632f2ff15d1461037e57806333b3ea131461039e57806336568abe146103be5780633aeebedb146103de57806346df4c6b146103fe5780634b41aedf1461042b57610293565b80630838db13146102985780630d77c45e146102ce578063175de272146102fb57806321f106841461031d578063248a9ca31461035057610293565b3661029357005b600080fd5b3480156102a457600080fd5b506102b86102b33660046147e5565b6108d3565b6040516102c59190614e75565b60405180910390f35b3480156102da57600080fd5b506102ee6102e9366004614926565b610b3c565b6040516102c59190614f58565b34801561030757600080fd5b5061031b61031636600461498a565b610d78565b005b34801561032957600080fd5b5061033d610338366004614926565b610ee8565b6040516102c59796959493929190614ec1565b34801561035c57600080fd5b5061037061036b366004614ba8565b610f51565b6040519081526020016102c5565b34801561038a57600080fd5b5061031b610399366004614bc0565b610f6a565b3480156103aa57600080fd5b5061031b6103b936600461498a565b610f8c565b3480156103ca57600080fd5b5061031b6103d9366004614bc0565b611420565b3480156103ea57600080fd5b5061031b6103f936600461481d565b61149e565b34801561040a57600080fd5b5061041e6104193660046147e5565b611669565b6040516102c59190614f7e565b34801561043757600080fd5b5061037061189b565b34801561044c57600080fd5b50600554610460906001600160a01b031681565b6040516001600160a01b0390911681526020016102c5565b34801561048457600080fd5b5061031b6104933660046147e5565b611ce1565b3480156104a457600080fd5b506102b86104b33660046147e5565b611d49565b3480156104c457600080fd5b50600454610460906001600160a01b031681565b3480156104e457600080fd5b5061031b6104f336600461498a565b611fa5565b34801561050457600080fd5b5061031b61051336600461498a565b612051565b61031b61052636600461495f565b6122db565b34801561053757600080fd5b5061054b610546366004614a19565b6123a1565b6040516102c59190614f6b565b34801561056457600080fd5b5061031b61057336600461498a565b612631565b34801561058457600080fd5b506102b86105933660046147e5565b6126f5565b3480156105a457600080fd5b5061031b6105b33660046147e5565b612957565b3480156105c457600080fd5b5061041e6105d33660046147e5565b6129a4565b61031b6105e636600461495f565b612d1a565b61031b6105f936600461495f565b612ea9565b34801561060a57600080fd5b5061061e610619366004614bc0565b612f18565b60405190151581526020016102c5565b34801561063a57600080fd5b50610370600081565b34801561064f57600080fd5b50600954610460906001600160a01b031681565b34801561066f57600080fd5b506102b861067e366004614855565b612f43565b34801561068f57600080fd5b5061037061069e366004614ba8565b61315a565b3480156106af57600080fd5b50600854610460906001600160a01b031681565b3480156106cf57600080fd5b5061031b6106de36600461498a565b61367b565b3480156106ef57600080fd5b50600654610460906001600160a01b031681565b34801561070f57600080fd5b5061072361071e366004614a58565b613727565b6040516102c59493929190614e88565b34801561073f57600080fd5b50600354610460906001600160a01b031681565b34801561075f57600080fd5b5061031b61076e366004614bc0565b613908565b34801561077f57600080fd5b5061031b61078e366004614bc0565b613a65565b34801561079f57600080fd5b50600754610460906001600160a01b031681565b3480156107bf57600080fd5b5061031b6107ce36600461498a565b613a82565b3480156107df57600080fd5b50600254610460906001600160a01b031681565b3480156107ff57600080fd5b5061081361080e366004614926565b613af3565b6040516102c59190614e62565b34801561082c57600080fd5b506102b861083b3660046148a7565b613d91565b61031b61084e36600461495f565b613f9c565b34801561085f57600080fd5b5061031b61086e3660046147e5565b614315565b34801561087f57600080fd5b5061031b61088e366004614be4565b61434e565b34801561089f57600080fd5b50600a54610460906001600160a01b031681565b3480156108bf57600080fd5b5061031b6108ce36600461498a565b614419565b60606000600260009054906101000a90046001600160a01b03166001600160a01b031663f71db5436040518163ffffffff1660e01b815260040160006040518083038186803b15801561092557600080fd5b505afa158015610939573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109619190810190614ac8565b905080516001600160401b0381111561098a57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109cf57816020015b60408051808201909152600080825260208201528152602001906001900390816109a85790505b50915060005b8151811015610b35576040518060400160405280838381518110610a0957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316634e9a471e858581518110610a6357634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290891660248201526001604482015260640160206040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190614c3f565b815250838281518110610b1757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610b2d9061504d565b9150506109d5565b5050919050565b6060816001600160401b03811115610b6457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ba957816020015b6040805180820190915260008082526020820152815260200190600190039081610b825790505b5090506000600a60009054906101000a90046001600160a01b03166001600160a01b03166371ccecb66040518163ffffffff1660e01b815260040160206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190614801565b905060005b83811015610d6f576040518060400160405280868684818110610c6c57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001836001600160a01b03166370bdefc1888886818110610ca757634e487b7160e01b600052603260045260246000fd5b905060200201358a6040518363ffffffff1660e01b8152600401610cde9291909182526001600160a01b0316602082015260400190565b60206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190614c3f565b815250838281518110610d5157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610d679061504d565b915050610c39565b50509392505050565b610d8a6437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b50505050816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e1857600080fd5b505af1158015610e2c573d6000803e3d6000fd5b50505050610e3c84848484610f8c565b836001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e7757600080fd5b505af1158015610e8b573d6000803e3d6000fd5b50505050816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b5050505050505050565b6060806060806060806060610efc8a6126f5565b9650610f078a6129a4565b9550610f128a611d49565b9450610f1f8a8a8a613af3565b9350610f2a8a611669565b9250610f358a6108d3565b9150610f428a8a8a610b3c565b90509397509397509397909450565b600081815260016020819052604090912001545b919050565b610f7382610f51565b610f7d813361448a565b610f8783836144ee565b505050565b610f9e6437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd90610fce90339030908890600401614e3e565b602060405180830381600087803b158015610fe857600080fd5b505af1158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190614b8e565b506040516323b872dd60e01b81526001600160a01b038316906323b872dd9061105190339030908690600401614e3e565b602060405180830381600087803b15801561106b57600080fd5b505af115801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a39190614b8e565b5060065460405163fd435cb960e01b81526001600160a01b0386811660048301528481166024830152600092169063fd435cb99060440160206040518083038186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190614801565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018790529192509086169063095ea7b390604401602060405180830381600087803b15801561117857600080fd5b505af115801561118c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b09190614b8e565b5060405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905284169063095ea7b390604401602060405180830381600087803b1580156111fb57600080fd5b505af115801561120f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112339190614b8e565b506000816001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a79190614801565b90506000826001600160a01b0316635f64b55b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190614801565b9050816001600160a01b0316876001600160a01b03161480156113505750806001600160a01b0316856001600160a01b0316145b6113b65760405162461bcd60e51b815260206004820152602c60248201527f48656c7065723a3a6164644b63744c69717569646974793a20696e76616c696460448201526b103a37b5b2b71037b93232b960a11b60648201526084015b60405180910390fd5b6040516355f553db60e11b815260048101879052602481018590526001600160a01b0384169063abeaa7b690604401600060405180830381600087803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b03811633146114905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016113ad565b61149a8282614559565b5050565b6114b06437bbb732b960d91b3361448a565b60006001600160a01b03831661151a576040516001600160a01b03831690303190600081818185875af1925050503d806000811461150a576040519150601f19603f3d011682016040523d82523d6000602084013e61150f565b606091505b50508091505061161c565b6040516370a0823160e01b81523060048201526001600160a01b0384169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b9190614c3f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190614b8e565b90505b80610f875760405162461bcd60e51b815260206004820181905260248201527f48656c7065723a3a7769746864726177416c6c546f6b656e3a206661696c656460448201526064016113ad565b60075460405163d575d53b60e01b81526001600160a01b03838116600483015260609260009291169063d575d53b9060240160206040518083038186803b1580156116b357600080fd5b505afa1580156116c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116eb9190614c3f565b905060006116fa8260146145c0565b9050806001600160401b0381111561172257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561178057816020015b61176d60405180608001604052806000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816117405790505b50925060005b8181101561189357600061179a8285615036565b60075460405163919e4da560e01b81526001600160a01b038981166004830152602482018490529293506000928392839291169063919e4da59060440160806040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182791906149d1565b93509350935050604051806080016040528085815260200184815260200183815260200182151581525088868151811061187157634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050808061188b9061504d565b915050611786565b505050919050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663916226a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ec57600080fd5b505afa158015611900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119249190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663e8f239cd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae9190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663cc78b6236040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0057600080fd5b505afa158015611a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a389190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316631bf9a9896040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8a57600080fd5b505afa158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190614c3f565b11611ad35760009350505050611cde565b600354604051635983241b60e01b81526004810183905260009182916001600160a01b0390911690635983241b90602401604080518083038186803b158015611b1b57600080fd5b505afa158015611b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b539190614c57565b90925090506000611b648342615036565b90508015801590611bef5750600854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190614c3f565b115b15611cd257600081611c018488615036565b611c0f906301e13380615017565b611c199190614ff7565b9050611cca611c29886064615017565b600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7757600080fd5b505afa158015611c8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caf9190614c3f565b611cbb84612710615017565b611cc59190614ff7565b6145c0565b975050611cd7565b600096505b5050505050505b90565b611cf36437bbb732b960d91b3361448a565b806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d2e57600080fd5b505af1158015611d42573d6000803e3d6000fd5b5050505050565b60606000600360009054906101000a90046001600160a01b03166001600160a01b031663f71db5436040518163ffffffff1660e01b815260040160006040518083038186803b158015611d9b57600080fd5b505afa158015611daf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dd79190810190614ac8565b905080516001600160401b03811115611e0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e4557816020015b6040805180820190915260008082526020820152815260200190600190039081611e1e5790505b50915060005b8151811015610b35576040518060400160405280838381518110611e7f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600360009054906101000a90046001600160a01b03166001600160a01b031663d26abffa858581518110611ed957634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518363ffffffff1660e01b8152600401611f149291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190614c3f565b815250838281518110611f8757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611f9d9061504d565b915050611e4b565b611fb76437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ff257600080fd5b505af1158015612006573d6000803e3d6000fd5b5050505061201684848484610f8c565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eca57600080fd5b6120636437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd9061209390339030908890600401614e3e565b602060405180830381600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e59190614b8e565b506040516323b872dd60e01b81526001600160a01b038316906323b872dd9061211690339030908690600401614e3e565b602060405180830381600087803b15801561213057600080fd5b505af1158015612144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121689190614b8e565b5060065460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529085169063095ea7b390604401602060405180830381600087803b1580156121b757600080fd5b505af11580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ef9190614b8e565b5060065460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b390604401602060405180830381600087803b15801561223e57600080fd5b505af1158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190614b8e565b5060065460405163ea2ac4e160e01b81526001600160a01b03868116600483015260248201869052848116604483015260648201849052601e60848301529091169063ea2ac4e19060a401600060405180830381600087803b158015610eca57600080fd5b6122ed6437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561232857600080fd5b505af115801561233c573d6000803e3d6000fd5b5050505061234a8282612d1a565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561238557600080fd5b505af1158015612399573d6000803e3d6000fd5b505050505050565b6060816001600160401b038111156123c957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561241b57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816123e75790505b50905060005b8281101561262a57600084848381811061244b57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061246091906147e5565b90506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561249d57600080fd5b505afa1580156124b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d59190614801565b90506040518060800160405280836001600160a01b03168152602001836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561252a57600080fd5b505afa15801561253e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125629190614c3f565b8152602001826001600160a01b03168152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125af57600080fd5b505afa1580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190614c3f565b81525084848151811061260a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806126229061504d565b915050612421565b5092915050565b6126436437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561267e57600080fd5b505af1158015612692573d6000803e3d6000fd5b50505050816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b50505050610e3c84848484612051565b60606000600260009054906101000a90046001600160a01b03166001600160a01b031663f71db5436040518163ffffffff1660e01b815260040160006040518083038186803b15801561274757600080fd5b505afa15801561275b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127839190810190614ac8565b905080516001600160401b038111156127ac57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156127f157816020015b60408051808201909152600080825260208201528152602001906001900390816127ca5790505b50915060005b8151811015610b3557604051806040016040528083838151811061282b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316634e9a471e85858151811061288557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290891660248201526000604482015260640160206040518083038186803b1580156128de57600080fd5b505afa1580156128f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129169190614c3f565b81525083828151811061293957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061294f9061504d565b9150506127f7565b6129696437bbb732b960d91b3361448a565b806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d2e57600080fd5b6004805460405163099f463b60e01b81526001600160a01b0384811693820193909352606092600092169063099f463b9060240160206040518083038186803b1580156129f057600080fd5b505afa158015612a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a289190614c3f565b90506000612a378260146145c0565b9050806001600160401b03811115612a5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612abd57816020015b612aaa60405180608001604052806000815260200160008152602001600081526020016000151581525090565b815260200190600190039081612a7d5790505b5092506000600460009054906101000a90046001600160a01b03166001600160a01b0316636c6925f96040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1057600080fd5b505afa158015612b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b489190614c3f565b905060005b82811015612d115760006001612b638387615036565b612b6d9190615036565b6004805460405163919e4da560e01b81526001600160a01b038b8116938201939093526024810184905292935060009283928392169063919e4da590604401604080518083038186803b158015612bc357600080fd5b505afa158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb9190614c57565b90925090506000612c0c8784614fdf565b600480546040516369c12cb760e01b81526001600160a01b038f81169382019390935292935016906369c12cb79060240160206040518083038186803b158015612c5557600080fd5b505afa158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d9190614c3f565b612c98866001614fdf565b11612ca65760019350612cab565b600093505b60405180608001604052808681526020018381526020018281526020018515158152508a8781518110612cee57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050508080612d099061504d565b915050612b4d565b50505050919050565b612d2c6437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90612d5c90339030908690600401614e3e565b602060405180830381600087803b158015612d7657600080fd5b505af1158015612d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dae9190614b8e565b5060065460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b390604401602060405180830381600087803b158015612dfd57600080fd5b505af1158015612e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e359190614b8e565b50600654604051636c5e074d60e11b81526001600160a01b03848116600483015260248201849052601e60448301529091169063d8bc0e9a9034906064016000604051808303818588803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b50505050505050565b612ebb6437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b5050505061234a8282613f9c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060612f50826001614fdf565b6001600160401b03811115612f7557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612fba57816020015b6040805180820190915260008082526020820152815260200190600190039081612f935790505b50905060005b82811015613107576040518060400160405280858584818110612ff357634e487b7160e01b600052603260045260246000fd5b905060200201602081019061300891906147e5565b6001600160a01b0316815260200185858481811061303657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061304b91906147e5565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a082319060240160206040518083038186803b15801561308e57600080fd5b505afa1580156130a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c69190614c3f565b8152508282815181106130e957634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806130ff9061504d565b915050612fc0565b5060408051808201909152600081526001600160a01b038516316020820152815182908490811061314857634e487b7160e01b600052603260045260246000fd5b60200260200101819052509392505050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663916226a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ab57600080fd5b505afa1580156131bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e39190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663e8f239cd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323557600080fd5b505afa158015613249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326d9190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663cc78b6236040518163ffffffff1660e01b815260040160206040518083038186803b1580156132bf57600080fd5b505afa1580156132d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f79190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316631bf9a9896040518163ffffffff1660e01b815260040160206040518083038186803b15801561334957600080fd5b505afa15801561335d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133819190614c3f565b116133925760009350505050610f65565b600354604051635983241b60e01b81526004810183905260009182916001600160a01b0390911690635983241b90602401604080518083038186803b1580156133da57600080fd5b505afa1580156133ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134129190614c57565b909250905060006134238342615036565b905080158015906134c45750600088600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561348057600080fd5b505afa158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190614c3f565b6134c29190615017565b115b1561366b576000816134d68488615036565b6134e4906301e13380615017565b6134ee9190614ff7565b90506000613598606489600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561354657600080fd5b505afa15801561355a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357e9190614c3f565b6135889190615017565b6135929190614ff7565b836145c0565b905060006135a68284615036565b90508a600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f757600080fd5b505afa15801561360b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362f9190614c3f565b6136399190615017565b61364582612710615017565b61365790670de0b6b3a7640000615017565b6136619190614ff7565b9950505050613670565b600096505b505050505050919050565b61368d6437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156136c857600080fd5b505af11580156136dc573d6000803e3d6000fd5b505050506136ec84848484612051565b836001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eca57600080fd5b606080600080876001600160401b0381111561375357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561379857816020015b60408051808201909152600080825260208201528152602001906001900390816137715790505b50935060005b888110156138da5760405180604001604052808b8b848181106137d157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906137e691906147e5565b6001600160a01b031681526020018b8b8481811061381457634e487b7160e01b600052603260045260246000fd5b905060200201602081019061382991906147e5565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561386157600080fd5b505afa158015613875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138999190614c3f565b8152508582815181106138bc57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806138d29061504d565b91505061379e565b506138e587876123a1565b92506138ef61189b565b91506138fa8561315a565b905095509550955095915050565b61391a6437bbb732b960d91b3361448a565b8166666163746f727960c81b141561394c57600680546001600160a01b0319166001600160a01b03831617905561149a565b8164626b6c617960d81b141561397c57600780546001600160a01b0319166001600160a01b03831617905561149a565b8163191adcd960e21b14156139ab57600880546001600160a01b0319166001600160a01b03831617905561149a565b8165736b6f6b6f6160d01b14156139dc57600980546001600160a01b0319166001600160a01b03831617905561149a565b816a61646472657373426f6f6b60a81b1415613a1257600a80546001600160a01b0319166001600160a01b03831617905561149a565b60405162461bcd60e51b815260206004820152602260248201527f48656c7065723a3a636f6e6669673a20756e7265636f676e697a65642d706172604482015261616d60f01b60648201526084016113ad565b613a6e82610f51565b613a78813361448a565b610f878383614559565b613a946437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613acf57600080fd5b505af1158015613ae3573d6000803e3d6000fd5b5050505061201684848484612051565b6060816001600160401b03811115613b1b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b6657816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613b395790505b50905060005b82811015613d89576005546000906001600160a01b0316637d5422a7868685818110613ba857634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613bcd91815260200190565b60c06040518083038186803b158015613be557600080fd5b505afa158015613bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1d9190614c7a565b505060055491945060009350839250506001600160a01b031663b75baf79888887818110613c5b57634e487b7160e01b600052603260045260246000fd5b905060200201358a6040518363ffffffff1660e01b8152600401613c929291909182526001600160a01b0316602082015260400190565b604080518083038186803b158015613ca957600080fd5b505afa158015613cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce19190614c57565b915091506040518060600160405280888887818110613d1057634e487b7160e01b600052603260045260246000fd5b9050602002013581526020018381526020016b033b2e3c9fd0803ce80000008584613d3b9190615017565b613d459190614ff7565b815250858581518110613d6857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050508080613d819061504d565b915050613b6c565b509392505050565b6060836001600160401b03811115613db957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613dfe57816020015b6040805180820190915260008082526020820152815260200190600190039081613dd75790505b50905060005b84811015613f92576040518060400160405280878784818110613e3757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190613e4c91906147e5565b6001600160a01b03168152602001878784818110613e7a57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190613e8f91906147e5565b6001600160a01b031663dd62ed3e8a888887818110613ebe57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190613ed391906147e5565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015613f1957600080fd5b505afa158015613f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f519190614c3f565b815250828281518110613f7457634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080613f8a9061504d565b915050613e04565b5095945050505050565b613fae6437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90613fde90339030908690600401614e3e565b602060405180830381600087803b158015613ff857600080fd5b505af115801561400c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140309190614b8e565b5060065460405163fd435cb960e01b81526000600482018190526001600160a01b0385811660248401529092169063fd435cb99060440160206040518083038186803b15801561407f57600080fd5b505afa158015614093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b79190614801565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018590529192509084169063095ea7b390604401602060405180830381600087803b15801561410557600080fd5b505af1158015614119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061413d9190614b8e565b506000816001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561417957600080fd5b505afa15801561418d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b19190614801565b90506000826001600160a01b0316635f64b55b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156141ee57600080fd5b505afa158015614202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142269190614801565b90506001600160a01b0382161580156142505750806001600160a01b0316856001600160a01b0316145b6142b25760405162461bcd60e51b815260206004820152602d60248201527f48656c7065723a3a6164644b6c61794c69717569646974793a20696e76616c6960448201526c32103a37b5b2b71037b93232b960991b60648201526084016113ad565b604051631b72122d60e11b8152600481018590526001600160a01b038416906336e4245a9034906024016000604051808303818588803b1580156142f557600080fd5b505af1158015614309573d6000803e3d6000fd5b50505050505050505050565b6143276437bbb732b960d91b3361448a565b6143396437bbb732b960d91b826144ee565b61434b6437bbb732b960d91b33614559565b50565b600054610100900460ff16806143635750303b155b80614371575060005460ff16155b61438d5760405162461bcd60e51b81526004016113ad90614f91565b600054610100900460ff161580156143af576000805461ffff19166101011790555b600280546001600160a01b038088166001600160a01b031992831617909255600380548784169083161790556004805486841690831617905560058054928516929091169190911790556144016145d8565b8015611d42576000805461ff00191690555050505050565b61442b6437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561446657600080fd5b505af115801561447a573d6000803e3d6000fd5b505050506136ec84848484610f8c565b6144948282612f18565b61149a5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016113ad565b6144f88282612f18565b61149a5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6145638282612f18565b1561149a5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008183106145cf57816145d1565b825b9392505050565b600054610100900460ff16806145ed5750303b155b806145fb575060005460ff16155b6146175760405162461bcd60e51b81526004016113ad90614f91565b600054610100900460ff16158015614639576000805461ffff19166101011790555b614641614655565b801561434b576000805461ff001916905550565b600054610100900460ff168061466a5750303b155b80614678575060005460ff16155b6146945760405162461bcd60e51b81526004016113ad90614f91565b600054610100900460ff161580156146b6576000805461ffff19166101011790555b6146c86437bbb732b960d91b33614722565b6146e26430b236b4b760d91b6437bbb732b960d91b61472c565b6146ff6737b832b930ba37b960c11b6437bbb732b960d91b61472c565b6147116430b236b4b760d91b33614722565b6146416737b832b930ba37b960c11b335b61149a82826144ee565b600061473783610f51565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b8051610f6581615094565b60008083601f84011261479d578081fd5b5081356001600160401b038111156147b3578182fd5b6020830191508360208260051b85010111156147ce57600080fd5b9250929050565b80518015158114610f6557600080fd5b6000602082840312156147f6578081fd5b81356145d181615094565b600060208284031215614812578081fd5b81516145d181615094565b6000806040838503121561482f578081fd5b823561483a81615094565b9150602083013561484a81615094565b809150509250929050565b600080600060408486031215614869578081fd5b833561487481615094565b925060208401356001600160401b0381111561488e578182fd5b61489a8682870161478c565b9497909650939450505050565b6000806000806000606086880312156148be578081fd5b85356148c981615094565b945060208601356001600160401b03808211156148e4578283fd5b6148f089838a0161478c565b90965094506040880135915080821115614908578283fd5b506149158882890161478c565b969995985093965092949392505050565b60008060006040848603121561493a578283fd5b833561494581615094565b925060208401356001600160401b0381111561488e578283fd5b60008060408385031215614971578182fd5b823561497c81615094565b946020939093013593505050565b6000806000806080858703121561499f578384fd5b84356149aa81615094565b93506020850135925060408501356149c181615094565b9396929550929360600135925050565b600080600080608085870312156149e6578384fd5b84516149f181615094565b6020860151604087015191955093509150614a0e606086016147d5565b905092959194509250565b60008060208385031215614a2b578182fd5b82356001600160401b03811115614a40578283fd5b614a4c8582860161478c565b90969095509350505050565b600080600080600060608688031215614a6f578283fd5b85356001600160401b0380821115614a85578485fd5b614a9189838a0161478c565b90975095506020880135915080821115614aa9578485fd5b50614ab68882890161478c565b96999598509660400135949350505050565b60006020808385031215614ada578182fd5b82516001600160401b0380821115614af0578384fd5b818501915085601f830112614b03578384fd5b815181811115614b1557614b1561507e565b8060051b604051601f19603f83011681018181108582111715614b3a57614b3a61507e565b604052828152858101935084860182860187018a1015614b58578788fd5b8795505b83861015614b8157614b6d81614781565b855260019590950194938601938601614b5c565b5098975050505050505050565b600060208284031215614b9f578081fd5b6145d1826147d5565b600060208284031215614bb9578081fd5b5035919050565b60008060408385031215614bd2578182fd5b82359150602083013561484a81615094565b60008060008060808587031215614bf9578182fd5b8435614c0481615094565b93506020850135614c1481615094565b92506040850135614c2481615094565b91506060850135614c3481615094565b939692955090935050565b600060208284031215614c50578081fd5b5051919050565b60008060408385031215614c69578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215614c92578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000815180845260208085019450808401835b83811015614d085781518051885283810151848901526040908101519088015260609096019590820190600101614cd6565b509495945050505050565b6000815180845260208085019450808401835b83811015614d0857815180516001600160a01b031688528301518388015260409096019590820190600101614d26565b6000815180845260208085019450808401835b83811015614d08578151805188528301518388015260409096019590820190600101614d69565b6000815180845260208085019450808401835b83811015614d0857815180516001600160a01b03908116895284820151858a0152604080830151909116908901526060908101519088015260809096019590820190600101614da3565b6000815180845260208085019450808401835b83811015614d085781518051885283810151848901526040808201519089015260609081015115159088015260809096019590820190600101614e00565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082526145d16020830184614cc3565b6000602082526145d16020830184614d13565b600060808252614e9b6080830187614d13565b8281036020840152614ead8187614d90565b604084019590955250506060015292915050565b600060e08252614ed460e083018a614d13565b8281036020840152614ee6818a614ded565b90508281036040840152614efa8189614d13565b90508281036060840152614f0e8188614cc3565b90508281036080840152614f228187614ded565b905082810360a0840152614f368186614d13565b905082810360c0840152614f4a8185614d56565b9a9950505050505050505050565b6000602082526145d16020830184614d56565b6000602082526145d16020830184614d90565b6000602082526145d16020830184614ded565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115614ff257614ff2615068565b500190565b60008261501257634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561503157615031615068565b500290565b60008282101561504857615048615068565b500390565b600060001982141561506157615061615068565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461434b57600080fdfea26469706673582212201d6f469a69f75ef9bc823bf00d36a7b9c83db36367e2c2d68a25929308d20f1764736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061028c5760003560e01c806387fad2731161015a578063d366f3b9116100c1578063e33674001161007a578063e336740014610820578063e6b7929114610840578063f2fde38b14610853578063f4ca202514610873578063f5887cdd14610893578063fd9ea8e5146108b357610293565b8063d366f3b914610753578063d547741f14610773578063e017335514610793578063e0509086146107b3578063e127f946146107d3578063e25d2e29146107f357610293565b8063acc5ed4911610113578063acc5ed4914610683578063b38e66f1146106a3578063c2c37f04146106c3578063c45a0155146106e3578063ceaded6514610703578063d05f70711461073357610293565b806387fad273146105d85780638bf2c994146105eb57806391d14854146105fe578063a217fddf1461062e578063a333330914610643578063a6c1f6791461066357610293565b806356397c35116101fe578063680ed01e116101b7578063680ed01e146105185780636d1565521461052b5780636f3ed0b314610558578063727750401461057857806376a67a51146105985780637f4ed023146105b857610293565b806356397c351461044057806357b001f9146104785780635a21af5a146104985780635fcb5c89146104b857806364d3e090146104d85780636546d448146104f857610293565b80632f2ff15d116102505780632f2ff15d1461037e57806333b3ea131461039e57806336568abe146103be5780633aeebedb146103de57806346df4c6b146103fe5780634b41aedf1461042b57610293565b80630838db13146102985780630d77c45e146102ce578063175de272146102fb57806321f106841461031d578063248a9ca31461035057610293565b3661029357005b600080fd5b3480156102a457600080fd5b506102b86102b33660046147e5565b6108d3565b6040516102c59190614e75565b60405180910390f35b3480156102da57600080fd5b506102ee6102e9366004614926565b610b3c565b6040516102c59190614f58565b34801561030757600080fd5b5061031b61031636600461498a565b610d78565b005b34801561032957600080fd5b5061033d610338366004614926565b610ee8565b6040516102c59796959493929190614ec1565b34801561035c57600080fd5b5061037061036b366004614ba8565b610f51565b6040519081526020016102c5565b34801561038a57600080fd5b5061031b610399366004614bc0565b610f6a565b3480156103aa57600080fd5b5061031b6103b936600461498a565b610f8c565b3480156103ca57600080fd5b5061031b6103d9366004614bc0565b611420565b3480156103ea57600080fd5b5061031b6103f936600461481d565b61149e565b34801561040a57600080fd5b5061041e6104193660046147e5565b611669565b6040516102c59190614f7e565b34801561043757600080fd5b5061037061189b565b34801561044c57600080fd5b50600554610460906001600160a01b031681565b6040516001600160a01b0390911681526020016102c5565b34801561048457600080fd5b5061031b6104933660046147e5565b611ce1565b3480156104a457600080fd5b506102b86104b33660046147e5565b611d49565b3480156104c457600080fd5b50600454610460906001600160a01b031681565b3480156104e457600080fd5b5061031b6104f336600461498a565b611fa5565b34801561050457600080fd5b5061031b61051336600461498a565b612051565b61031b61052636600461495f565b6122db565b34801561053757600080fd5b5061054b610546366004614a19565b6123a1565b6040516102c59190614f6b565b34801561056457600080fd5b5061031b61057336600461498a565b612631565b34801561058457600080fd5b506102b86105933660046147e5565b6126f5565b3480156105a457600080fd5b5061031b6105b33660046147e5565b612957565b3480156105c457600080fd5b5061041e6105d33660046147e5565b6129a4565b61031b6105e636600461495f565b612d1a565b61031b6105f936600461495f565b612ea9565b34801561060a57600080fd5b5061061e610619366004614bc0565b612f18565b60405190151581526020016102c5565b34801561063a57600080fd5b50610370600081565b34801561064f57600080fd5b50600954610460906001600160a01b031681565b34801561066f57600080fd5b506102b861067e366004614855565b612f43565b34801561068f57600080fd5b5061037061069e366004614ba8565b61315a565b3480156106af57600080fd5b50600854610460906001600160a01b031681565b3480156106cf57600080fd5b5061031b6106de36600461498a565b61367b565b3480156106ef57600080fd5b50600654610460906001600160a01b031681565b34801561070f57600080fd5b5061072361071e366004614a58565b613727565b6040516102c59493929190614e88565b34801561073f57600080fd5b50600354610460906001600160a01b031681565b34801561075f57600080fd5b5061031b61076e366004614bc0565b613908565b34801561077f57600080fd5b5061031b61078e366004614bc0565b613a65565b34801561079f57600080fd5b50600754610460906001600160a01b031681565b3480156107bf57600080fd5b5061031b6107ce36600461498a565b613a82565b3480156107df57600080fd5b50600254610460906001600160a01b031681565b3480156107ff57600080fd5b5061081361080e366004614926565b613af3565b6040516102c59190614e62565b34801561082c57600080fd5b506102b861083b3660046148a7565b613d91565b61031b61084e36600461495f565b613f9c565b34801561085f57600080fd5b5061031b61086e3660046147e5565b614315565b34801561087f57600080fd5b5061031b61088e366004614be4565b61434e565b34801561089f57600080fd5b50600a54610460906001600160a01b031681565b3480156108bf57600080fd5b5061031b6108ce36600461498a565b614419565b60606000600260009054906101000a90046001600160a01b03166001600160a01b031663f71db5436040518163ffffffff1660e01b815260040160006040518083038186803b15801561092557600080fd5b505afa158015610939573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109619190810190614ac8565b905080516001600160401b0381111561098a57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109cf57816020015b60408051808201909152600080825260208201528152602001906001900390816109a85790505b50915060005b8151811015610b35576040518060400160405280838381518110610a0957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316634e9a471e858581518110610a6357634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290891660248201526001604482015260640160206040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190614c3f565b815250838281518110610b1757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610b2d9061504d565b9150506109d5565b5050919050565b6060816001600160401b03811115610b6457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ba957816020015b6040805180820190915260008082526020820152815260200190600190039081610b825790505b5090506000600a60009054906101000a90046001600160a01b03166001600160a01b03166371ccecb66040518163ffffffff1660e01b815260040160206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190614801565b905060005b83811015610d6f576040518060400160405280868684818110610c6c57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001836001600160a01b03166370bdefc1888886818110610ca757634e487b7160e01b600052603260045260246000fd5b905060200201358a6040518363ffffffff1660e01b8152600401610cde9291909182526001600160a01b0316602082015260400190565b60206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190614c3f565b815250838281518110610d5157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610d679061504d565b915050610c39565b50509392505050565b610d8a6437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dc557600080fd5b505af1158015610dd9573d6000803e3d6000fd5b50505050816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e1857600080fd5b505af1158015610e2c573d6000803e3d6000fd5b50505050610e3c84848484610f8c565b836001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e7757600080fd5b505af1158015610e8b573d6000803e3d6000fd5b50505050816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b5050505050505050565b6060806060806060806060610efc8a6126f5565b9650610f078a6129a4565b9550610f128a611d49565b9450610f1f8a8a8a613af3565b9350610f2a8a611669565b9250610f358a6108d3565b9150610f428a8a8a610b3c565b90509397509397509397909450565b600081815260016020819052604090912001545b919050565b610f7382610f51565b610f7d813361448a565b610f8783836144ee565b505050565b610f9e6437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd90610fce90339030908890600401614e3e565b602060405180830381600087803b158015610fe857600080fd5b505af1158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110209190614b8e565b506040516323b872dd60e01b81526001600160a01b038316906323b872dd9061105190339030908690600401614e3e565b602060405180830381600087803b15801561106b57600080fd5b505af115801561107f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a39190614b8e565b5060065460405163fd435cb960e01b81526001600160a01b0386811660048301528481166024830152600092169063fd435cb99060440160206040518083038186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190614801565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018790529192509086169063095ea7b390604401602060405180830381600087803b15801561117857600080fd5b505af115801561118c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b09190614b8e565b5060405163095ea7b360e01b81526001600160a01b0382811660048301526024820184905284169063095ea7b390604401602060405180830381600087803b1580156111fb57600080fd5b505af115801561120f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112339190614b8e565b506000816001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a79190614801565b90506000826001600160a01b0316635f64b55b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190614801565b9050816001600160a01b0316876001600160a01b03161480156113505750806001600160a01b0316856001600160a01b0316145b6113b65760405162461bcd60e51b815260206004820152602c60248201527f48656c7065723a3a6164644b63744c69717569646974793a20696e76616c696460448201526b103a37b5b2b71037b93232b960a11b60648201526084015b60405180910390fd5b6040516355f553db60e11b815260048101879052602481018590526001600160a01b0384169063abeaa7b690604401600060405180830381600087803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b03811633146114905760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016113ad565b61149a8282614559565b5050565b6114b06437bbb732b960d91b3361448a565b60006001600160a01b03831661151a576040516001600160a01b03831690303190600081818185875af1925050503d806000811461150a576040519150601f19603f3d011682016040523d82523d6000602084013e61150f565b606091505b50508091505061161c565b6040516370a0823160e01b81523060048201526001600160a01b0384169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561156357600080fd5b505afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b9190614c3f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156115e157600080fd5b505af11580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190614b8e565b90505b80610f875760405162461bcd60e51b815260206004820181905260248201527f48656c7065723a3a7769746864726177416c6c546f6b656e3a206661696c656460448201526064016113ad565b60075460405163d575d53b60e01b81526001600160a01b03838116600483015260609260009291169063d575d53b9060240160206040518083038186803b1580156116b357600080fd5b505afa1580156116c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116eb9190614c3f565b905060006116fa8260146145c0565b9050806001600160401b0381111561172257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561178057816020015b61176d60405180608001604052806000815260200160008152602001600081526020016000151581525090565b8152602001906001900390816117405790505b50925060005b8181101561189357600061179a8285615036565b60075460405163919e4da560e01b81526001600160a01b038981166004830152602482018490529293506000928392839291169063919e4da59060440160806040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182791906149d1565b93509350935050604051806080016040528085815260200184815260200183815260200182151581525088868151811061187157634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050808061188b9061504d565b915050611786565b505050919050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663916226a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ec57600080fd5b505afa158015611900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119249190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663e8f239cd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae9190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663cc78b6236040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0057600080fd5b505afa158015611a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a389190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316631bf9a9896040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8a57600080fd5b505afa158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190614c3f565b11611ad35760009350505050611cde565b600354604051635983241b60e01b81526004810183905260009182916001600160a01b0390911690635983241b90602401604080518083038186803b158015611b1b57600080fd5b505afa158015611b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b539190614c57565b90925090506000611b648342615036565b90508015801590611bef5750600854604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190614c3f565b115b15611cd257600081611c018488615036565b611c0f906301e13380615017565b611c199190614ff7565b9050611cca611c29886064615017565b600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7757600080fd5b505afa158015611c8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611caf9190614c3f565b611cbb84612710615017565b611cc59190614ff7565b6145c0565b975050611cd7565b600096505b5050505050505b90565b611cf36437bbb732b960d91b3361448a565b806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d2e57600080fd5b505af1158015611d42573d6000803e3d6000fd5b5050505050565b60606000600360009054906101000a90046001600160a01b03166001600160a01b031663f71db5436040518163ffffffff1660e01b815260040160006040518083038186803b158015611d9b57600080fd5b505afa158015611daf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dd79190810190614ac8565b905080516001600160401b03811115611e0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e4557816020015b6040805180820190915260008082526020820152815260200190600190039081611e1e5790505b50915060005b8151811015610b35576040518060400160405280838381518110611e7f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600360009054906101000a90046001600160a01b03166001600160a01b031663d26abffa858581518110611ed957634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518363ffffffff1660e01b8152600401611f149291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015611f2c57600080fd5b505afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190614c3f565b815250838281518110611f8757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611f9d9061504d565b915050611e4b565b611fb76437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ff257600080fd5b505af1158015612006573d6000803e3d6000fd5b5050505061201684848484610f8c565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eca57600080fd5b6120636437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd9061209390339030908890600401614e3e565b602060405180830381600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e59190614b8e565b506040516323b872dd60e01b81526001600160a01b038316906323b872dd9061211690339030908690600401614e3e565b602060405180830381600087803b15801561213057600080fd5b505af1158015612144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121689190614b8e565b5060065460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529085169063095ea7b390604401602060405180830381600087803b1580156121b757600080fd5b505af11580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ef9190614b8e565b5060065460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b390604401602060405180830381600087803b15801561223e57600080fd5b505af1158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190614b8e565b5060065460405163ea2ac4e160e01b81526001600160a01b03868116600483015260248201869052848116604483015260648201849052601e60848301529091169063ea2ac4e19060a401600060405180830381600087803b158015610eca57600080fd5b6122ed6437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561232857600080fd5b505af115801561233c573d6000803e3d6000fd5b5050505061234a8282612d1a565b816001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561238557600080fd5b505af1158015612399573d6000803e3d6000fd5b505050505050565b6060816001600160401b038111156123c957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561241b57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816123e75790505b50905060005b8281101561262a57600084848381811061244b57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061246091906147e5565b90506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561249d57600080fd5b505afa1580156124b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d59190614801565b90506040518060800160405280836001600160a01b03168152602001836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561252a57600080fd5b505afa15801561253e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125629190614c3f565b8152602001826001600160a01b03168152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125af57600080fd5b505afa1580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190614c3f565b81525084848151811061260a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806126229061504d565b915050612421565b5092915050565b6126436437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561267e57600080fd5b505af1158015612692573d6000803e3d6000fd5b50505050816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b50505050610e3c84848484612051565b60606000600260009054906101000a90046001600160a01b03166001600160a01b031663f71db5436040518163ffffffff1660e01b815260040160006040518083038186803b15801561274757600080fd5b505afa15801561275b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127839190810190614ac8565b905080516001600160401b038111156127ac57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156127f157816020015b60408051808201909152600080825260208201528152602001906001900390816127ca5790505b50915060005b8151811015610b3557604051806040016040528083838151811061282b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03168152602001600260009054906101000a90046001600160a01b03166001600160a01b0316634e9a471e85858151811061288557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290891660248201526000604482015260640160206040518083038186803b1580156128de57600080fd5b505afa1580156128f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129169190614c3f565b81525083828151811061293957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061294f9061504d565b9150506127f7565b6129696437bbb732b960d91b3361448a565b806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d2e57600080fd5b6004805460405163099f463b60e01b81526001600160a01b0384811693820193909352606092600092169063099f463b9060240160206040518083038186803b1580156129f057600080fd5b505afa158015612a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a289190614c3f565b90506000612a378260146145c0565b9050806001600160401b03811115612a5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612abd57816020015b612aaa60405180608001604052806000815260200160008152602001600081526020016000151581525090565b815260200190600190039081612a7d5790505b5092506000600460009054906101000a90046001600160a01b03166001600160a01b0316636c6925f96040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1057600080fd5b505afa158015612b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b489190614c3f565b905060005b82811015612d115760006001612b638387615036565b612b6d9190615036565b6004805460405163919e4da560e01b81526001600160a01b038b8116938201939093526024810184905292935060009283928392169063919e4da590604401604080518083038186803b158015612bc357600080fd5b505afa158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb9190614c57565b90925090506000612c0c8784614fdf565b600480546040516369c12cb760e01b81526001600160a01b038f81169382019390935292935016906369c12cb79060240160206040518083038186803b158015612c5557600080fd5b505afa158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d9190614c3f565b612c98866001614fdf565b11612ca65760019350612cab565b600093505b60405180608001604052808681526020018381526020018281526020018515158152508a8781518110612cee57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050508080612d099061504d565b915050612b4d565b50505050919050565b612d2c6437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90612d5c90339030908690600401614e3e565b602060405180830381600087803b158015612d7657600080fd5b505af1158015612d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dae9190614b8e565b5060065460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b390604401602060405180830381600087803b158015612dfd57600080fd5b505af1158015612e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e359190614b8e565b50600654604051636c5e074d60e11b81526001600160a01b03848116600483015260248201849052601e60448301529091169063d8bc0e9a9034906064016000604051808303818588803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b50505050505050565b612ebb6437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b5050505061234a8282613f9c565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060612f50826001614fdf565b6001600160401b03811115612f7557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612fba57816020015b6040805180820190915260008082526020820152815260200190600190039081612f935790505b50905060005b82811015613107576040518060400160405280858584818110612ff357634e487b7160e01b600052603260045260246000fd5b905060200201602081019061300891906147e5565b6001600160a01b0316815260200185858481811061303657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061304b91906147e5565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a082319060240160206040518083038186803b15801561308e57600080fd5b505afa1580156130a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c69190614c3f565b8152508282815181106130e957634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806130ff9061504d565b915050612fc0565b5060408051808201909152600081526001600160a01b038516316020820152815182908490811061314857634e487b7160e01b600052603260045260246000fd5b60200260200101819052509392505050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663916226a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ab57600080fd5b505afa1580156131bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e39190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663e8f239cd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323557600080fd5b505afa158015613249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326d9190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663cc78b6236040518163ffffffff1660e01b815260040160206040518083038186803b1580156132bf57600080fd5b505afa1580156132d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f79190614c3f565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316631bf9a9896040518163ffffffff1660e01b815260040160206040518083038186803b15801561334957600080fd5b505afa15801561335d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133819190614c3f565b116133925760009350505050610f65565b600354604051635983241b60e01b81526004810183905260009182916001600160a01b0390911690635983241b90602401604080518083038186803b1580156133da57600080fd5b505afa1580156133ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134129190614c57565b909250905060006134238342615036565b905080158015906134c45750600088600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561348057600080fd5b505afa158015613494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b89190614c3f565b6134c29190615017565b115b1561366b576000816134d68488615036565b6134e4906301e13380615017565b6134ee9190614ff7565b90506000613598606489600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561354657600080fd5b505afa15801561355a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357e9190614c3f565b6135889190615017565b6135929190614ff7565b836145c0565b905060006135a68284615036565b90508a600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f757600080fd5b505afa15801561360b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362f9190614c3f565b6136399190615017565b61364582612710615017565b61365790670de0b6b3a7640000615017565b6136619190614ff7565b9950505050613670565b600096505b505050505050919050565b61368d6437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156136c857600080fd5b505af11580156136dc573d6000803e3d6000fd5b505050506136ec84848484612051565b836001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eca57600080fd5b606080600080876001600160401b0381111561375357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561379857816020015b60408051808201909152600080825260208201528152602001906001900390816137715790505b50935060005b888110156138da5760405180604001604052808b8b848181106137d157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906137e691906147e5565b6001600160a01b031681526020018b8b8481811061381457634e487b7160e01b600052603260045260246000fd5b905060200201602081019061382991906147e5565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561386157600080fd5b505afa158015613875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138999190614c3f565b8152508582815181106138bc57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806138d29061504d565b91505061379e565b506138e587876123a1565b92506138ef61189b565b91506138fa8561315a565b905095509550955095915050565b61391a6437bbb732b960d91b3361448a565b8166666163746f727960c81b141561394c57600680546001600160a01b0319166001600160a01b03831617905561149a565b8164626b6c617960d81b141561397c57600780546001600160a01b0319166001600160a01b03831617905561149a565b8163191adcd960e21b14156139ab57600880546001600160a01b0319166001600160a01b03831617905561149a565b8165736b6f6b6f6160d01b14156139dc57600980546001600160a01b0319166001600160a01b03831617905561149a565b816a61646472657373426f6f6b60a81b1415613a1257600a80546001600160a01b0319166001600160a01b03831617905561149a565b60405162461bcd60e51b815260206004820152602260248201527f48656c7065723a3a636f6e6669673a20756e7265636f676e697a65642d706172604482015261616d60f01b60648201526084016113ad565b613a6e82610f51565b613a78813361448a565b610f878383614559565b613a946437bbb732b960d91b3361448a565b816001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613acf57600080fd5b505af1158015613ae3573d6000803e3d6000fd5b5050505061201684848484612051565b6060816001600160401b03811115613b1b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b6657816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613b395790505b50905060005b82811015613d89576005546000906001600160a01b0316637d5422a7868685818110613ba857634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401613bcd91815260200190565b60c06040518083038186803b158015613be557600080fd5b505afa158015613bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1d9190614c7a565b505060055491945060009350839250506001600160a01b031663b75baf79888887818110613c5b57634e487b7160e01b600052603260045260246000fd5b905060200201358a6040518363ffffffff1660e01b8152600401613c929291909182526001600160a01b0316602082015260400190565b604080518083038186803b158015613ca957600080fd5b505afa158015613cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce19190614c57565b915091506040518060600160405280888887818110613d1057634e487b7160e01b600052603260045260246000fd5b9050602002013581526020018381526020016b033b2e3c9fd0803ce80000008584613d3b9190615017565b613d459190614ff7565b815250858581518110613d6857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050508080613d819061504d565b915050613b6c565b509392505050565b6060836001600160401b03811115613db957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613dfe57816020015b6040805180820190915260008082526020820152815260200190600190039081613dd75790505b50905060005b84811015613f92576040518060400160405280878784818110613e3757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190613e4c91906147e5565b6001600160a01b03168152602001878784818110613e7a57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190613e8f91906147e5565b6001600160a01b031663dd62ed3e8a888887818110613ebe57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190613ed391906147e5565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015613f1957600080fd5b505afa158015613f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f519190614c3f565b815250828281518110613f7457634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080613f8a9061504d565b915050613e04565b5095945050505050565b613fae6437bbb732b960d91b3361448a565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd90613fde90339030908690600401614e3e565b602060405180830381600087803b158015613ff857600080fd5b505af115801561400c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140309190614b8e565b5060065460405163fd435cb960e01b81526000600482018190526001600160a01b0385811660248401529092169063fd435cb99060440160206040518083038186803b15801561407f57600080fd5b505afa158015614093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b79190614801565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018590529192509084169063095ea7b390604401602060405180830381600087803b15801561410557600080fd5b505af1158015614119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061413d9190614b8e565b506000816001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561417957600080fd5b505afa15801561418d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b19190614801565b90506000826001600160a01b0316635f64b55b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156141ee57600080fd5b505afa158015614202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142269190614801565b90506001600160a01b0382161580156142505750806001600160a01b0316856001600160a01b0316145b6142b25760405162461bcd60e51b815260206004820152602d60248201527f48656c7065723a3a6164644b6c61794c69717569646974793a20696e76616c6960448201526c32103a37b5b2b71037b93232b960991b60648201526084016113ad565b604051631b72122d60e11b8152600481018590526001600160a01b038416906336e4245a9034906024016000604051808303818588803b1580156142f557600080fd5b505af1158015614309573d6000803e3d6000fd5b50505050505050505050565b6143276437bbb732b960d91b3361448a565b6143396437bbb732b960d91b826144ee565b61434b6437bbb732b960d91b33614559565b50565b600054610100900460ff16806143635750303b155b80614371575060005460ff16155b61438d5760405162461bcd60e51b81526004016113ad90614f91565b600054610100900460ff161580156143af576000805461ffff19166101011790555b600280546001600160a01b038088166001600160a01b031992831617909255600380548784169083161790556004805486841690831617905560058054928516929091169190911790556144016145d8565b8015611d42576000805461ff00191690555050505050565b61442b6437bbb732b960d91b3361448a565b836001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561446657600080fd5b505af115801561447a573d6000803e3d6000fd5b505050506136ec84848484610f8c565b6144948282612f18565b61149a5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016113ad565b6144f88282612f18565b61149a5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6145638282612f18565b1561149a5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008183106145cf57816145d1565b825b9392505050565b600054610100900460ff16806145ed5750303b155b806145fb575060005460ff16155b6146175760405162461bcd60e51b81526004016113ad90614f91565b600054610100900460ff16158015614639576000805461ffff19166101011790555b614641614655565b801561434b576000805461ff001916905550565b600054610100900460ff168061466a5750303b155b80614678575060005460ff16155b6146945760405162461bcd60e51b81526004016113ad90614f91565b600054610100900460ff161580156146b6576000805461ffff19166101011790555b6146c86437bbb732b960d91b33614722565b6146e26430b236b4b760d91b6437bbb732b960d91b61472c565b6146ff6737b832b930ba37b960c11b6437bbb732b960d91b61472c565b6147116430b236b4b760d91b33614722565b6146416737b832b930ba37b960c11b335b61149a82826144ee565b600061473783610f51565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b8051610f6581615094565b60008083601f84011261479d578081fd5b5081356001600160401b038111156147b3578182fd5b6020830191508360208260051b85010111156147ce57600080fd5b9250929050565b80518015158114610f6557600080fd5b6000602082840312156147f6578081fd5b81356145d181615094565b600060208284031215614812578081fd5b81516145d181615094565b6000806040838503121561482f578081fd5b823561483a81615094565b9150602083013561484a81615094565b809150509250929050565b600080600060408486031215614869578081fd5b833561487481615094565b925060208401356001600160401b0381111561488e578182fd5b61489a8682870161478c565b9497909650939450505050565b6000806000806000606086880312156148be578081fd5b85356148c981615094565b945060208601356001600160401b03808211156148e4578283fd5b6148f089838a0161478c565b90965094506040880135915080821115614908578283fd5b506149158882890161478c565b969995985093965092949392505050565b60008060006040848603121561493a578283fd5b833561494581615094565b925060208401356001600160401b0381111561488e578283fd5b60008060408385031215614971578182fd5b823561497c81615094565b946020939093013593505050565b6000806000806080858703121561499f578384fd5b84356149aa81615094565b93506020850135925060408501356149c181615094565b9396929550929360600135925050565b600080600080608085870312156149e6578384fd5b84516149f181615094565b6020860151604087015191955093509150614a0e606086016147d5565b905092959194509250565b60008060208385031215614a2b578182fd5b82356001600160401b03811115614a40578283fd5b614a4c8582860161478c565b90969095509350505050565b600080600080600060608688031215614a6f578283fd5b85356001600160401b0380821115614a85578485fd5b614a9189838a0161478c565b90975095506020880135915080821115614aa9578485fd5b50614ab68882890161478c565b96999598509660400135949350505050565b60006020808385031215614ada578182fd5b82516001600160401b0380821115614af0578384fd5b818501915085601f830112614b03578384fd5b815181811115614b1557614b1561507e565b8060051b604051601f19603f83011681018181108582111715614b3a57614b3a61507e565b604052828152858101935084860182860187018a1015614b58578788fd5b8795505b83861015614b8157614b6d81614781565b855260019590950194938601938601614b5c565b5098975050505050505050565b600060208284031215614b9f578081fd5b6145d1826147d5565b600060208284031215614bb9578081fd5b5035919050565b60008060408385031215614bd2578182fd5b82359150602083013561484a81615094565b60008060008060808587031215614bf9578182fd5b8435614c0481615094565b93506020850135614c1481615094565b92506040850135614c2481615094565b91506060850135614c3481615094565b939692955090935050565b600060208284031215614c50578081fd5b5051919050565b60008060408385031215614c69578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215614c92578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000815180845260208085019450808401835b83811015614d085781518051885283810151848901526040908101519088015260609096019590820190600101614cd6565b509495945050505050565b6000815180845260208085019450808401835b83811015614d0857815180516001600160a01b031688528301518388015260409096019590820190600101614d26565b6000815180845260208085019450808401835b83811015614d08578151805188528301518388015260409096019590820190600101614d69565b6000815180845260208085019450808401835b83811015614d0857815180516001600160a01b03908116895284820151858a0152604080830151909116908901526060908101519088015260809096019590820190600101614da3565b6000815180845260208085019450808401835b83811015614d085781518051885283810151848901526040808201519089015260609081015115159088015260809096019590820190600101614e00565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082526145d16020830184614cc3565b6000602082526145d16020830184614d13565b600060808252614e9b6080830187614d13565b8281036020840152614ead8187614d90565b604084019590955250506060015292915050565b600060e08252614ed460e083018a614d13565b8281036020840152614ee6818a614ded565b90508281036040840152614efa8189614d13565b90508281036060840152614f0e8188614cc3565b90508281036080840152614f228187614ded565b905082810360a0840152614f368186614d13565b905082810360c0840152614f4a8185614d56565b9a9950505050505050505050565b6000602082526145d16020830184614d56565b6000602082526145d16020830184614d90565b6000602082526145d16020830184614ded565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115614ff257614ff2615068565b500190565b60008261501257634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561503157615031615068565b500290565b60008282101561504857615048615068565b500390565b600060001982141561506157615061615068565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461434b57600080fdfea26469706673582212201d6f469a69f75ef9bc823bf00d36a7b9c83db36367e2c2d68a25929308d20f1764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24885,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24888,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 21831,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21826_storage)"
      },
      {
        "astId": 36071,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "kokoaRewardManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IKokoaRewardManager)8454"
      },
      {
        "astId": 36074,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "ksdRewardManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKSDRewardManager)7872"
      },
      {
        "astId": 36077,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "sKokoa",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISKokoaToken)9279"
      },
      {
        "astId": 36080,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "ledger",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ILedger)8858"
      },
      {
        "astId": 36083,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "factory",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IKlaytnFactory)10820"
      },
      {
        "astId": 36086,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "bklay",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBKlay)7190"
      },
      {
        "astId": 36089,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "dksd",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IKIP7)9935"
      },
      {
        "astId": 36092,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "skokoa",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IKIP7)9935"
      },
      {
        "astId": 36095,
        "contract": "contracts/utils/Helper.sol:Helper",
        "label": "addressBook",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IAddressBook)6869"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressBook)6869": {
        "encoding": "inplace",
        "label": "contract IAddressBook",
        "numberOfBytes": "20"
      },
      "t_contract(IBKlay)7190": {
        "encoding": "inplace",
        "label": "contract IBKlay",
        "numberOfBytes": "20"
      },
      "t_contract(IKIP7)9935": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKSDRewardManager)7872": {
        "encoding": "inplace",
        "label": "contract IKSDRewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(IKlaytnFactory)10820": {
        "encoding": "inplace",
        "label": "contract IKlaytnFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IKokoaRewardManager)8454": {
        "encoding": "inplace",
        "label": "contract IKokoaRewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(ILedger)8858": {
        "encoding": "inplace",
        "label": "contract ILedger",
        "numberOfBytes": "20"
      },
      "t_contract(ISKokoaToken)9279": {
        "encoding": "inplace",
        "label": "contract ISKokoaToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21826_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21826_storage"
      },
      "t_struct(RoleData)21826_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 21823,
            "contract": "contracts/utils/Helper.sol:Helper",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21825,
            "contract": "contracts/utils/Helper.sol:Helper",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}