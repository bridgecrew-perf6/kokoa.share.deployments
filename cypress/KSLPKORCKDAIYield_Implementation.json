{
  "address": "0xC73343a93B7Be26F0056Ed62AAb58dB69B9edCFC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__KSLPKORCKDAIYield_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__KSLPYield_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ksdAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "data",
          "type": "bool"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expectedApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "klayswapBridge",
      "outputs": [
        {
          "internalType": "contract IKlaySwapBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksd",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksp",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "toAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "toValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f7530454548773f2e9e2eab1ba8b37177d0037bfa527f0527e9827427141a57",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0xC73343a93B7Be26F0056Ed62AAb58dB69B9edCFC",
    "transactionIndex": 29,
    "gasUsed": "2186693",
    "logsBloom": "0x
    "blockHash": "0x534cb7d51fe6bf1594657c632fc37d3c70a3f44549e2dff9addc154e0856202b",
    "transactionHash": "0x6f7530454548773f2e9e2eab1ba8b37177d0037bfa527f0527e9827427141a57",
    "logs": [],
    "blockNumber": 79129122,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "daac9cba34dfabe5953ff704314717f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__KSLPKORCKDAIYield_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__KSLPYield_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ksdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"data\",\"type\":\"bool\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"klayswapBridge\",\"outputs\":[{\"internalType\":\"contract IKlaySwapBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksd\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksp\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"toValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"stake(uint256)\":{\"params\":{\"tokenAmount\":\"Amount of token to stake.\"}},\"unstake(uint256)\":{\"params\":{\"tokenAmount\":\"Amount of token to unstake.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyProfit()\":{\"notice\":\"Convert the generated reward to ksd and distribute it to the beneficiaries.\"},\"expectedApr()\":{\"notice\":\"expected apr of this yield\"},\"stake(uint256)\":{\"notice\":\"stake token to this contract\"},\"unstake(uint256)\":{\"notice\":\"unstake token from this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol\":\"KSLPKORCKDAIYield\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../../yield/KSLPYield.sol\\\";\\n\\ncontract KSLPKORCKDAIYield is KSLPYield {\\n    function __KSLPKORCKDAIYield_init() public initializer {\\n        __KSLPYield_init();\\n    }\\n}\\n\",\"keccak256\":\"0xc784cf109faecc84a69549c2dd78fb9f0e969c2271e517af455b7f438c5a78af\",\"license\":\"MIT\"},\"contracts/interface/IKlaySwapBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./klayswap/IKlaytnExchangeImpl.sol\\\";\\nimport \\\"./klayswap/IKlaytnFactoryImpl.sol\\\";\\nimport \\\"./klayswap/IKlaySwapSupporterExtended.sol\\\";\\n\\n/// @title Interaction contract with klayswap.\\n/// @notice Use exchange functions in klayswap.\\ninterface IKlaySwapBridge {\\n    /// @notice Get pool(exchange) address from tokens.\\n    function tokenToPool(address tokenA, address tokenB) external view returns (address);\\n\\n    /// @notice Exchange klay for another token.\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    /// @notice Exchange tokenA for tokenB.\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    /// @notice Exchange klay for another token.\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    /// @notice Exchange tokenA for tokenB.\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1bde114f35291d568ed1348d316afb44285383f085006c23c68431fc9cccedc6\",\"license\":\"MIT\"},\"contracts/interface/IYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IYield {\\n    event Stake(address from, uint256 amount);\\n    event Unstake(address from, uint256 amount);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalAmount() external view returns (uint256);\\n\\n    /// @notice expected apr of this yield\\n    function expectedApr() external view returns (uint256);\\n\\n    /// @notice add klay to cn node\\n    function stake(uint256 tokenAmount) external;\\n\\n    /// @notice remove klay from cn node\\n    /// @dev pending 7 days\\n    function unstake(uint256 tokenAmount) external;\\n\\n    /// @notice Convert the generated reward(klay) to ksd and distribute it to the beneficiaries\\n    function applyProfit() external returns (uint256 ksdAmount);\\n}\\n\",\"keccak256\":\"0xfd3ed9ddce1288a3b4b1d96d9be160b2a53e3750f3e5dfc5bc381af00f4deaac\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\n\\ninterface IKIP7Detailed is IKIP7 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb19fcc63818f59c23defe41b45aa9235cd43a373d97fe222fc939ad3f0f697c9\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaySwapSupporterExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlaySwapSupporterExtended {\\n    function _version() external pure returns (string memory);\\n\\n    // sklay \\ub9cc\\ud07c unstaking\\n    function _estimateKlayFromDelegation(uint256 sklay) external view returns (uint256);\\n\\n    // klay \\ub9cc\\ud07c staking\\n    function _estimateSKlayFromDelegation(uint256 klay) external view returns (uint256);\\n\\n    // klay => sklay swap\\n    function _estimateKlayFromSwap(uint256 sklay) external view returns (uint256);\\n\\n    // sklay => klay swap\\n    function _estimateSKlayFromSwap(uint256 klay) external view returns (uint256);\\n\\n    // sklay \\ub9cc\\ud07c addLiquidity \\ud588\\uc744\\ub54c \\ud544\\uc694\\ud55c klay\\n    function _estimateKlayFromLiquidity(\\n        uint256 sklay,\\n        uint256 swapKlay,\\n        uint256 swapSKlay\\n    ) external view returns (uint256);\\n\\n    // klay \\ub9cc\\ud07c addLiquidity \\ud588\\uc744\\ub54c \\ud544\\uc694\\ud55c sklay\\n    function _estimateSKlayFromLiquidity(uint256 klay) external view returns (uint256);\\n\\n    // (klay, sklay) \\ub9cc\\ud07c addLiquidity \\ud588\\uc744\\ub54c \\uc608\\uc0c1\\n    function _estimateAddLiquidity(uint256 klay, uint256 sklay)\\n        external\\n        view\\n        returns (\\n            bool res,\\n            uint256 estimatedLP,\\n            uint256 estimatedKlay,\\n            uint256 estimatedSKlay\\n        );\\n\\n    function _estimateLPFromKlay(uint256 amount) external view returns (uint256 lp);\\n\\n    function _estimateKlayFromLP(uint256 amount) external view returns (uint256 klay);\\n\\n    function _estimateKlayByQuickWithdraw(uint256 amount)\\n        external\\n        view\\n        returns (\\n            uint256 klay,\\n            uint256 sklay,\\n            uint256 klayFromSwap,\\n            uint256 totalReturn\\n        );\\n\\n    function _calc(uint256 klay)\\n        external\\n        view\\n        returns (\\n            bool find,\\n            uint256 liquidityKlay,\\n            uint256 delegationKlay,\\n            uint256 swapKlay,\\n            uint256 totalSKlay\\n        );\\n\\n    function _calcKlayForDelegation(\\n        uint256 klay,\\n        uint256 klayForSwap,\\n        uint256 sklayBySwap\\n    ) external view returns (uint256);\\n\\n    function _getPoolRate() external view returns (uint256 delegationPoolRate, uint256 swapPoolRate);\\n\\n    function _comparePoolRate() external view returns (bool);\\n\\n    function _getUserStat(address user)\\n        external\\n        view\\n        returns (\\n            address wallet,\\n            uint256 lp,\\n            uint256 klay,\\n            uint256 ksp,\\n            uint256 lastClaimedIndex,\\n            uint256 historyIndex,\\n            uint256 rewardKSPSum,\\n            uint256 lastKSPIndex\\n        );\\n\\n    function addLiquidity(uint256 swapPoolRate) external payable;\\n\\n    // klay \\ub2e8\\uc704\\n    // lp \\uc218\\ub7c9 \\uacc4\\uc0b0\\ud574\\ub0b4\\uba74\\uc11c \\uc18c\\ub7c9 \\ucc28\\uc774\\ub0a0 \\uc218 \\uc788\\ub2e4.\\n    // lp 1 wei \\ub354 \\ubc1b\\ub294\\ub2e4\\n\\n    // function removeLiquidity(uint amount, bool quick, uint swapPoolRate, uint minTotalReturn) external;\\n    function removeLiquidity(\\n        address user,\\n        uint256 amount,\\n        bool quick,\\n        uint256 swapPoolRate,\\n        uint256 minTotalReturn\\n    ) external;\\n\\n    // function claimKlay(uint hid) external;\\n    function claimKlay(address usr, uint256 hid) external;\\n\\n    function claimKSP() external;\\n\\n    function claimToken(address token) external;\\n\\n    function claimCount(address usr) external view returns (uint256);\\n\\n    function historyCount(address usr) external view returns (uint256);\\n\\n    function history(address usr, uint256 hid)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xef31daf3cecfb3803193d7e840d4430316b5c02f369a027666d478c6bed3b63a\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnExchangeImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../kip/IKIP7Detailed.sol\\\";\\n\\ninterface IKlaytnExchange is IKIP7Detailed {\\n    function fee() external view returns (uint256);\\n\\n    function getCurrentPool() external view returns (uint256, uint256);\\n\\n    function addKctLiquidity(uint256 amountA, uint256 amountB) external;\\n\\n    function estimatePos(address token, uint256 amount) external view returns (uint256);\\n\\n    function estimateNeg(address token, uint256 amount) external view returns (uint256);\\n\\n    function addKlayLiquidity(uint256 amount) external payable;\\n\\n    function tokenA() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function removeLiquidity(uint256 amount) external;\\n\\n    function claimReward() external;\\n\\n    function updateMiningIndex() external;\\n\\n    function changeMiningRate(uint256 _mining) external;\\n}\\n\",\"keccak256\":\"0xf73ef854715fe5c95229cb544fb23bb98483976769eace23a24a9b841c4cbe44\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnFactoryImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlaytnFactory {\\n    function tokenToPool(address tokenA, address tokenB) external view returns (address);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function getPoolCount() external view returns (uint256);\\n\\n    function createKctPool(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        uint256 fee\\n    ) external;\\n\\n    function createKlayPool(\\n        address token,\\n        uint256 amount,\\n        uint256 fee\\n    ) external payable;\\n\\n    function getPoolAddress(uint256 idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1dff8b30ec20ec0060f34b4255e919823c1725a0190fc9e413dc0afa72f2b8f0\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, \\\"WadRayMath::wadMul: overflow\\\");\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::wadDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, \\\"WadRayMath::wadDiv: overflow\\\");\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    function rayCeilMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - RAY + 1) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + RAY - 1) / RAY;\\n    }\\n\\n    function rayCeilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n\\n        require(a <= (type(uint256).max - b + 1) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + b - 1) / b;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    // copy from maker dao\\n    // https://github.com/makerdao/dss/blob/6c1c780d3c8ab6e27ea63d272e0d1176b05b9871/src/jug.sol#L62\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 b\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(b, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, b)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, \\\"WadRayMath::rayToWad: overflow\\\");\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, \\\"WadRayMath::wadToRay: overflow\\\");\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xbfda078b46cc0f7958d40bf2a4d9b8c10f3405680093aa3004c2e76e515651c4\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    function add(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + uint256(y);\\n            require(y >= 0 || z <= x, \\\"Math: addition overflow\\\");\\n            require(y <= 0 || z >= x, \\\"Math: addition overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - uint256(y);\\n            require(y <= 0 || z <= x, \\\"Math: subtraction overflow\\\");\\n            require(y >= 0 || z >= x, \\\"Math: subtraction overflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = int256(x) * y;\\n            require(int256(x) >= 0, \\\"Math: multiplication overflow\\\");\\n            require(y == 0 || z / y == int256(x), \\\"Math: multiplication overflow\\\");\\n        }\\n    }\\n\\n    function mul(int256 x, uint256 y) internal pure returns (int256 z) {\\n        z = x * int256(y);\\n        require(int256(y) >= 0, \\\"Math: multiplication overflow\\\");\\n        require(x == 0 || z / x == int256(y), \\\"Math: multiplication overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    // from uniswap\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n            z = x;\\n            x = (y / x + x) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd94cce7a88a43ad7e95b468dbd59a18e62f95be8b23a1619e0b96bfc1246eae1\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/yield/KSLPYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../library/AccessControl.sol\\\";\\nimport \\\"../library/Pausable.sol\\\";\\nimport \\\"../library/WadRayMath.sol\\\";\\nimport \\\"../library/openzeppelin/contracts/utils/Math.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnExchangeImpl.sol\\\";\\nimport \\\"../interface/IKlaySwapBridge.sol\\\";\\nimport \\\"../interface/IYield.sol\\\";\\n\\nabstract contract KSLPYield is IYield, AccessControl, Pausable {\\n    IKIP7 public token;\\n    IKIP7 public ksd;\\n    IKIP7 public ksp;\\n    IKlaySwapBridge public klayswapBridge;\\n    address public yieldFactory;\\n    address public receiver;\\n\\n    bool public whiteListed;\\n    uint256 public _totalValue;\\n    uint256 public _totalAmount;\\n\\n    function __KSLPYield_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    // --- config ---\\n    function config(bytes32 what, address data) external onlyAdmin {\\n        if (what == \\\"token\\\") token = IKIP7(data);\\n        else if (what == \\\"ksd\\\") ksd = IKIP7(data);\\n        else if (what == \\\"ksp\\\") ksp = IKIP7(data);\\n        else if (what == \\\"klayswapBridge\\\") klayswapBridge = IKlaySwapBridge(data);\\n        else if (what == \\\"yieldFactory\\\") yieldFactory = data;\\n        else if (what == \\\"receiver\\\") receiver = data;\\n        else revert(\\\"KSLpYield::config:unrecognized-param\\\");\\n    }\\n\\n    function config(bytes32 what, bool data) external onlyAdmin {\\n        if (what == \\\"whiteListed\\\") {\\n            if (whiteListed && !data) {\\n                _totalValue = toValue(_totalAmount);\\n            }\\n            whiteListed = data;\\n        } else revert(\\\"KSLpYield::config:unrecognized-param\\\");\\n    }\\n\\n    function expectedApr() external view override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function toValue(uint256 tokenAmount) public view returns (uint256) {\\n        uint256 tokenTotalSupply = token.totalSupply();\\n        (uint256 poolA, uint256 poolB) = IKlaytnExchange(address(token)).getCurrentPool();\\n        uint256 k = Math.sqrt(poolA * poolB);\\n        uint256 kPerToken = (k * WadRayMath.RAY) / tokenTotalSupply;\\n        return kPerToken * tokenAmount;\\n    }\\n\\n    function toAmount(uint256 value) public view returns (uint256) {\\n        uint256 tokenTotalSupply = token.totalSupply();\\n        (uint256 poolA, uint256 poolB) = IKlaytnExchange(address(token)).getCurrentPool();\\n        uint256 k = Math.sqrt(poolA * poolB);\\n        uint256 kPerToken = (k * WadRayMath.RAY) / tokenTotalSupply;\\n        return value / kPerToken;\\n    }\\n\\n    function totalValue() external view override returns (uint256) {\\n        return _totalValue;\\n    }\\n\\n    function totalAmount() external view override returns (uint256) {\\n        uint256 surplusAmount = 0;\\n        if (toValue(_totalAmount) > _totalValue && !whiteListed) {\\n            uint256 surplusValue = toValue(_totalAmount) - _totalValue;\\n            surplusAmount = toAmount(surplusValue);\\n        }\\n        return _totalAmount - surplusAmount;\\n    }\\n\\n    // --- functions ---\\n    /// @notice stake token to this contract\\n    /// @param tokenAmount Amount of token to stake.\\n    function stake(uint256 tokenAmount) external override onlyAdmin whenNotPaused {\\n        token.transferFrom(msg.sender, address(this), tokenAmount);\\n        _totalAmount += tokenAmount;\\n        if (!whiteListed) {\\n            _totalValue += toValue(tokenAmount);\\n        }\\n        emit Stake(msg.sender, tokenAmount);\\n    }\\n\\n    /// @notice unstake token from this contract.\\n    /// @param tokenAmount Amount of token to unstake.\\n    function unstake(uint256 tokenAmount) public override onlyAdmin whenNotPaused {\\n        token.transfer(receiver, tokenAmount);\\n        _totalAmount -= tokenAmount;\\n        if (!whiteListed) {\\n            _totalValue -= toValue(tokenAmount);\\n        }\\n        emit Unstake(msg.sender, tokenAmount);\\n    }\\n\\n    /// @dev turn token into ksd\\n    function tokenToKsd(uint256 tokenAmount) internal virtual {\\n        if (tokenAmount <= 0) {\\n            return;\\n        }\\n        address tokenA = IKlaytnExchange(address(token)).tokenA();\\n        address tokenB = IKlaytnExchange(address(token)).tokenB();\\n        uint256 beforeABalance = IKIP7(tokenA).balanceOf(address(this));\\n        uint256 beforeBBalance = IKIP7(tokenB).balanceOf(address(this));\\n        IKlaytnExchange(address(token)).removeLiquidity(tokenAmount);\\n        uint256 aAmount = IKIP7(tokenA).balanceOf(address(this)) - beforeABalance;\\n        uint256 bAmount = IKIP7(tokenB).balanceOf(address(this)) - beforeBBalance;\\n        address[] memory path = new address[](1);\\n        path[0] = address(0);\\n        if (aAmount > 0) {\\n            IKIP7(tokenA).approve(address(klayswapBridge), aAmount);\\n            klayswapBridge.exchangeKctPos(tokenA, aAmount, address(ksd), 1, path);\\n        }\\n        if (bAmount > 0) {\\n            IKIP7(tokenB).approve(address(klayswapBridge), bAmount);\\n            klayswapBridge.exchangeKctPos(tokenB, bAmount, address(ksd), 1, path);\\n        }\\n    }\\n\\n    /// @notice Convert the generated reward to ksd and distribute it to the beneficiaries.\\n    function applyProfit() external override onlyAdmin returns (uint256 ksdAmount) {\\n        IKlaytnExchange(address(token)).claimReward();\\n        uint256 kspAmount = ksp.balanceOf(address(this));\\n        if (kspAmount > 0) {\\n            address[] memory path = new address[](1);\\n            path[0] = address(0);\\n            ksp.approve(address(klayswapBridge), kspAmount);\\n            klayswapBridge.exchangeKctPos(address(ksp), kspAmount, address(ksd), 1, path);\\n        }\\n\\n        uint256 tokenAmount = 0;\\n        if (toValue(_totalAmount) > _totalValue && !whiteListed) {\\n            uint256 surplusValue = toValue(_totalAmount) - _totalValue;\\n            tokenAmount = toAmount(surplusValue);\\n        }\\n\\n        if (tokenAmount > 0) {\\n            _totalAmount -= tokenAmount;\\n            tokenToKsd(tokenAmount);\\n        }\\n\\n        ksdAmount = ksd.balanceOf(address(this));\\n        ksd.approve(yieldFactory, ksdAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x6f7f0b48fe89fc8c9e9292d72bf7370d0e1bb552611ebf49568783705bec44ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f3f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638456cb591161010f578063d4c3eea0116100a2578063f648fc0d11610071578063f648fc0d146103c5578063f7260d3e146103d8578063fc0c546a146103eb578063fe6dacf614610403576101e5565b8063d4c3eea014610390578063d547741f14610398578063df63c8b6146103ab578063f2fde38b146103b2576101e5565b8063a694fc3a116100de578063a694fc3a1461034f578063a6d5f10314610362578063cf712f6f14610375578063d366f3b91461037d576101e5565b80638456cb59146103195780639082d0ed1461032157806391d1485414610334578063a217fddf14610347576101e5565b80633bbeaab5116101875780634c41dd96116101565780634c41dd96146102d557806351effa6b146102e85780635c975abb146102fb57806370dc57bd14610306576101e5565b80633bbeaab5146102975780633f4ba83a146102a057806343038ff3146102a857806344c47561146102b1576101e5565b80632e17de78116101c35780632e17de78146102545780632ef7440b146102695780632f2ff15d1461027157806336568abe14610284576101e5565b806316fd84f7146101ea5780631a39d8ef1461021a578063248a9ca314610230575b600080fd5b6006546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022261040b565b604051908152602001610211565b61022261023e366004611cd4565b6000908152600160208190526040909120015490565b610267610262366004611cd4565b610479565b005b6102676105ca565b61026761027f366004611cec565b610648565b610267610292366004611cec565b610674565b61022260095481565b6102676106f2565b61022260085481565b6007546102c590600160a01b900460ff1681565b6040519015158152602001610211565b6102226102e3366004611cd4565b610789565b6102676102f6366004611d1b565b6108f1565b60025460ff166102c5565b6005546101fd906001600160a01b031681565b6102676109b4565b6004546101fd906001600160a01b031681565b6102c5610342366004611cec565b610a28565b610222600081565b61026761035d366004611cd4565b610a53565b6003546101fd906001600160a01b031681565b610222610b95565b61026761038b366004611cec565b610f73565b600854610222565b6102676103a6366004611cec565b6110b9565b6001610222565b6102676103c0366004611c79565b6110e0565b6102226103d3366004611cd4565b611116565b6007546101fd906001600160a01b031681565b6002546101fd9061010090046001600160a01b031681565b61026761126e565b60008060009050600854610420600954611116565b1180156104375750600754600160a01b900460ff16155b1561046557600060085461044c600954611116565b6104569190611eb9565b905061046181610789565b9150505b806009546104739190611eb9565b91505090565b61048b6430b236b4b760d91b336112d7565b60025460ff16156104b75760405162461bcd60e51b81526004016104ae90611dea565b60405180910390fd5b60025460075460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052610100909204169063a9059cbb90604401602060405180830381600087803b15801561050c57600080fd5b505af1158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190611cb8565b5080600960008282546105579190611eb9565b9091555050600754600160a01b900460ff1661058d5761057681611116565b600860008282546105879190611eb9565b90915550505b60408051338152602081018390527f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd91015b60405180910390a150565b600054610100900460ff16806105df5750303b155b806105ed575060005460ff16155b6106095760405162461bcd60e51b81526004016104ae90611e14565b600054610100900460ff1615801561062b576000805461ffff19166101011790555b61063361126e565b8015610645576000805461ff00191690555b50565b6000828152600160208190526040909120015461066581336112d7565b61066f838361133b565b505050565b6001600160a01b03811633146106e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104ae565b6106ee82826113a6565b5050565b60025460ff1661073b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104ae565b653830bab9b2b960d11b61074f81336112d7565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020016105bf565b600080600260019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190611d3f565b9050600080600260019054906101000a90046001600160a01b03166001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611d57565b909250905060006108b56108b08385611e9a565b61140d565b90506000846108d06b033b2e3c9fd0803ce800000084611e9a565b6108da9190611e7a565b90506108e68188611e7a565b979650505050505050565b6109036430b236b4b760d91b336112d7565b816a1dda1a5d19531a5cdd195960aa1b141561096057600754600160a01b900460ff168015610930575080155b1561094457610940600954611116565b6008555b6007805460ff60a01b1916600160a01b831515021790556106ee565b60405162461bcd60e51b8152602060048201526024808201527f4b534c705969656c643a3a636f6e6669673a756e7265636f676e697a65642d706044820152636172616d60e01b60648201526084016104ae565b60025460ff16156109d75760405162461bcd60e51b81526004016104ae90611dea565b653830bab9b2b960d11b6109eb81336112d7565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016105bf565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a656430b236b4b760d91b336112d7565b60025460ff1615610a885760405162461bcd60e51b81526004016104ae90611dea565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390526101009091046001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610ade57600080fd5b505af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190611cb8565b508060096000828254610b299190611e62565b9091555050600754600160a01b900460ff16610b5f57610b4881611116565b60086000828254610b599190611e62565b90915550505b60408051338152602081018390527febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a91016105bf565b6000610ba96430b236b4b760d91b336112d7565b600260019054906101000a90046001600160a01b03166001600160a01b031663b88a802f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b5050600480546040516370a0823160e01b81523092810192909252600093506001600160a01b031691506370a082319060240160206040518083038186803b158015610c5857600080fd5b505afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611d3f565b90508015610dec5760408051600180825281830190925260009160208083019080368337019050509050600081600081518110610cdd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526004805460055460405163095ea7b360e01b815290841692810192909252602482018590529091169063095ea7b390604401602060405180830381600087803b158015610d3f57600080fd5b505af1158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190611cb8565b50600554600480546003546040516352f28c1760e01b81526001600160a01b03948516946352f28c1794610db8948216938993921691600191899101611d7a565b600060405180830381600087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b50505050505b6000600854610dfc600954611116565b118015610e135750600754600160a01b900460ff16155b15610e41576000600854610e28600954611116565b610e329190611eb9565b9050610e3d81610789565b9150505b8015610e68578060096000828254610e599190611eb9565b90915550610e68905081611462565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610eab57600080fd5b505afa158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee39190611d3f565b60035460065460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929550169063095ea7b390604401602060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6d9190611cb8565b50505090565b610f856430b236b4b760d91b336112d7565b81643a37b5b2b760d91b1415610fba5760028054610100600160a81b0319166101006001600160a01b038416021790556106ee565b81621adcd960ea1b1415610fe857600380546001600160a01b0319166001600160a01b0383161790556106ee565b816206b73760ec1b141561101657600480546001600160a01b0319166001600160a01b0383161790556106ee565b816d6b6c61797377617042726964676560901b141561104f57600580546001600160a01b0319166001600160a01b0383161790556106ee565b816b7969656c64466163746f727960a01b141561108657600680546001600160a01b0319166001600160a01b0383161790556106ee565b81673932b1b2b4bb32b960c11b141561096057600780546001600160a01b0319166001600160a01b0383161790556106ee565b600082815260016020819052604090912001546110d681336112d7565b61066f83836113a6565b6110f26437bbb732b960d91b336112d7565b6111046437bbb732b960d91b8261133b565b6106456437bbb732b960d91b336113a6565b600080600260019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116757600080fd5b505afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190611d3f565b9050600080600260019054906101000a90046001600160a01b03166001600160a01b0316631a595f656040518163ffffffff1660e01b8152600401604080518083038186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190611d57565b9092509050600061123d6108b08385611e9a565b90506000846112586b033b2e3c9fd0803ce800000084611e9a565b6112629190611e7a565b90506108e68782611e9a565b600054610100900460ff16806112835750303b155b80611291575060005460ff16155b6112ad5760405162461bcd60e51b81526004016104ae90611e14565b600054610100900460ff161580156112cf576000805461ffff19166101011790555b610633611a51565b6112e18282610a28565b6106ee5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016104ae565b6113458282610a28565b6106ee5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6113b08282610a28565b156106ee5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b80600061141b600283611e7a565b611426906001611e62565b90505b8181101561145c579050806002816114418186611e7a565b61144b9190611e62565b6114559190611e7a565b9050611429565b50919050565b6000811161146f57610645565b6000600260019054906101000a90046001600160a01b03166001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bf57600080fd5b505afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f79190611c9c565b90506000600260019054906101000a90046001600160a01b03166001600160a01b0316635f64b55b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190611c9c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe9190611d3f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561164357600080fd5b505afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b9190611d3f565b600254604051639c8f9f2360e01b81526004810188905291925061010090046001600160a01b031690639c8f9f2390602401600060405180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508491506001600160a01b038716906370a082319060240160206040518083038186803b15801561172357600080fd5b505afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b9190611d3f565b6117659190611eb9565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038716906370a082319060240160206040518083038186803b1580156117ac57600080fd5b505afa1580156117c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e49190611d3f565b6117ee9190611eb9565b604080516001808252818301909252919250600091906020808301908036833701905050905060008160008151811061183757634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152821561194b5760055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529088169063095ea7b390604401602060405180830381600087803b1580156118a357600080fd5b505af11580156118b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118db9190611cb8565b506005546003546040516352f28c1760e01b81526001600160a01b03928316926352f28c1792611918928c92899216906001908890600401611d7a565b600060405180830381600087803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b505050505b8115611a475760055460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529087169063095ea7b390604401602060405180830381600087803b15801561199f57600080fd5b505af11580156119b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d79190611cb8565b506005546003546040516352f28c1760e01b81526001600160a01b03928316926352f28c1792611a14928b92889216906001908890600401611d7a565b600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050505b5050505050505050565b600054610100900460ff1680611a665750303b155b80611a74575060005460ff16155b611a905760405162461bcd60e51b81526004016104ae90611e14565b600054610100900460ff16158015611ab2576000805461ffff19166101011790555b611aba611ae8565b611ad5653830bab9b2b960d11b6437bbb732b960d91b611b51565b610633653830bab9b2b960d11b33611b9e565b600054610100900460ff1680611afd5750303b155b80611b0b575060005460ff16155b611b275760405162461bcd60e51b81526004016104ae90611e14565b600054610100900460ff16158015611b49576000805461ffff19166101011790555b610633611ba8565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6106ee828261133b565b600054610100900460ff1680611bbd5750303b155b80611bcb575060005460ff16155b611be75760405162461bcd60e51b81526004016104ae90611e14565b600054610100900460ff16158015611c09576000805461ffff19166101011790555b611c1b6437bbb732b960d91b33611b9e565b611c356430b236b4b760d91b6437bbb732b960d91b611b51565b611c526737b832b930ba37b960c11b6437bbb732b960d91b611b51565b611c646430b236b4b760d91b33611b9e565b6106336737b832b930ba37b960c11b33611b9e565b600060208284031215611c8a578081fd5b8135611c9581611ee6565b9392505050565b600060208284031215611cad578081fd5b8151611c9581611ee6565b600060208284031215611cc9578081fd5b8151611c9581611efb565b600060208284031215611ce5578081fd5b5035919050565b60008060408385031215611cfe578081fd5b823591506020830135611d1081611ee6565b809150509250929050565b60008060408385031215611d2d578182fd5b823591506020830135611d1081611efb565b600060208284031215611d50578081fd5b5051919050565b60008060408385031215611d69578182fd5b505080516020909101519092909150565b600060a0820160018060a01b03808916845260208881860152818816604086015286606086015260a0608086015282865180855260c0870191508288019450855b81811015611dd9578551851683529483019491830191600101611dbb565b50909b9a5050505050505050505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115611e7557611e75611ed0565b500190565b600082611e9557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611eb457611eb4611ed0565b500290565b600082821015611ecb57611ecb611ed0565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461064557600080fd5b801515811461064557600080fdfea26469706673582212204868d2ca7c940347a55cdb4a0da9ec2a56d3d64188570686b3f334d6ee093f6b64736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "stake(uint256)": {
        "params": {
          "tokenAmount": "Amount of token to stake."
        }
      },
      "unstake(uint256)": {
        "params": {
          "tokenAmount": "Amount of token to unstake."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyProfit()": {
        "notice": "Convert the generated reward to ksd and distribute it to the beneficiaries."
      },
      "expectedApr()": {
        "notice": "expected apr of this yield"
      },
      "stake(uint256)": {
        "notice": "stake token to this contract"
      },
      "unstake(uint256)": {
        "notice": "unstake token from this contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23220,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23223,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20166,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)"
      },
      {
        "astId": 20556,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 40063,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "token",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 40066,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "ksd",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 40069,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "ksp",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 40072,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "klayswapBridge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IKlaySwapBridge)8047"
      },
      {
        "astId": 40074,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "yieldFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 40076,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "receiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 40078,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "whiteListed",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 40080,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "_totalValue",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 40082,
        "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
        "label": "_totalAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IKIP7)9881": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKlaySwapBridge)8047": {
        "encoding": "inplace",
        "label": "contract IKlaySwapBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)20161_storage"
      },
      "t_struct(RoleData)20161_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 20158,
            "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20160,
            "contract": "contracts/collateral/KSLPKORCKDAI/KSLPKORCKDAIYield.sol:KSLPKORCKDAIYield",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}