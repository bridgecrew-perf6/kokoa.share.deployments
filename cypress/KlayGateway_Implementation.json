{
  "address": "0xFF12b921D493B7407a3b182f35FD5f23d6d1E46a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KLAY_COLLATERAL_TYPE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__KlayGateway_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aklay",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bKlay",
      "outputs": [
        {
          "internalType": "contract IBKlay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "claimKlay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAllow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdGateway",
      "outputs": [
        {
          "internalType": "contract IKSDGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ledger",
      "outputs": [
        {
          "internalType": "contract ILedger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "repayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "repayAllAndUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "repayAndUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bool_",
          "type": "bool"
        }
      ],
      "name": "setBKlayAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skokoa",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skokoaLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeAKlay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aklayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ksdAmount",
          "type": "uint256"
        }
      ],
      "name": "stakeAKlayAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeAndBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeInBKlay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f5188e80659d09a83d6d5b76a34f4397b39624648b9d3ac073bb95208a5c140",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0xFF12b921D493B7407a3b182f35FD5f23d6d1E46a",
    "transactionIndex": 19,
    "gasUsed": "2264879",
    "logsBloom": "0x
    "blockHash": "0x9ffc54a0cea8f2c84e655655b15da28d7e375d9e5947a2576c3799cbc51a25d4",
    "transactionHash": "0x0f5188e80659d09a83d6d5b76a34f4397b39624648b9d3ac073bb95208a5c140",
    "logs": [],
    "blockNumber": 79128515,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "daac9cba34dfabe5953ff704314717f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KLAY_COLLATERAL_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__KlayGateway_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aklay\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bKlay\",\"outputs\":[{\"internalType\":\"contract IBKlay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"claimKlay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdGateway\",\"outputs\":[{\"internalType\":\"contract IKSDGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"contract ILedger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"repayAllAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"repayAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setBKlayAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skokoa\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skokoaLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeAKlay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aklayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ksdAmount\",\"type\":\"uint256\"}],\"name\":\"stakeAKlayAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeAndBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeInBKlay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256,uint256)\":{\"details\":\"Currently, the only collateral is klay.Ledger decides whether or not to verify the stability of a secured loan or not.Loan history recorded on ledger.\",\"params\":{\"collateralAmount\":\"Amount of collateral to be collateralized.\",\"loanAmount\":\"Amount of ksd to borrow (loan).\"}},\"claimKlay(address)\":{\"details\":\"It takes 7 days for unstaked klay to be returned.If you do not claim by 14 days after unstaking, it will be automatically staking again.\",\"params\":{\"usr\":\"Who will execute the claim.\"}},\"repay(uint256,uint256)\":{\"details\":\"Record on ledge.\",\"params\":{\"collateralAmount\":\"Amount of klay that was entrusted as collateral.\",\"loanAmount\":\"Amount of ksd borrowed (loan).\"}},\"repayAll(uint256)\":{\"details\":\"Record on ledge.\",\"params\":{\"collateralAmount\":\"Amount of klay that was entrusted as collateral.\"}},\"repayAllAndUnstake(uint256)\":{\"details\":\"Unstake is executed after repay is executed.The claim function must be called to return the unstaked klay.\",\"params\":{\"collateralAmount\":\"Amount of klay that was entrusted as collateral.\"}},\"repayAndUnstake(uint256,uint256)\":{\"details\":\"Unstake is executed after repay is executed.The claim function must be called to return the unstaked klay.\",\"params\":{\"collateralAmount\":\"Amount of klay that was entrusted as collateral.\",\"loanAmount\":\"Amount of ksd borrowed (loan).\"}},\"stake()\":{\"details\":\"As much as the received klay, bklay is mint and treated as collateral.Payable.\"},\"stakeAKlay(uint256)\":{\"details\":\"As much as the received aklay, bklay is mint and treated as collateral.Payable.\",\"params\":{\"amount\":\"amount of aklay to stake\"}},\"stakeAKlayAndBorrow(uint256,uint256)\":{\"params\":{\"aklayAmount\":\"Amount of aklay to stake.\",\"ksdAmount\":\"Amount of ksd to borrow (loan).\"}},\"stakeAndBorrow(uint256)\":{\"params\":{\"amount\":\"Amount of ksd to borrow (loan).\"}},\"unstake(uint256)\":{\"details\":\"Record on ledge.Unstaking is carried out in the bklay contract.\",\"params\":{\"amount\":\"Amount of klay you want to return.\"}},\"unstakeInBKlay(uint256)\":{\"details\":\"Record on ledge.Unstaking is carried out in the bklay contract.\",\"params\":{\"amount\":\"Amount of klay you want to return.\"}}},\"title\":\"Klay input/output contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256,uint256)\":{\"notice\":\"Loan ksd with klay as collateral.\"},\"claimKlay(address)\":{\"notice\":\"Return a returnable klay to the user.\"},\"config(bytes32,address)\":{\"notice\":\"Initialize interface variable.\"},\"config(bytes32,uint256)\":{\"notice\":\"Initialize interface variable.\"},\"repay(uint256,uint256)\":{\"notice\":\"Return ksd and unlock collateral (klay).\"},\"repayAll(uint256)\":{\"notice\":\"Return ksd and unlock collateral (klay).\"},\"repayAllAndUnstake(uint256)\":{\"notice\":\"Execute repay and unstake functions at the same time.\"},\"repayAndUnstake(uint256,uint256)\":{\"notice\":\"Execute repay and unstake functions at the same time.\"},\"setBKlayAccess(address,bool)\":{\"notice\":\"access of withdaw BKlay directly\"},\"stake()\":{\"notice\":\"Send klay to bklay contract, record on ledge.\"},\"stakeAKlay(uint256)\":{\"notice\":\"Send aklay to bklay contract, record on ledge.\"},\"stakeAKlayAndBorrow(uint256,uint256)\":{\"notice\":\"Execute stake and borrow functions at the same time.\"},\"stakeAndBorrow(uint256)\":{\"notice\":\"Execute stake and borrow functions at the same time.\"},\"unstake(uint256)\":{\"notice\":\"Execute unstake to get the entrusted klay back.\"},\"unstakeInBKlay(uint256)\":{\"notice\":\"Execute unstake to get BKlay back.\"}},\"notice\":\"Functions to be called by user\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/gateway/KlayGateway.sol\":\"KlayGateway\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IBKlay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./kip/IKIP7Extended.sol\\\";\\n\\n/// @title Bonded Klay Contract\\n/// @notice Mint/Burn logic of Bklay via klay\\ninterface IBKlay is IKIP7Extended {\\n    event UnstakeKlay(address from, address to, uint256 amount);\\n    event WithdrawToken(address from, address to, uint256 amount);\\n    event WithdrawKlay(address from, address to, uint256 amount);\\n    event ClaimKlay(address usr, uint256 amount);\\n\\n    function claimCount(address user) external view returns (uint256);\\n\\n    function unstakeRecordCount(address user) external view returns (uint256);\\n\\n    function unstakeRecord(address user, uint256 index)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function stakeKlay(address to) external payable;\\n\\n    function stakeAKlay(address to, uint256 amount) external;\\n\\n    function unstakeKlay(address to, uint256 amount) external;\\n\\n    function withdrawToken(address to, uint256 amount) external;\\n\\n    function withdrawKlay(address to, uint256 amount) external;\\n\\n    /// @notice Unstaking status for all yields.\\n    function pendingKlay(address usr) external view returns (uint256 completed, uint256 yet);\\n\\n    /// @notice Claim on every yield, send claimed klay to user.\\n    function claimKlay(address usr) external;\\n}\\n\",\"keccak256\":\"0x7dfee04969033816255389bd4edaaf00cc084eb6f446ae91fdce62d1ed87e6a2\",\"license\":\"MIT\"},\"contracts/interface/IKSDGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title KSD input/output contract\\n/// @notice A collection of functions related to KSD move\\ninterface IKSDGateway {\\n    /// @notice ksd redemption & ksd burn\\n    function join(address usr, uint256 wad) external;\\n\\n    /// @notice ksd mint & borrow ksd (loan)\\n    function exit(address usr, uint256 wad) external;\\n\\n    /// @notice Ksd redemption & ksd burn.\\n    /// @dev Acting on behalf.\\n    function joinFrom(\\n        address ksdOwner,\\n        address usr,\\n        uint256 wad\\n    ) external;\\n\\n    /// @notice Ksd mint & borrow ksd (loan)\\n    /// @dev Acting on behalf (Transaction through ksd owner)\\n    function exitFrom(\\n        address ksdOwner,\\n        address usr,\\n        uint256 wad\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb68a88a40ccb45d304b0fd683f9e4e46407dea0d236115e145c935ebf1cf0d30\",\"license\":\"MIT\"},\"contracts/interface/IKlayGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title Klay input/output contract\\n/// @notice Functions to be called by user\\ninterface IKlayGateway {\\n    /// @notice access of withdaw BKlay directly\\n    function setBKlayAccess(address account, bool bool_) external;\\n\\n    /// @notice Send klay to bklay contract, record on ledge.\\n    function stake() external payable;\\n\\n    /// @notice Send aklay to bklay contract, record on ledge.\\n    function stakeAKlay(uint256 amount) external;\\n\\n    /// @notice Loan ksd with klay as collateral.\\n    function borrow(uint256 collateralAmount, uint256 loanAmount) external;\\n\\n    /// @notice Execute stake and borrow functions at the same time.\\n    function stakeAndBorrow(uint256 amount) external payable;\\n\\n    /// @notice Execute stake and borrow functions at the same time.\\n    function stakeAKlayAndBorrow(uint256 aklayAmount, uint256 ksdAmount) external;\\n\\n    /// @notice Execute unstake to get the entrusted klay back.\\n    function unstake(uint256 amount) external;\\n\\n    /// @notice Execute unstake to get BKlay back.\\n    function unstakeInBKlay(uint256 amount) external;\\n\\n    /// @notice Return a returnable klay to the user.\\n    function claimKlay(address usr) external;\\n\\n    /// @notice Return ksd and unlock collateral (klay)\\n    function repay(uint256 collateralAmount, uint256 loanAmount) external;\\n\\n    /// @notice Return ksd and unlock collateral (klay)\\n    function repayAll(uint256 collateralAmount) external;\\n\\n    /// @notice Execute repay and unstake functions at the same time.\\n    function repayAndUnstake(uint256 collateralAmount, uint256 loanAmount) external;\\n\\n    /// @notice Execute repay and unstake functions at the same time.\\n    function repayAllAndUnstake(uint256 collateralAmount) external;\\n}\\n\",\"keccak256\":\"0x15246e5c4fc645e869be9ff8eab82dcece16b23f970517dd6f88ccfe8e87da14\",\"license\":\"MIT\"},\"contracts/interface/ILedger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ILedger {\\n    // --- Events ---\\n    event CollateralChanged(bytes32 collateralType, address usr, int256 amount);\\n    event KSDChanged(address usr, int256 amount);\\n    event LoanChanged(bytes32 collateralType, address debtor, address collateralVault, address ksdVault, int256 collateralAmount, int256 loanAmount);\\n    event AccountChanged(bytes32 collateralType, address vault, uint256 lockedCollateral, uint256 loan);\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\uc900\\ub2e4.\\n    /// @notice authorize usr to manipulate msg.sender's vault\\n    function allow(address usr) external;\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\ubec7\\ub294.\\n    /// @notice Deauthorize usr from manipulating msg.sender's vault\\n    function disallow(address usr) external;\\n\\n    // --- Data view ---\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785.\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. totalLockedCollateral (\\uc804\\uccb4 locked\\ub41c \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. totalLoan (\\ubc1c\\ud589\\ub41c(\\ube4c\\ub9b0) KSD\\uc591)\\n    /// 3. rate (\\uc2dc\\uac04\\uc5d0 \\ub530\\ub77c \\uc810\\ucc28 \\uc99d\\uac00\\ud558\\uace0, accountInfo.loan \\uc5d0 \\uacf1\\ud574\\uc838\\uc11c \\uc0ac\\uc6a9\\uc790\\uac00 \\ube4c\\ub9b0 ksd\\uc758 \\uc591\\uc744 \\ub298\\ub9ac\\ub294 \\uc6a9\\ub3c4\\ub85c \\uc0ac\\uc6a9\\ub428. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (\\ub2f4\\ubcf4 \\ud0c0\\uc785\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd1d KSD)\\n    /// 6. dust (\\ud558\\ub098\\uc758 vault\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd5c\\uc800\\uc758 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Collateral Iinfo\\n    /// @param collateralType Type of collateral - initially, there's only one (Klay)\\n    /// @dev the value that it returns are\\n    /// 1. totalLockedCollateral\\n    /// 2. totalLoan\\n    /// 3. rate (It gradually increases over time and is multiplied by accountInfo.loan to increase the amount of ksd borrowed by the user.. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (Maximum KSD that can be minted from given collateral type)\\n    /// 6. dust (Minimum KSD that should be borrowed from a CDP)\\n    function collateralInfo(bytes32 collateralType)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\ub4e4 \\uc870\\ud68c\\n    /// @param collateralTypes \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785 list\\n    /// @dev collateralInfo \\uc758 \\uac12\\ub4e4\\uc744 array \\ub85c return\\n    function collateralInfos(bytes32[] calldata collateralTypes)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    /// @notice usr\\uc758 vault \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4 \\uc885\\ub958\\n    /// @param usr \\uc720\\uc800\\uc758 address\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. lockedCollateral (vault\\uc5d0 \\uc7a0\\uae34 \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. loan (vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Information of a user's vault\\n    /// @param collateralType type of collateral\\n    /// @param usr Address of the user\\n    /// @dev returns\\n    /// 1. lockedCollateral (amount of collateral locked in the user's vault)\\n    /// 2. loan (normalized amount of KSD minted from that vault)\\n    function accountInfo(bytes32 collateralType, address usr) external view returns (uint256, uint256);\\n\\n    /// @notice This function returns the index of a user of given collateral type\\n    ///         The index\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @dev \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785\\ub9c8\\ub2e4 cdp \\uc5f0 \\uc720\\uc800\\ub97c tracking \\ud558\\uae30 \\uc704\\ud55c \\uac83\\uc73c\\ub85c, \\uac01 \\uc720\\uc800\\uac00 \\uba87 \\ubc88\\uc9f8\\ub85c cdp\\ub97c \\uc5f4\\uc5c8\\ub294\\uc9c0\\ub97c \\uae30\\ub85d.\\n    /// @dev This function is designed to track the list of users who have opened a CDP (for each collateral type)\\n    ///       Since CDPs are never deleted once created, this index should not be update at any circumstances\\n    function accountIndex(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice access address of an account by index\\n    /// @param collateralType type of collateral\\n    /// @param index index of user\\n    /// @dev index \\ubc88\\uc9f8\\ub85c \\ub4e4\\uc5b4\\uc628 \\uc720\\uc800\\uc758 \\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\n    /// @dev returns the address of {index}-th CDP opener\\n    function accountByIndex(bytes32 collateralType, uint256 index) external view returns (address);\\n\\n    /// @notice Total number of user who have opened a CDP (given collateral type) - always increasing\\n    /// @param collateralType type of collateral\\n    /// @dev \\uc9c0\\uae08\\uae4c\\uc9c0 cdp\\ub97c \\uc5f0 \\uc720\\uc800\\uc758 \\uc218\\n    function accountLength(bytes32 collateralType) external view returns (uint256);\\n\\n    /// @notice locked \\ub418\\uc9c0 \\uc54a\\uc740 \\ub2f4\\ubcf4\\ubb3c\\uc758 \\uc591. \\ub2e8, \\uc2e4\\uc81c \\ub2f4\\ubcf4\\ubb3c\\uc740 gateway \\ucee8\\ud2b8\\ub809\\ud2b8\\uac00 \\uad00\\ub9ac\\ud558\\uace0 \\uc788\\uc74c.\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @notice The amount of collateral that are not locked.\\n    function token(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice \\ube4c\\ub9ac\\uac70\\ub098, ksdGateway\\ub97c \\ud1b5\\ud574\\uc11c \\ub4e4\\uc5b4\\uc628 ksd\\uc758 \\uc591.\\n    /// @param usr address of user\\n    /// @notice The amount of KSD lent to, or depositted by (through KSDGateway) the {usr}\\n    function ksd(address usr) external view returns (uint256);\\n\\n    /// @notice total KSD Issued [rad]\\n    function totalIssued() external view returns (uint256);\\n\\n    /// @notice Total Unbacked KSD [rad]\\n    function vice() external view returns (uint256);\\n\\n    /// @notice Total Debt Ceiling [rad]\\n    function line() external view returns (uint256);\\n\\n    /// @notice unbacked KSD [rad]\\n    function sin(address usr) external view returns (uint256);\\n\\n    /// @notice initialize collateral\\n    /// @param collateralType type of collateral to initialize.\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance\\n    function init(bytes32 collateralType) external;\\n\\n    /// @notice config something\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc640 \\uc624\\ub77c\\ud074 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance and oracle\\n    function config(\\n        bytes32 collateralType,\\n        bytes32 what,\\n        uint256 data\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0a8\\ub2e4.\\n    ///          \\uc7a5\\ubd80\\uc758 \\uae30\\ub85d\\ub41c token\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\uae30\\ud0a4 \\ub54c\\ubb38\\uc5d0 \\ubb34\\uc870\\uac74 \\ud5c8\\uac00\\ub41c contract\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    /// (eng)\\n    /// @notice Increase the amount of 'unlocked collateral'\\n    ///          (which means that the token is deposited into CDP but not yet considered as 'locked' as collateral)\\n    ///         This function changes the amount of 'unlocked collateral' of the CDP, so it should only be called by authorized contracts.\\n    function addCollateral(\\n        bytes32 collateralType,\\n        address usr,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc744 \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function.\\n    function sendCollateral(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        uint256 amoount\\n    ) external;\\n\\n    /// @notice ksd\\ub97c \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function. (\\uc2e4\\uc81c ksd token\\uc744 \\ubcf4\\ub0b4\\ub294 \\uac83\\uc774 \\uc544\\ub2c8\\ub77c, \\uc7a5\\ubd80 \\uc0c1\\uc758 \\uae30\\ub85d\\ub9cc \\ubc14\\ub01c)\\n    function sendKsd(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice token, ksd \\uc591\\uc744 \\ud1b5\\ud574\\uc11c vault\\uc758 \\uac12\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0b4.\\n    /// @param collateralType type of collateral\\n    /// @param debtor owner of vault\\n    /// @param collateralVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 token\\uc758 owner) \\ub2f4\\ubcf4\\ubb3c\\uc744 \\uac00\\uc838\\uc624\\uac70\\ub098 vault\\uc5d0\\uc11c unlock \\uc2dc\\ud0a8 \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub123\\uc744 \\uc8fc\\uc18c\\n    /// @param ksdVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 ksd\\uc758 owner) ksd\\ub97c vault\\uc5d0 \\ub123\\uc5b4\\uc8fc\\uac70\\ub098, vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd\\ub97c \\ub123\\uc5b4\\uc904 \\uacf3\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev vault\\uc5d0 ksd\\ub97c \\uac1a\\uac70\\ub098/\\ube4c\\ub9ac\\uac70\\ub098, \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub354 lock \\uc2dc\\ud0a4\\uac70\\ub098/\\ube7c\\uac70\\ub098\\n    /// \\ub2e8, vault\\ub294 \\ud56d\\uc0c1 safe \\ud574\\uc57c\\ud558\\uace0, dust \\uc774\\uc0c1\\uc758 ksd\\ub97c \\uc720\\uc9c0\\ud574\\uc57c \\ud55c\\ub2e4.\\n    /// \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4. \\uc608\\ub97c\\ub4e4\\uc5b4, \\ud5c8\\ub77d\\ubc1b\\uc9c0 \\uc54a\\uc740 \\uc0ac\\ub78c\\uc774 locked\\ub418\\uc9c0 \\uc54a\\uc740 \\ub0a8\\uc758 collateral\\ub97c \\uc790\\uc2e0\\uc758 vault\\ub85c lock \\uc2dc\\ud0a4\\uc9c0 \\ubabb\\ud574\\uc57c \\ud55c\\ub2e4.\\n    function actionLoan(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice vault\\uc5d0 \\uc7a0\\uae34 collateral\\uc591\\uc774\\ub098 ksd \\ubd80\\ucc44\\ub97c \\uc774\\ub3d9\\uc2dc\\ud0a8\\ub2e4.\\n    /// @param collateralType type of collateral\\n    /// @param src address of vault (accountInfo)\\n    /// @param dst address of vault (accountInfo)\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4.\\n    function fork(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\ubab0\\uc218 (confiscation)\\n    /// @param collateralType type of collateral\\n    /// @param debtor \\uccad\\uc0b0\\ub420 vault \\uc8fc\\uc18c\\n    /// @param collateralVault vault\\uc5d0\\uc11c locked\\ub41c \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ubab0\\uc218\\ud574\\uac08 \\uc8fc\\uccb4. (\\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 \\ud56d\\uc0c1 auctionHouse. auction\\uc5d0\\uc11c \\ud314\\uc544\\uc57c \\ud558\\uae30 \\ub54c\\ubb38)\\n    /// @param ksdVault vault\\uc5d0\\uc11c \\ube4c\\ub824\\uac04 ksd\\ub294 \\ub2f4\\ubcf4\\ubb3c\\uc774 auction\\uc5d0 \\ub4e4\\uc5b4\\uac04 \\uc21c\\uac04 backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\uc774\\uae30 \\ub54c\\ubb38\\uc5d0, \\uc774\\uac83\\uc744 \\ub9e1\\uc544\\uc904 \\uc8fc\\uccb4\\uac00 \\ud544\\uc694. \\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 minusBank\\uac00 \\ub9e1\\uc544\\uc900\\ub2e4.\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev liquidator\\uc758 liquidate\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub9bc\\n    function grab(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\uc0c1\\uc1c4\\ud558\\ub294 function. msg.sender\\uc758 ksd\\ub97c \\uc18c\\ubaa8\\ud55c\\ub2e4.\\n    function heal(uint256 amount) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\ub9cc\\ub4e4\\uc5b4\\uc11c msg.sender\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev minusBank\\uc5d0\\uc11c keeper\\ub4e4\\uc5d0\\uac8c incentive\\ub97c \\uc8fc\\uae30 \\uc704\\ud574\\uc11c, \\ubbf8\\ub9ac ksd\\ub97c \\ub300\\ucd9c\\ubc1b\\ub294 \\uc5ed\\ud560\\ub85c \\uc4f0\\uc778\\ub2e4.\\n    /// \\ub530\\ub77c\\uc11c, \\uc624\\uc9c1 minusBank\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function suck(\\n        address u,\\n        address v,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice stability fee\\ub97c ksdReceiver\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev StabilityFeeCollector\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function collectStabilityFee(\\n        bytes32 collateralType,\\n        address ksdReceiver,\\n        int256 rateDiff\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd665010e6fac1b9f0423339abad116c599c5ef2960fac177b2108fa68fd15b71\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\n\\ninterface IKIP7Detailed is IKIP7 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb19fcc63818f59c23defe41b45aa9235cd43a373d97fe222fc939ad3f0f697c9\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\nimport \\\"./IKIP7Detailed.sol\\\";\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7Extended is IKIP7Detailed {\\n    function mint(address usr, uint256 amount) external returns (bool);\\n\\n    function burn(address usr, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x68ea4321698aef5d82970660626d6e07ea4908b0b94bee9d6ceb2f8776c6c06b\",\"license\":\"MIT\"},\"contracts/lending/gateway/KlayGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../../library/openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"../../library/AccessControl.sol\\\";\\nimport \\\"../../interface/IKlayGateway.sol\\\";\\nimport \\\"../../interface/IKSDGateway.sol\\\";\\nimport \\\"../../interface/IBKlay.sol\\\";\\nimport \\\"../../interface/ILedger.sol\\\";\\nimport \\\"../../library/Pausable.sol\\\";\\nimport \\\"../../library/WadRayMath.sol\\\";\\n\\n/// @title Klay input/output contract\\n/// @notice Functions to be called by user\\ncontract KlayGateway is IKlayGateway, AccessControl, Pausable {\\n    using WadRayMath for uint256;\\n\\n    function __KlayGateway_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    // --- data ---\\n    bytes32 public constant KLAY_COLLATERAL_TYPE = bytes32(\\\"klay\\\"); // Collateral Type: lower-case\\n    ILedger public ledger; // ledger Engine\\n    IKSDGateway public ksdGateway;\\n    IBKlay public bKlay;\\n    IKIP7 public aklay;\\n    IKIP7 public skokoa;\\n    uint256 public skokoaLimit;\\n    mapping(address => bool) public isAllow; //unstakeInBKlay\\n\\n    // --- config ---\\n    /// @notice Initialize interface variable.\\n    function config(bytes32 what, address data) external onlyAdmin whenNotPaused {\\n        if (what == \\\"ledger\\\") ledger = ILedger(data);\\n        else if (what == \\\"ksdGateway\\\") ksdGateway = IKSDGateway(data);\\n        else if (what == \\\"bKlay\\\") bKlay = IBKlay(data);\\n        else if (what == \\\"aklay\\\") aklay = IKIP7(data);\\n        else if (what == \\\"skokoa\\\") skokoa = IKIP7(data);\\n        else revert(\\\"KlayGateway::config:unrecognized-param\\\");\\n    }\\n\\n    /// @notice Initialize interface variable.\\n    function config(bytes32 what, uint256 data) external onlyAdmin whenNotPaused {\\n        if (what == \\\"skokoaLimit\\\") skokoaLimit = data;\\n        else revert(\\\"KlayGateway::config:unrecognized-param\\\");\\n    }\\n\\n    // --- function ---\\n    function setBKlayAccess(address account, bool bool_) external override onlyAdmin whenNotPaused {\\n        isAllow[account] = bool_;\\n    }\\n\\n    /// @notice Send klay to bklay contract, record on ledge.\\n    /// @dev As much as the received klay, bklay is mint and treated as collateral.\\n    /// @dev Payable.\\n    function stake() public payable override whenNotPaused {\\n        ledger.addCollateral(KLAY_COLLATERAL_TYPE, msg.sender, SafeCast.toInt256(msg.value));\\n        bKlay.stakeKlay{value: msg.value}(address(this));\\n    }\\n\\n    /// @notice Send aklay to bklay contract, record on ledge.\\n    /// @dev As much as the received aklay, bklay is mint and treated as collateral.\\n    /// @dev Payable.\\n    /// @param amount amount of aklay to stake\\n    function stakeAKlay(uint256 amount) public override whenNotPaused {\\n        ledger.addCollateral(KLAY_COLLATERAL_TYPE, msg.sender, SafeCast.toInt256(amount));\\n        aklay.transferFrom(msg.sender, address(this), amount);\\n        aklay.approve(address(bKlay), amount);\\n        bKlay.stakeAKlay(address(this), amount);\\n    }\\n\\n    /// @notice Loan ksd with klay as collateral.\\n    /// @dev Currently, the only collateral is klay.\\n    /// @dev Ledger decides whether or not to verify the stability of a secured loan or not.\\n    /// @dev Loan history recorded on ledger.\\n    /// @param collateralAmount Amount of collateral to be collateralized.\\n    /// @param loanAmount Amount of ksd to borrow (loan).\\n    function borrow(uint256 collateralAmount, uint256 loanAmount) public override whenNotPaused {\\n        ledger.actionLoan(\\n            KLAY_COLLATERAL_TYPE,\\n            msg.sender,\\n            msg.sender,\\n            msg.sender,\\n            SafeCast.toInt256(collateralAmount),\\n            SafeCast.toInt256(loanAmount)\\n        );\\n        ksdGateway.exitFrom(msg.sender, msg.sender, loanAmount);\\n    }\\n\\n    /// @notice Execute stake and borrow functions at the same time.\\n    /// @param amount Amount of ksd to borrow (loan).\\n    function stakeAndBorrow(uint256 amount) external payable override whenNotPaused {\\n        stake();\\n        borrow(msg.value, amount);\\n    }\\n\\n    /// @notice Execute stake and borrow functions at the same time.\\n    /// @param aklayAmount Amount of aklay to stake.\\n    /// @param ksdAmount Amount of ksd to borrow (loan).\\n    function stakeAKlayAndBorrow(uint256 aklayAmount, uint256 ksdAmount) external override whenNotPaused {\\n        stakeAKlay(aklayAmount);\\n        borrow(aklayAmount, ksdAmount);\\n    }\\n\\n    /// @notice Execute unstake to get the entrusted klay back.\\n    /// @dev Record on ledge.\\n    /// @dev Unstaking is carried out in the bklay contract.\\n    /// @param amount Amount of klay you want to return.\\n    function unstake(uint256 amount) public override whenNotPaused {\\n        if (ledger.token(KLAY_COLLATERAL_TYPE, msg.sender) < amount) {\\n            repay(amount - ledger.token(KLAY_COLLATERAL_TYPE, msg.sender), 0);\\n        }\\n        ledger.addCollateral(KLAY_COLLATERAL_TYPE, msg.sender, -SafeCast.toInt256(amount));\\n        bKlay.unstakeKlay(msg.sender, amount);\\n    }\\n\\n    /// @notice Execute unstake to get BKlay back.\\n    /// @dev Record on ledge.\\n    /// @dev Unstaking is carried out in the bklay contract.\\n    /// @param amount Amount of klay you want to return.\\n    function unstakeInBKlay(uint256 amount) public override whenNotPaused {\\n        require(isAllow[msg.sender] || skokoa.balanceOf(msg.sender) >= skokoaLimit, \\\"KlayGateway:: unstakeInBKlay: invalid msg.sender\\\");\\n        if (ledger.token(KLAY_COLLATERAL_TYPE, msg.sender) < amount) {\\n            repay(amount - ledger.token(KLAY_COLLATERAL_TYPE, msg.sender), 0);\\n        }\\n        ledger.addCollateral(KLAY_COLLATERAL_TYPE, msg.sender, -SafeCast.toInt256(amount));\\n        bKlay.transfer(msg.sender, amount);\\n    }\\n\\n    /// @notice Return a returnable klay to the user.\\n    /// @dev It takes 7 days for unstaked klay to be returned.\\n    /// @dev If you do not claim by 14 days after unstaking, it will be automatically staking again.\\n    /// @param usr Who will execute the claim.\\n    function claimKlay(address usr) external override {\\n        bKlay.claimKlay(usr);\\n    }\\n\\n    /// @notice Return ksd and unlock collateral (klay).\\n    /// @dev Record on ledge.\\n    /// @param collateralAmount Amount of klay that was entrusted as collateral.\\n    /// @param loanAmount Amount of ksd borrowed (loan).\\n    function repay(uint256 collateralAmount, uint256 loanAmount) public override whenNotPaused {\\n        ksdGateway.joinFrom(msg.sender, msg.sender, loanAmount);\\n        ledger.actionLoan(\\n            KLAY_COLLATERAL_TYPE,\\n            msg.sender,\\n            msg.sender,\\n            msg.sender,\\n            -SafeCast.toInt256(collateralAmount),\\n            -SafeCast.toInt256(loanAmount)\\n        );\\n    }\\n\\n    /// @notice Return ksd and unlock collateral (klay).\\n    /// @dev Record on ledge.\\n    /// @param collateralAmount Amount of klay that was entrusted as collateral.\\n    function repayAll(uint256 collateralAmount) public override whenNotPaused {\\n        (, , uint256 rate, , , ) = ledger.collateralInfo(KLAY_COLLATERAL_TYPE);\\n        (, uint256 rawLoanAmount) = ledger.accountInfo(KLAY_COLLATERAL_TYPE, msg.sender);\\n        uint256 loanAmount = rawLoanAmount.rmul(rate);\\n        ksdGateway.joinFrom(msg.sender, msg.sender, loanAmount);\\n        ledger.actionLoan(\\n            KLAY_COLLATERAL_TYPE,\\n            msg.sender,\\n            msg.sender,\\n            msg.sender,\\n            -SafeCast.toInt256(collateralAmount),\\n            -SafeCast.toInt256(loanAmount)\\n        );\\n    }\\n\\n    /// @notice Execute repay and unstake functions at the same time.\\n    /// @dev Unstake is executed after repay is executed.\\n    /// @dev The claim function must be called to return the unstaked klay.\\n    /// @param collateralAmount Amount of klay that was entrusted as collateral.\\n    /// @param loanAmount Amount of ksd borrowed (loan).\\n    function repayAndUnstake(uint256 collateralAmount, uint256 loanAmount) external override whenNotPaused {\\n        repay(collateralAmount, loanAmount);\\n        unstake(collateralAmount);\\n    }\\n\\n    /// @notice Execute repay and unstake functions at the same time.\\n    /// @dev Unstake is executed after repay is executed.\\n    /// @dev The claim function must be called to return the unstaked klay.\\n    /// @param collateralAmount Amount of klay that was entrusted as collateral.\\n    function repayAllAndUnstake(uint256 collateralAmount) external override whenNotPaused {\\n        repayAll(collateralAmount);\\n        unstake(collateralAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xaeba85075f21581e628c16d7ede3ec62b2ac32195600854212237abdd9b62232\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, \\\"WadRayMath::wadMul: overflow\\\");\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::wadDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, \\\"WadRayMath::wadDiv: overflow\\\");\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    function rayCeilMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - RAY + 1) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + RAY - 1) / RAY;\\n    }\\n\\n    function rayCeilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n\\n        require(a <= (type(uint256).max - b + 1) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + b - 1) / b;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    // copy from maker dao\\n    // https://github.com/makerdao/dss/blob/6c1c780d3c8ab6e27ea63d272e0d1176b05b9871/src/jug.sol#L62\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 b\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(b, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, b)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, \\\"WadRayMath::rayToWad: overflow\\\");\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, \\\"WadRayMath::wadToRay: overflow\\\");\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xbfda078b46cc0f7958d40bf2a4d9b8c10f3405680093aa3004c2e76e515651c4\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612062806100206000396000f3fe6080604052600436106101f95760003560e01c80635bab28fa1161010d578063cca52a76116100a0578063df7a1cea1161006f578063df7a1cea14610588578063e0bed041146105a8578063f223fab4146105c8578063f2fde38b146105e8578063f9893c4314610608576101f9565b8063cca52a7614610508578063d366f3b914610528578063d547741f14610548578063d8aed14514610568576101f9565b806391d14854116100dc57806391d1485414610493578063a217fddf146104b3578063a3333309146104c8578063b3ad42ff146104e8576101f9565b80635bab28fa146104335780635c975abb1461045357806372f1527f1461046b5780638456cb591461047e576101f9565b80632e17de7811610190578063366804631161015f57806336680463146103a4578063375ccd1f146103c45780633a4b66f1146103d95780633f4ba83a146103e157806356397c35146103f6576101f9565b80632e17de78146103245780632f2ff15d146103445780633221be541461036457806336568abe14610384576101f9565b80631b1f24e7116101cc5780631b1f24e71461028e5780631bbe5215146102ae578063248a9ca3146102c45780632684b406146102e4576101f9565b806306405b50146101fe5780630dac8084146102205780630ecbcdab1461024e57806316e4d4b41461026e575b600080fd5b34801561020a57600080fd5b5061021e610219366004611ddf565b610628565b005b34801561022c57600080fd5b5061023b636b6c617960e01b81565b6040519081526020015b60405180910390f35b34801561025a57600080fd5b5061021e610269366004611e22565b6109a7565b34801561027a57600080fd5b5061021e610289366004611d73565b610aba565b34801561029a57600080fd5b5061021e6102a9366004611e22565b610b1f565b3480156102ba57600080fd5b5061023b60075481565b3480156102d057600080fd5b5061023b6102df366004611ddf565b610b55565b3480156102f057600080fd5b506103146102ff366004611d73565b60086020526000908152604090205460ff1681565b6040519015158152602001610245565b34801561033057600080fd5b5061021e61033f366004611ddf565b610b6e565b34801561035057600080fd5b5061021e61035f366004611df7565b610d37565b34801561037057600080fd5b5061021e61037f366004611ddf565b610d59565b34801561039057600080fd5b5061021e61039f366004611df7565b610fb1565b3480156103b057600080fd5b5061021e6103bf366004611ddf565b61102b565b3480156103d057600080fd5b5061021e611228565b61021e6112a6565b3480156103ed57600080fd5b5061021e61139e565b34801561040257600080fd5b5060025461041b9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610245565b34801561043f57600080fd5b5061021e61044e366004611e22565b61143c565b34801561045f57600080fd5b5060025460ff16610314565b61021e610479366004611ddf565b611472565b34801561048a57600080fd5b5061021e6114a7565b34801561049f57600080fd5b506103146104ae366004611df7565b61151b565b3480156104bf57600080fd5b5061023b600081565b3480156104d457600080fd5b5060065461041b906001600160a01b031681565b3480156104f457600080fd5b5060045461041b906001600160a01b031681565b34801561051457600080fd5b5061021e610523366004611ddf565b611546565b34801561053457600080fd5b5061021e610543366004611df7565b61157b565b34801561055457600080fd5b5061021e610563366004611df7565b611703565b34801561057457600080fd5b5061021e610583366004611e22565b611720565b34801561059457600080fd5b5060055461041b906001600160a01b031681565b3480156105b457600080fd5b5061021e6105c3366004611e22565b611811565b3480156105d457600080fd5b5060035461041b906001600160a01b031681565b3480156105f457600080fd5b5061021e610603366004611d73565b611866565b34801561061457600080fd5b5061021e610623366004611d8d565b61189c565b60025460ff16156106545760405162461bcd60e51b815260040161064b90611f20565b60405180910390fd5b3360009081526008602052604090205460ff16806106ee57506007546006546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156106b357600080fd5b505afa1580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190611e43565b10155b6107535760405162461bcd60e51b815260206004820152603060248201527f4b6c6179476174657761793a3a20756e7374616b65496e424b6c61793a20696e60448201526f3b30b634b21036b9b39739b2b73232b960811b606482015260840161064b565b600254604051634907582f60e01b8152636b6c617960e01b6004820152336024820152829161010090046001600160a01b031690634907582f9060440160206040518083038186803b1580156107a857600080fd5b505afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190611e43565b101561088757600254604051634907582f60e01b8152636b6c617960e01b60048201523360248201526108879161010090046001600160a01b031690634907582f906044015b60206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190611e43565b6108809083611fd7565b6000611720565b60025461010090046001600160a01b031663d295927a636b6c617960e01b336108af856118fc565b6108b890611fee565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b50506004805460405163a9059cbb60e01b81523392810192909252602482018590526001600160a01b0316925063a9059cbb9150604401602060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a39190611dc3565b5050565b60025460ff16156109ca5760405162461bcd60e51b815260040161064b90611f20565b60025461010090046001600160a01b0316630d0a1d92636b6c617960e01b3380806109f4886118fc565b6109fd886118fc565b6040518763ffffffff1660e01b8152600401610a1e96959493929190611eeb565b600060405180830381600087803b158015610a3857600080fd5b505af1158015610a4c573d6000803e3d6000fd5b505060035460405163ed53be2960e01b81526001600160a01b03909116925063ed53be299150610a8490339081908690600401611ec7565b600060405180830381600087803b158015610a9e57600080fd5b505af1158015610ab2573d6000803e3d6000fd5b505050505050565b600480546040516305b9352d60e21b81526001600160a01b03848116938201939093529116906316e4d4b4906024015b600060405180830381600087803b158015610b0457600080fd5b505af1158015610b18573d6000803e3d6000fd5b5050505050565b60025460ff1615610b425760405162461bcd60e51b815260040161064b90611f20565b610b4b8261102b565b6109a382826109a7565b600081815260016020819052604090912001545b919050565b60025460ff1615610b915760405162461bcd60e51b815260040161064b90611f20565b600254604051634907582f60e01b8152636b6c617960e01b6004820152336024820152829161010090046001600160a01b031690634907582f9060440160206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190611e43565b1015610c6857600254604051634907582f60e01b8152636b6c617960e01b6004820152336024820152610c689161010090046001600160a01b031690634907582f90604401610826565b60025461010090046001600160a01b031663d295927a636b6c617960e01b33610c90856118fc565b610c9990611fee565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b158015610ce757600080fd5b505af1158015610cfb573d6000803e3d6000fd5b50506004805460405163238be93f60e01b81523392810192909252602482018590526001600160a01b0316925063238be93f9150604401610aea565b610d4082610b55565b610d4a813361196a565b610d5483836119ce565b505050565b60025460ff1615610d7c5760405162461bcd60e51b815260040161064b90611f20565b600254604051637d5422a760e01b8152636b6c617960e01b600482015260009161010090046001600160a01b031690637d5422a79060240160c06040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611e7e565b505060025460405163b75baf7960e01b8152636b6c617960e01b60048201523360248201529295506000945061010090046001600160a01b0316925063b75baf79916044019050604080518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190611e5b565b915060009050610eaa8284611a39565b60035460405163109b40d560e11b81529192506001600160a01b03169063213681aa90610edf90339081908690600401611ec7565b600060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505060025461010090046001600160a01b03169150630d0a1d929050636b6c617960e01b338080610f3d8a6118fc565b610f4690611fee565b610f4f886118fc565b610f5890611fee565b6040518763ffffffff1660e01b8152600401610f7996959493929190611eeb565b600060405180830381600087803b158015610f9357600080fd5b505af1158015610fa7573d6000803e3d6000fd5b5050505050505050565b6001600160a01b03811633146110215760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161064b565b6109a38282611ac5565b60025460ff161561104e5760405162461bcd60e51b815260040161064b90611f20565b60025461010090046001600160a01b031663d295927a636b6c617960e01b33611076856118fc565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b50506005546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061111090339030908690600401611ec7565b602060405180830381600087803b15801561112a57600080fd5b505af115801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190611dc3565b506005546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018490529091169063095ea7b390604401602060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef9190611dc3565b5060048054604051638d19a9af60e01b81523092810192909252602482018390526001600160a01b031690638d19a9af90604401610aea565b600054610100900460ff168061123d5750303b155b8061124b575060005460ff16155b6112675760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611289576000805461ffff19166101011790555b611291611b2c565b80156112a3576000805461ff00191690555b50565b60025460ff16156112c95760405162461bcd60e51b815260040161064b90611f20565b60025461010090046001600160a01b031663d295927a636b6c617960e01b336112f1346118fc565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505060048054604051632b89466d60e21b815230928101929092526001600160a01b0316925063ae2519b4915034906024016000604051808303818588803b158015610b0457600080fd5b60025460ff166113e75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161064b565b653830bab9b2b960d11b6113fb813361196a565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b60025460ff161561145f5760405162461bcd60e51b815260040161064b90611f20565b6114698282611720565b6109a382610b6e565b60025460ff16156114955760405162461bcd60e51b815260040161064b90611f20565b61149d6112a6565b6112a334826109a7565b60025460ff16156114ca5760405162461bcd60e51b815260040161064b90611f20565b653830bab9b2b960d11b6114de813361196a565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611431565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460ff16156115695760405162461bcd60e51b815260040161064b90611f20565b61157281610d59565b6112a381610b6e565b61158d6430b236b4b760d91b3361196a565b60025460ff16156115b05760405162461bcd60e51b815260040161064b90611f20565b81653632b233b2b960d11b14156115e65760028054610100600160a81b0319166101006001600160a01b038416021790556109a3565b81696b73644761746577617960b01b141561161b57600380546001600160a01b0319166001600160a01b0383161790556109a3565b8164624b6c617960d81b141561164b57600480546001600160a01b0319166001600160a01b0383161790556109a3565b8164616b6c617960d81b141561167b57600580546001600160a01b0319166001600160a01b0383161790556109a3565b8165736b6f6b6f6160d01b14156116ac57600680546001600160a01b0319166001600160a01b0383161790556109a3565b60405162461bcd60e51b815260206004820152602660248201527f4b6c6179476174657761793a3a636f6e6669673a756e7265636f676e697a65646044820152652d706172616d60d01b606482015260840161064b565b61170c82610b55565b611716813361196a565b610d548383611ac5565b60025460ff16156117435760405162461bcd60e51b815260040161064b90611f20565b60035460405163109b40d560e11b81526001600160a01b039091169063213681aa9061177790339081908690600401611ec7565b600060405180830381600087803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b505060025461010090046001600160a01b03169150630d0a1d929050636b6c617960e01b3380806117d5886118fc565b6117de90611fee565b6117e7886118fc565b6117f090611fee565b6040518763ffffffff1660e01b8152600401610a8496959493929190611eeb565b6118236430b236b4b760d91b3361196a565b60025460ff16156118465760405162461bcd60e51b815260040161064b90611f20565b816a1cdadbdadbd8531a5b5a5d60aa1b14156116ac5760078190556109a3565b6118786437bbb732b960d91b3361196a565b61188a6437bbb732b960d91b826119ce565b6112a36437bbb732b960d91b33611ac5565b6118ae6430b236b4b760d91b3361196a565b60025460ff16156118d15760405162461bcd60e51b815260040161064b90611f20565b6001600160a01b03919091166000908152600860205260409020805460ff1916911515919091179055565b60006001600160ff1b038211156119665760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161064b565b5090565b611974828261151b565b6109a35760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b606482015260840161064b565b6119d8828261151b565b6109a35760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000611a458284611fb8565b9050811580611a5c575082611a5a8383611f98565b145b611aa85760405162461bcd60e51b815260206004820152601b60248201527f5761645261794d6174683a3a20726d756c3a206f766572666c6f770000000000604482015260640161064b565b611abe6b033b2e3c9fd0803ce800000082611f98565b9392505050565b611acf828261151b565b156109a35760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611b415750303b155b80611b4f575060005460ff16155b611b6b5760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611b8d576000805461ffff19166101011790555b611b95611bc3565b611bb0653830bab9b2b960d11b6437bbb732b960d91b611c2c565b611291653830bab9b2b960d11b33611c81565b600054610100900460ff1680611bd85750303b155b80611be6575060005460ff16155b611c025760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611c24576000805461ffff19166101011790555b611291611c8b565b6000611c3783610b55565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6109a382826119ce565b600054610100900460ff1680611ca05750303b155b80611cae575060005460ff16155b611cca5760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611cec576000805461ffff19166101011790555b611cfe6437bbb732b960d91b33611c81565b611d186430b236b4b760d91b6437bbb732b960d91b611c2c565b611d356737b832b930ba37b960c11b6437bbb732b960d91b611c2c565b611d476430b236b4b760d91b33611c81565b6112916737b832b930ba37b960c11b33611c81565b80356001600160a01b0381168114610b6957600080fd5b600060208284031215611d84578081fd5b611abe82611d5c565b60008060408385031215611d9f578081fd5b611da883611d5c565b91506020830135611db88161201e565b809150509250929050565b600060208284031215611dd4578081fd5b8151611abe8161201e565b600060208284031215611df0578081fd5b5035919050565b60008060408385031215611e09578182fd5b82359150611e1960208401611d5c565b90509250929050565b60008060408385031215611e34578182fd5b50508035926020909101359150565b600060208284031215611e54578081fd5b5051919050565b60008060408385031215611e6d578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215611e96578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6001600160a01b039384168152919092166020820152604081019190915260600190565b9586526001600160a01b039485166020870152928416604086015292166060840152608083019190915260a082015260c00190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082611fb357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611fd257611fd2612008565b500290565b600082821015611fe957611fe9612008565b500390565b6000600160ff1b82141561200457612004612008565b0390565b634e487b7160e01b600052601160045260246000fd5b80151581146112a357600080fdfea2646970667358221220ba2a033a18c81e7bfa541a895faf97405acbdc1d5d1108627e87e5b3d985028064736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80635bab28fa1161010d578063cca52a76116100a0578063df7a1cea1161006f578063df7a1cea14610588578063e0bed041146105a8578063f223fab4146105c8578063f2fde38b146105e8578063f9893c4314610608576101f9565b8063cca52a7614610508578063d366f3b914610528578063d547741f14610548578063d8aed14514610568576101f9565b806391d14854116100dc57806391d1485414610493578063a217fddf146104b3578063a3333309146104c8578063b3ad42ff146104e8576101f9565b80635bab28fa146104335780635c975abb1461045357806372f1527f1461046b5780638456cb591461047e576101f9565b80632e17de7811610190578063366804631161015f57806336680463146103a4578063375ccd1f146103c45780633a4b66f1146103d95780633f4ba83a146103e157806356397c35146103f6576101f9565b80632e17de78146103245780632f2ff15d146103445780633221be541461036457806336568abe14610384576101f9565b80631b1f24e7116101cc5780631b1f24e71461028e5780631bbe5215146102ae578063248a9ca3146102c45780632684b406146102e4576101f9565b806306405b50146101fe5780630dac8084146102205780630ecbcdab1461024e57806316e4d4b41461026e575b600080fd5b34801561020a57600080fd5b5061021e610219366004611ddf565b610628565b005b34801561022c57600080fd5b5061023b636b6c617960e01b81565b6040519081526020015b60405180910390f35b34801561025a57600080fd5b5061021e610269366004611e22565b6109a7565b34801561027a57600080fd5b5061021e610289366004611d73565b610aba565b34801561029a57600080fd5b5061021e6102a9366004611e22565b610b1f565b3480156102ba57600080fd5b5061023b60075481565b3480156102d057600080fd5b5061023b6102df366004611ddf565b610b55565b3480156102f057600080fd5b506103146102ff366004611d73565b60086020526000908152604090205460ff1681565b6040519015158152602001610245565b34801561033057600080fd5b5061021e61033f366004611ddf565b610b6e565b34801561035057600080fd5b5061021e61035f366004611df7565b610d37565b34801561037057600080fd5b5061021e61037f366004611ddf565b610d59565b34801561039057600080fd5b5061021e61039f366004611df7565b610fb1565b3480156103b057600080fd5b5061021e6103bf366004611ddf565b61102b565b3480156103d057600080fd5b5061021e611228565b61021e6112a6565b3480156103ed57600080fd5b5061021e61139e565b34801561040257600080fd5b5060025461041b9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610245565b34801561043f57600080fd5b5061021e61044e366004611e22565b61143c565b34801561045f57600080fd5b5060025460ff16610314565b61021e610479366004611ddf565b611472565b34801561048a57600080fd5b5061021e6114a7565b34801561049f57600080fd5b506103146104ae366004611df7565b61151b565b3480156104bf57600080fd5b5061023b600081565b3480156104d457600080fd5b5060065461041b906001600160a01b031681565b3480156104f457600080fd5b5060045461041b906001600160a01b031681565b34801561051457600080fd5b5061021e610523366004611ddf565b611546565b34801561053457600080fd5b5061021e610543366004611df7565b61157b565b34801561055457600080fd5b5061021e610563366004611df7565b611703565b34801561057457600080fd5b5061021e610583366004611e22565b611720565b34801561059457600080fd5b5060055461041b906001600160a01b031681565b3480156105b457600080fd5b5061021e6105c3366004611e22565b611811565b3480156105d457600080fd5b5060035461041b906001600160a01b031681565b3480156105f457600080fd5b5061021e610603366004611d73565b611866565b34801561061457600080fd5b5061021e610623366004611d8d565b61189c565b60025460ff16156106545760405162461bcd60e51b815260040161064b90611f20565b60405180910390fd5b3360009081526008602052604090205460ff16806106ee57506007546006546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156106b357600080fd5b505afa1580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190611e43565b10155b6107535760405162461bcd60e51b815260206004820152603060248201527f4b6c6179476174657761793a3a20756e7374616b65496e424b6c61793a20696e60448201526f3b30b634b21036b9b39739b2b73232b960811b606482015260840161064b565b600254604051634907582f60e01b8152636b6c617960e01b6004820152336024820152829161010090046001600160a01b031690634907582f9060440160206040518083038186803b1580156107a857600080fd5b505afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190611e43565b101561088757600254604051634907582f60e01b8152636b6c617960e01b60048201523360248201526108879161010090046001600160a01b031690634907582f906044015b60206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190611e43565b6108809083611fd7565b6000611720565b60025461010090046001600160a01b031663d295927a636b6c617960e01b336108af856118fc565b6108b890611fee565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b50506004805460405163a9059cbb60e01b81523392810192909252602482018590526001600160a01b0316925063a9059cbb9150604401602060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a39190611dc3565b5050565b60025460ff16156109ca5760405162461bcd60e51b815260040161064b90611f20565b60025461010090046001600160a01b0316630d0a1d92636b6c617960e01b3380806109f4886118fc565b6109fd886118fc565b6040518763ffffffff1660e01b8152600401610a1e96959493929190611eeb565b600060405180830381600087803b158015610a3857600080fd5b505af1158015610a4c573d6000803e3d6000fd5b505060035460405163ed53be2960e01b81526001600160a01b03909116925063ed53be299150610a8490339081908690600401611ec7565b600060405180830381600087803b158015610a9e57600080fd5b505af1158015610ab2573d6000803e3d6000fd5b505050505050565b600480546040516305b9352d60e21b81526001600160a01b03848116938201939093529116906316e4d4b4906024015b600060405180830381600087803b158015610b0457600080fd5b505af1158015610b18573d6000803e3d6000fd5b5050505050565b60025460ff1615610b425760405162461bcd60e51b815260040161064b90611f20565b610b4b8261102b565b6109a382826109a7565b600081815260016020819052604090912001545b919050565b60025460ff1615610b915760405162461bcd60e51b815260040161064b90611f20565b600254604051634907582f60e01b8152636b6c617960e01b6004820152336024820152829161010090046001600160a01b031690634907582f9060440160206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190611e43565b1015610c6857600254604051634907582f60e01b8152636b6c617960e01b6004820152336024820152610c689161010090046001600160a01b031690634907582f90604401610826565b60025461010090046001600160a01b031663d295927a636b6c617960e01b33610c90856118fc565b610c9990611fee565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b158015610ce757600080fd5b505af1158015610cfb573d6000803e3d6000fd5b50506004805460405163238be93f60e01b81523392810192909252602482018590526001600160a01b0316925063238be93f9150604401610aea565b610d4082610b55565b610d4a813361196a565b610d5483836119ce565b505050565b60025460ff1615610d7c5760405162461bcd60e51b815260040161064b90611f20565b600254604051637d5422a760e01b8152636b6c617960e01b600482015260009161010090046001600160a01b031690637d5422a79060240160c06040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611e7e565b505060025460405163b75baf7960e01b8152636b6c617960e01b60048201523360248201529295506000945061010090046001600160a01b0316925063b75baf79916044019050604080518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190611e5b565b915060009050610eaa8284611a39565b60035460405163109b40d560e11b81529192506001600160a01b03169063213681aa90610edf90339081908690600401611ec7565b600060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505060025461010090046001600160a01b03169150630d0a1d929050636b6c617960e01b338080610f3d8a6118fc565b610f4690611fee565b610f4f886118fc565b610f5890611fee565b6040518763ffffffff1660e01b8152600401610f7996959493929190611eeb565b600060405180830381600087803b158015610f9357600080fd5b505af1158015610fa7573d6000803e3d6000fd5b5050505050505050565b6001600160a01b03811633146110215760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161064b565b6109a38282611ac5565b60025460ff161561104e5760405162461bcd60e51b815260040161064b90611f20565b60025461010090046001600160a01b031663d295927a636b6c617960e01b33611076856118fc565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b50506005546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061111090339030908690600401611ec7565b602060405180830381600087803b15801561112a57600080fd5b505af115801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190611dc3565b506005546004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018490529091169063095ea7b390604401602060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef9190611dc3565b5060048054604051638d19a9af60e01b81523092810192909252602482018390526001600160a01b031690638d19a9af90604401610aea565b600054610100900460ff168061123d5750303b155b8061124b575060005460ff16155b6112675760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611289576000805461ffff19166101011790555b611291611b2c565b80156112a3576000805461ff00191690555b50565b60025460ff16156112c95760405162461bcd60e51b815260040161064b90611f20565b60025461010090046001600160a01b031663d295927a636b6c617960e01b336112f1346118fc565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505060048054604051632b89466d60e21b815230928101929092526001600160a01b0316925063ae2519b4915034906024016000604051808303818588803b158015610b0457600080fd5b60025460ff166113e75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161064b565b653830bab9b2b960d11b6113fb813361196a565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b60025460ff161561145f5760405162461bcd60e51b815260040161064b90611f20565b6114698282611720565b6109a382610b6e565b60025460ff16156114955760405162461bcd60e51b815260040161064b90611f20565b61149d6112a6565b6112a334826109a7565b60025460ff16156114ca5760405162461bcd60e51b815260040161064b90611f20565b653830bab9b2b960d11b6114de813361196a565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611431565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460ff16156115695760405162461bcd60e51b815260040161064b90611f20565b61157281610d59565b6112a381610b6e565b61158d6430b236b4b760d91b3361196a565b60025460ff16156115b05760405162461bcd60e51b815260040161064b90611f20565b81653632b233b2b960d11b14156115e65760028054610100600160a81b0319166101006001600160a01b038416021790556109a3565b81696b73644761746577617960b01b141561161b57600380546001600160a01b0319166001600160a01b0383161790556109a3565b8164624b6c617960d81b141561164b57600480546001600160a01b0319166001600160a01b0383161790556109a3565b8164616b6c617960d81b141561167b57600580546001600160a01b0319166001600160a01b0383161790556109a3565b8165736b6f6b6f6160d01b14156116ac57600680546001600160a01b0319166001600160a01b0383161790556109a3565b60405162461bcd60e51b815260206004820152602660248201527f4b6c6179476174657761793a3a636f6e6669673a756e7265636f676e697a65646044820152652d706172616d60d01b606482015260840161064b565b61170c82610b55565b611716813361196a565b610d548383611ac5565b60025460ff16156117435760405162461bcd60e51b815260040161064b90611f20565b60035460405163109b40d560e11b81526001600160a01b039091169063213681aa9061177790339081908690600401611ec7565b600060405180830381600087803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b505060025461010090046001600160a01b03169150630d0a1d929050636b6c617960e01b3380806117d5886118fc565b6117de90611fee565b6117e7886118fc565b6117f090611fee565b6040518763ffffffff1660e01b8152600401610a8496959493929190611eeb565b6118236430b236b4b760d91b3361196a565b60025460ff16156118465760405162461bcd60e51b815260040161064b90611f20565b816a1cdadbdadbd8531a5b5a5d60aa1b14156116ac5760078190556109a3565b6118786437bbb732b960d91b3361196a565b61188a6437bbb732b960d91b826119ce565b6112a36437bbb732b960d91b33611ac5565b6118ae6430b236b4b760d91b3361196a565b60025460ff16156118d15760405162461bcd60e51b815260040161064b90611f20565b6001600160a01b03919091166000908152600860205260409020805460ff1916911515919091179055565b60006001600160ff1b038211156119665760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161064b565b5090565b611974828261151b565b6109a35760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b606482015260840161064b565b6119d8828261151b565b6109a35760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000611a458284611fb8565b9050811580611a5c575082611a5a8383611f98565b145b611aa85760405162461bcd60e51b815260206004820152601b60248201527f5761645261794d6174683a3a20726d756c3a206f766572666c6f770000000000604482015260640161064b565b611abe6b033b2e3c9fd0803ce800000082611f98565b9392505050565b611acf828261151b565b156109a35760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611b415750303b155b80611b4f575060005460ff16155b611b6b5760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611b8d576000805461ffff19166101011790555b611b95611bc3565b611bb0653830bab9b2b960d11b6437bbb732b960d91b611c2c565b611291653830bab9b2b960d11b33611c81565b600054610100900460ff1680611bd85750303b155b80611be6575060005460ff16155b611c025760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611c24576000805461ffff19166101011790555b611291611c8b565b6000611c3783610b55565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6109a382826119ce565b600054610100900460ff1680611ca05750303b155b80611cae575060005460ff16155b611cca5760405162461bcd60e51b815260040161064b90611f4a565b600054610100900460ff16158015611cec576000805461ffff19166101011790555b611cfe6437bbb732b960d91b33611c81565b611d186430b236b4b760d91b6437bbb732b960d91b611c2c565b611d356737b832b930ba37b960c11b6437bbb732b960d91b611c2c565b611d476430b236b4b760d91b33611c81565b6112916737b832b930ba37b960c11b33611c81565b80356001600160a01b0381168114610b6957600080fd5b600060208284031215611d84578081fd5b611abe82611d5c565b60008060408385031215611d9f578081fd5b611da883611d5c565b91506020830135611db88161201e565b809150509250929050565b600060208284031215611dd4578081fd5b8151611abe8161201e565b600060208284031215611df0578081fd5b5035919050565b60008060408385031215611e09578182fd5b82359150611e1960208401611d5c565b90509250929050565b60008060408385031215611e34578182fd5b50508035926020909101359150565b600060208284031215611e54578081fd5b5051919050565b60008060408385031215611e6d578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215611e96578182fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6001600160a01b039384168152919092166020820152604081019190915260600190565b9586526001600160a01b039485166020870152928416604086015292166060840152608083019190915260a082015260c00190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082611fb357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611fd257611fd2612008565b500290565b600082821015611fe957611fe9612008565b500390565b6000600160ff1b82141561200457612004612008565b0390565b634e487b7160e01b600052601160045260246000fd5b80151581146112a357600080fdfea2646970667358221220ba2a033a18c81e7bfa541a895faf97405acbdc1d5d1108627e87e5b3d985028064736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256,uint256)": {
        "details": "Currently, the only collateral is klay.Ledger decides whether or not to verify the stability of a secured loan or not.Loan history recorded on ledger.",
        "params": {
          "collateralAmount": "Amount of collateral to be collateralized.",
          "loanAmount": "Amount of ksd to borrow (loan)."
        }
      },
      "claimKlay(address)": {
        "details": "It takes 7 days for unstaked klay to be returned.If you do not claim by 14 days after unstaking, it will be automatically staking again.",
        "params": {
          "usr": "Who will execute the claim."
        }
      },
      "repay(uint256,uint256)": {
        "details": "Record on ledge.",
        "params": {
          "collateralAmount": "Amount of klay that was entrusted as collateral.",
          "loanAmount": "Amount of ksd borrowed (loan)."
        }
      },
      "repayAll(uint256)": {
        "details": "Record on ledge.",
        "params": {
          "collateralAmount": "Amount of klay that was entrusted as collateral."
        }
      },
      "repayAllAndUnstake(uint256)": {
        "details": "Unstake is executed after repay is executed.The claim function must be called to return the unstaked klay.",
        "params": {
          "collateralAmount": "Amount of klay that was entrusted as collateral."
        }
      },
      "repayAndUnstake(uint256,uint256)": {
        "details": "Unstake is executed after repay is executed.The claim function must be called to return the unstaked klay.",
        "params": {
          "collateralAmount": "Amount of klay that was entrusted as collateral.",
          "loanAmount": "Amount of ksd borrowed (loan)."
        }
      },
      "stake()": {
        "details": "As much as the received klay, bklay is mint and treated as collateral.Payable."
      },
      "stakeAKlay(uint256)": {
        "details": "As much as the received aklay, bklay is mint and treated as collateral.Payable.",
        "params": {
          "amount": "amount of aklay to stake"
        }
      },
      "stakeAKlayAndBorrow(uint256,uint256)": {
        "params": {
          "aklayAmount": "Amount of aklay to stake.",
          "ksdAmount": "Amount of ksd to borrow (loan)."
        }
      },
      "stakeAndBorrow(uint256)": {
        "params": {
          "amount": "Amount of ksd to borrow (loan)."
        }
      },
      "unstake(uint256)": {
        "details": "Record on ledge.Unstaking is carried out in the bklay contract.",
        "params": {
          "amount": "Amount of klay you want to return."
        }
      },
      "unstakeInBKlay(uint256)": {
        "details": "Record on ledge.Unstaking is carried out in the bklay contract.",
        "params": {
          "amount": "Amount of klay you want to return."
        }
      }
    },
    "title": "Klay input/output contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256,uint256)": {
        "notice": "Loan ksd with klay as collateral."
      },
      "claimKlay(address)": {
        "notice": "Return a returnable klay to the user."
      },
      "config(bytes32,address)": {
        "notice": "Initialize interface variable."
      },
      "config(bytes32,uint256)": {
        "notice": "Initialize interface variable."
      },
      "repay(uint256,uint256)": {
        "notice": "Return ksd and unlock collateral (klay)."
      },
      "repayAll(uint256)": {
        "notice": "Return ksd and unlock collateral (klay)."
      },
      "repayAllAndUnstake(uint256)": {
        "notice": "Execute repay and unstake functions at the same time."
      },
      "repayAndUnstake(uint256,uint256)": {
        "notice": "Execute repay and unstake functions at the same time."
      },
      "setBKlayAccess(address,bool)": {
        "notice": "access of withdaw BKlay directly"
      },
      "stake()": {
        "notice": "Send klay to bklay contract, record on ledge."
      },
      "stakeAKlay(uint256)": {
        "notice": "Send aklay to bklay contract, record on ledge."
      },
      "stakeAKlayAndBorrow(uint256,uint256)": {
        "notice": "Execute stake and borrow functions at the same time."
      },
      "stakeAndBorrow(uint256)": {
        "notice": "Execute stake and borrow functions at the same time."
      },
      "unstake(uint256)": {
        "notice": "Execute unstake to get the entrusted klay back."
      },
      "unstakeInBKlay(uint256)": {
        "notice": "Execute unstake to get BKlay back."
      }
    },
    "notice": "Functions to be called by user",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23220,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23223,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20166,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)"
      },
      {
        "astId": 20556,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 19566,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "ledger",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(ILedger)8804"
      },
      {
        "astId": 19569,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "ksdGateway",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKSDGateway)7603"
      },
      {
        "astId": 19572,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "bKlay",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBKlay)7171"
      },
      {
        "astId": 19575,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "aklay",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 19578,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "skokoa",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 19580,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "skokoaLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19584,
        "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
        "label": "isAllow",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBKlay)7171": {
        "encoding": "inplace",
        "label": "contract IBKlay",
        "numberOfBytes": "20"
      },
      "t_contract(IKIP7)9881": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKSDGateway)7603": {
        "encoding": "inplace",
        "label": "contract IKSDGateway",
        "numberOfBytes": "20"
      },
      "t_contract(ILedger)8804": {
        "encoding": "inplace",
        "label": "contract ILedger",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)20161_storage"
      },
      "t_struct(RoleData)20161_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 20158,
            "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20160,
            "contract": "contracts/lending/gateway/KlayGateway.sol:KlayGateway",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}