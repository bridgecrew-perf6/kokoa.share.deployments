{
  "address": "0x3F07828551AaFb748Aedf634561dBb2E9E75b87D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__YieldManager_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTargetApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getYieldApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksd",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdRefundManager",
      "outputs": [
        {
          "internalType": "contract IKsdRefundManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdRewardManager",
      "outputs": [
        {
          "internalType": "contract IDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ledger",
      "outputs": [
        {
          "internalType": "contract ILedger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "earnedKsdAmount",
          "type": "uint256"
        }
      ],
      "name": "manageProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "prevCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "record",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accYieldApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEarnedKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRefundedKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accStabilityFeeKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTargetKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLoan",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "recordLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "earnedKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundedKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeKsdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetKsdAmount",
          "type": "uint256"
        }
      ],
      "name": "saveRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "yieldFactory_",
          "type": "address"
        }
      ],
      "name": "setYieldFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityFeeCollector",
      "outputs": [
        {
          "internalType": "contract IStabilityFeeCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "updateCursor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "yieldFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe52d87afb8fceb6683760c502fec72546b651671463b008182541e909535ce1b",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0x3F07828551AaFb748Aedf634561dBb2E9E75b87D",
    "transactionIndex": 23,
    "gasUsed": "2226476",
    "logsBloom": "0x
    "blockHash": "0x8875a582a3f2c8a84e8df5badf84b465c833e3ededae972803eec574813307e8",
    "transactionHash": "0xe52d87afb8fceb6683760c502fec72546b651671463b008182541e909535ce1b",
    "logs": [],
    "blockNumber": 80655663,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "59b3178729d48a8bf41b8d0457067762",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__YieldManager_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getYieldApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksd\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdRefundManager\",\"outputs\":[{\"internalType\":\"contract IKsdRefundManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdRewardManager\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"contract ILedger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"earnedKsdAmount\",\"type\":\"uint256\"}],\"name\":\"manageProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prevCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accYieldApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEarnedKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRefundedKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accStabilityFeeKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTargetKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"recordLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"earnedKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeKsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetKsdAmount\",\"type\":\"uint256\"}],\"name\":\"saveRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"yieldFactory_\",\"type\":\"address\"}],\"name\":\"setYieldFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityFeeCollector\",\"outputs\":[{\"internalType\":\"contract IStabilityFeeCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"updateCursor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"yieldFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/yield/YieldManager.sol\":\"YieldManager\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title distribute ksd\\ninterface IDistributor {\\n    /// @notice distribute ksd profit\\n    /// @param amount amount of profit\\n    function distribute(uint256 amount) external;\\n\\n    event Distribute(uint256 now, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2758bce16dcd91f7f850cf38217460e7327d7b246fcd912b9f38b00a06949d83\",\"license\":\"MIT\"},\"contracts/interface/IKsdRefundManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKsdRefundManager {\\n    event Refund(bytes32 collateralType, uint256 timestamp, uint256 refundAmount, uint256 totalLoan, uint256 accRewardPerShare);\\n    event Deposit(bytes32 collateralType, uint256 amount, address to);\\n    event Withdraw(bytes32 collateralType, uint256 amount, address to);\\n    event Claim(bytes32 collateralType, address from, uint256 amount);\\n\\n    struct PoolInfo {\\n        uint256 accAmountPerShare;\\n    }\\n\\n    struct UserInfo {\\n        int256 debt;\\n        uint256 claimedAmount;\\n    }\\n\\n    function refund(bytes32 collateralType, uint256 refundAmount) external;\\n\\n    function onDeposit(\\n        bytes32 collateralType,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function onWithdraw(\\n        bytes32 collateralType,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function onChanged(\\n        bytes32 collateralType,\\n        int256 amount,\\n        address to\\n    ) external;\\n\\n    function claimableAmount(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    function claim(bytes32 collateralType, address to) external;\\n\\n    function claimByOther(bytes32 collateralType, address usr) external;\\n}\\n\",\"keccak256\":\"0x72b832532c312b535bbb664c8a4262a590f2bdb56627f51efdba2d068457262b\",\"license\":\"MIT\"},\"contracts/interface/ILedger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ILedger {\\n    // --- Events ---\\n    event CollateralChanged(bytes32 collateralType, address usr, int256 amount);\\n    event KSDChanged(address usr, int256 amount);\\n    event LoanChanged(bytes32 collateralType, address debtor, address collateralVault, address ksdVault, int256 collateralAmount, int256 loanAmount);\\n    event AccountChanged(bytes32 collateralType, address vault, uint256 lockedCollateral, uint256 loan);\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\uc900\\ub2e4.\\n    /// @notice authorize usr to manipulate msg.sender's vault\\n    function allow(address usr) external;\\n\\n    /// @notice msg.sender\\uac00 usr\\uc5d0\\uac8c \\uc790\\uc2e0\\uc758 vault\\ub97c \\uc870\\uc791\\ud560 \\uc218 \\uc788\\ub294 \\uad8c\\ud55c\\uc744 \\ubec7\\ub294.\\n    /// @notice Deauthorize usr from manipulating msg.sender's vault\\n    function disallow(address usr) external;\\n\\n    // --- Data view ---\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785.\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. totalLockedCollateral (\\uc804\\uccb4 locked\\ub41c \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. totalLoan (\\ubc1c\\ud589\\ub41c(\\ube4c\\ub9b0) KSD\\uc591)\\n    /// 3. rate (\\uc2dc\\uac04\\uc5d0 \\ub530\\ub77c \\uc810\\ucc28 \\uc99d\\uac00\\ud558\\uace0, accountInfo.loan \\uc5d0 \\uacf1\\ud574\\uc838\\uc11c \\uc0ac\\uc6a9\\uc790\\uac00 \\ube4c\\ub9b0 ksd\\uc758 \\uc591\\uc744 \\ub298\\ub9ac\\ub294 \\uc6a9\\ub3c4\\ub85c \\uc0ac\\uc6a9\\ub428. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (\\ub2f4\\ubcf4 \\ud0c0\\uc785\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd1d KSD)\\n    /// 6. dust (\\ud558\\ub098\\uc758 vault\\uc5d0\\uc11c \\ube4c\\ub9b4 \\uc218 \\uc788\\ub294 \\ucd5c\\uc800\\uc758 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Collateral Iinfo\\n    /// @param collateralType Type of collateral - initially, there's only one (Klay)\\n    /// @dev the value that it returns are\\n    /// 1. totalLockedCollateral\\n    /// 2. totalLoan\\n    /// 3. rate (It gradually increases over time and is multiplied by accountInfo.loan to increase the amount of ksd borrowed by the user.. stability fee)\\n    /// 4. spot (== price * LTV)\\n    /// 5. line (Maximum KSD that can be minted from given collateral type)\\n    /// 6. dust (Minimum KSD that should be borrowed from a CDP)\\n    function collateralInfo(bytes32 collateralType)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\uad00\\ub828 \\uc815\\ubcf4\\ub4e4 \\uc870\\ud68c\\n    /// @param collateralTypes \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785 list\\n    /// @dev collateralInfo \\uc758 \\uac12\\ub4e4\\uc744 array \\ub85c return\\n    function collateralInfos(bytes32[] calldata collateralTypes)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    /// @notice usr\\uc758 vault \\uc815\\ubcf4\\n    /// @param collateralType \\ub2f4\\ubcf4 \\uc885\\ub958\\n    /// @param usr \\uc720\\uc800\\uc758 address\\n    /// @dev \\ub9ac\\ud134 \\uac12\\uc740 \\uc21c\\uc11c\\ub300\\ub85c\\n    /// 1. lockedCollateral (vault\\uc5d0 \\uc7a0\\uae34 \\ub2f4\\ubcf4\\ubb3c \\uc591)\\n    /// 2. loan (vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd \\uc591)\\n    /// (eng)\\n    /// @notice Information of a user's vault\\n    /// @param collateralType type of collateral\\n    /// @param usr Address of the user\\n    /// @dev returns\\n    /// 1. lockedCollateral (amount of collateral locked in the user's vault)\\n    /// 2. loan (normalized amount of KSD minted from that vault)\\n    function accountInfo(bytes32 collateralType, address usr) external view returns (uint256, uint256);\\n\\n    /// @notice This function returns the index of a user of given collateral type\\n    ///         The index\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @dev \\ub2f4\\ubcf4\\ubb3c \\ud0c0\\uc785\\ub9c8\\ub2e4 cdp \\uc5f0 \\uc720\\uc800\\ub97c tracking \\ud558\\uae30 \\uc704\\ud55c \\uac83\\uc73c\\ub85c, \\uac01 \\uc720\\uc800\\uac00 \\uba87 \\ubc88\\uc9f8\\ub85c cdp\\ub97c \\uc5f4\\uc5c8\\ub294\\uc9c0\\ub97c \\uae30\\ub85d.\\n    /// @dev This function is designed to track the list of users who have opened a CDP (for each collateral type)\\n    ///       Since CDPs are never deleted once created, this index should not be update at any circumstances\\n    function accountIndex(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice access address of an account by index\\n    /// @param collateralType type of collateral\\n    /// @param index index of user\\n    /// @dev index \\ubc88\\uc9f8\\ub85c \\ub4e4\\uc5b4\\uc628 \\uc720\\uc800\\uc758 \\uc8fc\\uc18c\\ub97c \\ub9ac\\ud134\\n    /// @dev returns the address of {index}-th CDP opener\\n    function accountByIndex(bytes32 collateralType, uint256 index) external view returns (address);\\n\\n    /// @notice Total number of user who have opened a CDP (given collateral type) - always increasing\\n    /// @param collateralType type of collateral\\n    /// @dev \\uc9c0\\uae08\\uae4c\\uc9c0 cdp\\ub97c \\uc5f0 \\uc720\\uc800\\uc758 \\uc218\\n    function accountLength(bytes32 collateralType) external view returns (uint256);\\n\\n    /// @notice locked \\ub418\\uc9c0 \\uc54a\\uc740 \\ub2f4\\ubcf4\\ubb3c\\uc758 \\uc591. \\ub2e8, \\uc2e4\\uc81c \\ub2f4\\ubcf4\\ubb3c\\uc740 gateway \\ucee8\\ud2b8\\ub809\\ud2b8\\uac00 \\uad00\\ub9ac\\ud558\\uace0 \\uc788\\uc74c.\\n    /// @param collateralType type of collateral\\n    /// @param usr address of user\\n    /// @notice The amount of collateral that are not locked.\\n    function token(bytes32 collateralType, address usr) external view returns (uint256);\\n\\n    /// @notice \\ube4c\\ub9ac\\uac70\\ub098, ksdGateway\\ub97c \\ud1b5\\ud574\\uc11c \\ub4e4\\uc5b4\\uc628 ksd\\uc758 \\uc591.\\n    /// @param usr address of user\\n    /// @notice The amount of KSD lent to, or depositted by (through KSDGateway) the {usr}\\n    function ksd(address usr) external view returns (uint256);\\n\\n    /// @notice total KSD Issued [rad]\\n    function totalIssued() external view returns (uint256);\\n\\n    /// @notice Total Unbacked KSD [rad]\\n    function vice() external view returns (uint256);\\n\\n    /// @notice Total Debt Ceiling [rad]\\n    function line() external view returns (uint256);\\n\\n    /// @notice unbacked KSD [rad]\\n    function sin(address usr) external view returns (uint256);\\n\\n    /// @notice initialize collateral\\n    /// @param collateralType type of collateral to initialize.\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance\\n    function init(bytes32 collateralType) external;\\n\\n    /// @notice config something\\n    /// \\uc624\\uc9c1 \\uac70\\ubc84\\ub10c\\uc2a4\\uc640 \\uc624\\ub77c\\ud074 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4\\n    /// Should only be called by the governance and oracle\\n    function config(\\n        bytes32 collateralType,\\n        bytes32 what,\\n        uint256 data\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0a8\\ub2e4.\\n    ///          \\uc7a5\\ubd80\\uc758 \\uae30\\ub85d\\ub41c token\\uc758 \\uc591\\uc744 \\ubcc0\\ud654\\uc2dc\\uae30\\ud0a4 \\ub54c\\ubb38\\uc5d0 \\ubb34\\uc870\\uac74 \\ud5c8\\uac00\\ub41c contract\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    /// (eng)\\n    /// @notice Increase the amount of 'unlocked collateral'\\n    ///          (which means that the token is deposited into CDP but not yet considered as 'locked' as collateral)\\n    ///         This function changes the amount of 'unlocked collateral' of the CDP, so it should only be called by authorized contracts.\\n    function addCollateral(\\n        bytes32 collateralType,\\n        address usr,\\n        int256 amount\\n    ) external;\\n\\n    /// @notice token(lock \\ub418\\uc9c0 \\uc54a\\uc740 collateral)\\uc744 \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function.\\n    function sendCollateral(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        uint256 amoount\\n    ) external;\\n\\n    /// @notice ksd\\ub97c \\ub2e4\\ub978 account\\uc5d0 \\ubcf4\\ub0b4\\ub294 function. (\\uc2e4\\uc81c ksd token\\uc744 \\ubcf4\\ub0b4\\ub294 \\uac83\\uc774 \\uc544\\ub2c8\\ub77c, \\uc7a5\\ubd80 \\uc0c1\\uc758 \\uae30\\ub85d\\ub9cc \\ubc14\\ub01c)\\n    function sendKsd(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice token, ksd \\uc591\\uc744 \\ud1b5\\ud574\\uc11c vault\\uc758 \\uac12\\uc744 \\ubcc0\\ud654\\uc2dc\\ud0b4.\\n    /// @param collateralType type of collateral\\n    /// @param debtor owner of vault\\n    /// @param collateralVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 token\\uc758 owner) \\ub2f4\\ubcf4\\ubb3c\\uc744 \\uac00\\uc838\\uc624\\uac70\\ub098 vault\\uc5d0\\uc11c unlock \\uc2dc\\ud0a8 \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub123\\uc744 \\uc8fc\\uc18c\\n    /// @param ksdVault (\\ub124\\uc774\\ubc0d\\uc774 \\ud587\\uac08\\ub9ac\\uae30\\ub294 \\ud55c\\ub370, \\uc704 ksd\\uc758 owner) ksd\\ub97c vault\\uc5d0 \\ub123\\uc5b4\\uc8fc\\uac70\\ub098, vault\\uc5d0\\uc11c \\ube4c\\ub9b0 ksd\\ub97c \\ub123\\uc5b4\\uc904 \\uacf3\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev vault\\uc5d0 ksd\\ub97c \\uac1a\\uac70\\ub098/\\ube4c\\ub9ac\\uac70\\ub098, \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ub354 lock \\uc2dc\\ud0a4\\uac70\\ub098/\\ube7c\\uac70\\ub098\\n    /// \\ub2e8, vault\\ub294 \\ud56d\\uc0c1 safe \\ud574\\uc57c\\ud558\\uace0, dust \\uc774\\uc0c1\\uc758 ksd\\ub97c \\uc720\\uc9c0\\ud574\\uc57c \\ud55c\\ub2e4.\\n    /// \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4. \\uc608\\ub97c\\ub4e4\\uc5b4, \\ud5c8\\ub77d\\ubc1b\\uc9c0 \\uc54a\\uc740 \\uc0ac\\ub78c\\uc774 locked\\ub418\\uc9c0 \\uc54a\\uc740 \\ub0a8\\uc758 collateral\\ub97c \\uc790\\uc2e0\\uc758 vault\\ub85c lock \\uc2dc\\ud0a4\\uc9c0 \\ubabb\\ud574\\uc57c \\ud55c\\ub2e4.\\n    function actionLoan(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice vault\\uc5d0 \\uc7a0\\uae34 collateral\\uc591\\uc774\\ub098 ksd \\ubd80\\ucc44\\ub97c \\uc774\\ub3d9\\uc2dc\\ud0a8\\ub2e4.\\n    /// @param collateralType type of collateral\\n    /// @param src address of vault (accountInfo)\\n    /// @param dst address of vault (accountInfo)\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev \\uc0c1\\uc2dd\\uc801\\uc778 \\uc120\\uc5d0\\uc11c \\uad8c\\ud55c \\uad00\\ub9ac\\uac00 \\ud544\\uc694\\ud558\\ub2e4.\\n    function fork(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice \\ub2f4\\ubcf4\\ubb3c \\ubab0\\uc218 (confiscation)\\n    /// @param collateralType type of collateral\\n    /// @param debtor \\uccad\\uc0b0\\ub420 vault \\uc8fc\\uc18c\\n    /// @param collateralVault vault\\uc5d0\\uc11c locked\\ub41c \\ub2f4\\ubcf4\\ubb3c\\uc744 \\ubab0\\uc218\\ud574\\uac08 \\uc8fc\\uccb4. (\\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 \\ud56d\\uc0c1 auctionHouse. auction\\uc5d0\\uc11c \\ud314\\uc544\\uc57c \\ud558\\uae30 \\ub54c\\ubb38)\\n    /// @param ksdVault vault\\uc5d0\\uc11c \\ube4c\\ub824\\uac04 ksd\\ub294 \\ub2f4\\ubcf4\\ubb3c\\uc774 auction\\uc5d0 \\ub4e4\\uc5b4\\uac04 \\uc21c\\uac04 backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\uc774\\uae30 \\ub54c\\ubb38\\uc5d0, \\uc774\\uac83\\uc744 \\ub9e1\\uc544\\uc904 \\uc8fc\\uccb4\\uac00 \\ud544\\uc694. \\uc774 \\uc11c\\ube44\\uc2a4\\uc5d0\\uc11c\\ub294 minusBank\\uac00 \\ub9e1\\uc544\\uc900\\ub2e4.\\n    /// @param collateralAmount amount of collateral to change\\n    /// @param loanAmount amount of KSD to change\\n    /// @dev liquidator\\uc758 liquidate\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub9bc\\n    function grab(\\n        bytes32 collateralType,\\n        address debtor,\\n        address collateralVault,\\n        address ksdVault,\\n        int256 collateralAmount,\\n        int256 loanAmount\\n    ) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\uc0c1\\uc1c4\\ud558\\ub294 function. msg.sender\\uc758 ksd\\ub97c \\uc18c\\ubaa8\\ud55c\\ub2e4.\\n    function heal(uint256 amount) external;\\n\\n    /// @notice backing\\ub418\\uc9c0 \\uc54a\\uc740 ksd\\ub97c \\ub9cc\\ub4e4\\uc5b4\\uc11c msg.sender\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev minusBank\\uc5d0\\uc11c keeper\\ub4e4\\uc5d0\\uac8c incentive\\ub97c \\uc8fc\\uae30 \\uc704\\ud574\\uc11c, \\ubbf8\\ub9ac ksd\\ub97c \\ub300\\ucd9c\\ubc1b\\ub294 \\uc5ed\\ud560\\ub85c \\uc4f0\\uc778\\ub2e4.\\n    /// \\ub530\\ub77c\\uc11c, \\uc624\\uc9c1 minusBank\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function suck(\\n        address u,\\n        address v,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice stability fee\\ub97c ksdReceiver\\uc5d0\\uac8c \\uc900\\ub2e4.\\n    /// @dev StabilityFeeCollector\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function collectStabilityFee(\\n        bytes32 collateralType,\\n        address ksdReceiver,\\n        int256 rateDiff\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd665010e6fac1b9f0423339abad116c599c5ef2960fac177b2108fa68fd15b71\",\"license\":\"MIT\"},\"contracts/interface/IStabilityFeeCollector.sol\":{\"content\":\"pragma solidity ^0.8.3;\\n\\ninterface IStabilityFeeCollector {\\n    event UpdateRate(uint256 now, bytes32 collateralType, uint256 rate);\\n\\n    function stabilityFeeInfo(bytes32 collateralType) external view returns (uint256 ratioPerSecond, uint256 lastUpdatedAt);\\n\\n    function updateRatioPerSecond(bytes32 collateralType) external;\\n\\n    function updateRatioPerSecond() external;\\n\\n    function getRateToUpdate(bytes32 collateralType) external view returns (uint256 rate);\\n\\n    function updateRate(bytes32 collateralType) external;\\n}\\n\",\"keccak256\":\"0xa449ee8c68eaa76c03ba09c85bdd64bbbc8576d1bfbc5d5ed83c9e698c39b579\"},\"contracts/interface/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IYieldManager {\\n    struct YieldRecord {\\n        uint256 accYieldApr; // time weighted accumulative\\n        uint256 accEarnedKsdAmount;\\n        uint256 accRefundedKsdAmount;\\n        uint256 accStabilityFeeKsdAmount;\\n        uint256 accTargetKsdAmount; // exepct accumTargetKsdAmount == accumEarnedKsdAmount - accumRefundedKsdAmount + accumStabilityFeeKsdAmount\\n        uint256 totalLoan;\\n        uint256 rate;\\n        uint256 timestamp;\\n    }\\n\\n    function yieldFactory(bytes32 collateralType) external view returns (address);\\n\\n    function record(bytes32 collateralType, uint256 index)\\n        external\\n        view\\n        returns (\\n            uint256 accYieldApr,\\n            uint256 accEarnedKsdAmount,\\n            uint256 accRefundedKsdAmount,\\n            uint256 accStabilityFeeKsdAmount,\\n            uint256 accTargetKsdAmount,\\n            uint256 totalLoan,\\n            uint256 rate,\\n            uint256 timestamp\\n        );\\n\\n    function recordLength(bytes32 collateralType) external view returns (uint256);\\n\\n    function saveRecord(\\n        bytes32 collateralType,\\n        uint256 earnedKsdAmount,\\n        uint256 refundedKsdAmount,\\n        uint256 stabilityFeeKsdAmount,\\n        uint256 targetKsdAmount\\n    ) external;\\n\\n    function getYieldApr(bytes32 collateralType) external view returns (uint256);\\n\\n    function getTargetApr() external view returns (uint256);\\n\\n    function manageProfit(bytes32 collateralType, uint256 earnedKsdAmount) external;\\n}\\n\",\"keccak256\":\"0xf1b43930ed7b5bb9ab5b4c18ea14b959ce3e57d20ebeabfb67dc4ec757d8dab8\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfWAD) / b, \\\"WadRayMath::wadMul: overflow\\\");\\n\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::wadDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / WAD, \\\"WadRayMath::wadDiv: overflow\\\");\\n\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - halfRAY) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n        uint256 halfB = b / 2;\\n\\n        require(a <= (type(uint256).max - halfB) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    function rayCeilMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        require(a <= (type(uint256).max - RAY + 1) / b, \\\"WadRayMath::rayMul: overflow\\\");\\n\\n        return (a * b + RAY - 1) / RAY;\\n    }\\n\\n    function rayCeilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"WadRayMath::rayDiv: divide by zero\\\");\\n\\n        require(a <= (type(uint256).max - b + 1) / RAY, \\\"WadRayMath::rayDiv: overflow\\\");\\n\\n        return (a * RAY + b - 1) / b;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"WadRayMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    // copy from maker dao\\n    // https://github.com/makerdao/dss/blob/6c1c780d3c8ab6e27ea63d272e0d1176b05b9871/src/jug.sol#L62\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 b\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(b, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, b)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, \\\"WadRayMath::rayToWad: overflow\\\");\\n\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, \\\"WadRayMath::wadToRay: overflow\\\");\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xbfda078b46cc0f7958d40bf2a4d9b8c10f3405680093aa3004c2e76e515651c4\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    function add(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + uint256(y);\\n            require(y >= 0 || z <= x, \\\"Math: addition overflow\\\");\\n            require(y <= 0 || z >= x, \\\"Math: addition overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - uint256(y);\\n            require(y <= 0 || z <= x, \\\"Math: subtraction overflow\\\");\\n            require(y >= 0 || z >= x, \\\"Math: subtraction overflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = int256(x) * y;\\n            require(int256(x) >= 0, \\\"Math: multiplication overflow\\\");\\n            require(y == 0 || z / y == int256(x), \\\"Math: multiplication overflow\\\");\\n        }\\n    }\\n\\n    function mul(int256 x, uint256 y) internal pure returns (int256 z) {\\n        z = x * int256(y);\\n        require(int256(y) >= 0, \\\"Math: multiplication overflow\\\");\\n        require(x == 0 || z / x == int256(y), \\\"Math: multiplication overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    // from uniswap\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n            z = x;\\n            x = (y / x + x) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd94cce7a88a43ad7e95b468dbd59a18e62f95be8b23a1619e0b96bfc1246eae1\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/yield/YieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../library/AccessControl.sol\\\";\\nimport \\\"../library/Pausable.sol\\\";\\nimport \\\"../library/openzeppelin/contracts/utils/Math.sol\\\";\\nimport \\\"../library/WadRayMath.sol\\\";\\nimport \\\"../interface/IStabilityFeeCollector.sol\\\";\\nimport \\\"../interface/IYieldManager.sol\\\";\\nimport \\\"../interface/ILedger.sol\\\";\\nimport \\\"../interface/kip/IKIP7.sol\\\";\\nimport \\\"../interface/IKsdRefundManager.sol\\\";\\nimport \\\"../interface/IDistributor.sol\\\";\\n\\ncontract YieldManager is IYieldManager, AccessControl, Pausable {\\n    using WadRayMath for uint256;\\n\\n    mapping(bytes32 => address) public override yieldFactory;\\n    mapping(bytes32 => YieldRecord[]) public override record;\\n    mapping(bytes32 => uint256) public prevCursor;\\n\\n    ILedger public ledger;\\n    IKIP7 public ksd;\\n    IStabilityFeeCollector public stabilityFeeCollector;\\n    IDistributor public ksdRewardManager;\\n    IKsdRefundManager public ksdRefundManager;\\n\\n    function __YieldManager_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    function config(bytes32 what, address data) external onlyOwner {\\n        if (what == \\\"ledger\\\") ledger = ILedger(data);\\n        else if (what == \\\"ksd\\\") ksd = IKIP7(data);\\n        else if (what == \\\"stabilityFeeCollector\\\") stabilityFeeCollector = IStabilityFeeCollector(data);\\n        else if (what == \\\"ksdRewardManager\\\") ksdRewardManager = IDistributor(data);\\n        else if (what == \\\"ksdRefundManager\\\") ksdRefundManager = IKsdRefundManager(data);\\n        else revert(\\\"YieldManager::config:unrecognized-param\\\");\\n    }\\n\\n    function setYieldFactory(bytes32 collateralType, address yieldFactory_) external onlyAdmin {\\n        yieldFactory[collateralType] = yieldFactory_;\\n    }\\n\\n    function recordLength(bytes32 collateralType) external view override returns (uint256) {\\n        return record[collateralType].length;\\n    }\\n\\n    function saveRecord(\\n        bytes32 collateralType,\\n        uint256 earnedKsdAmount,\\n        uint256 refundedKsdAmount,\\n        uint256 stabilityFeeKsdAmount,\\n        uint256 targetKsdAmount\\n    ) public override onlyAdmin whenNotPaused {\\n        (, uint256 totalLoan, uint256 rate, , , ) = ledger.collateralInfo(collateralType);\\n        uint256 totalLoanedKsdAmount = (totalLoan * rate) / WadRayMath.RAY;\\n        if (totalLoanedKsdAmount <= 0) {\\n            return;\\n        }\\n\\n        uint256 accEarnedKsdAmount = earnedKsdAmount;\\n        uint256 accRefundedKsdAmount = refundedKsdAmount;\\n        uint256 accStabilityFeeKsdAmount = stabilityFeeKsdAmount;\\n        uint256 accTargetKsdAmount = targetKsdAmount;\\n        uint256 accYieldApr = (earnedKsdAmount * WadRayMath.RAY * 365 days) / totalLoanedKsdAmount;\\n\\n        YieldRecord[] storage recordList = record[collateralType];\\n        if (recordList.length > 0) {\\n            accYieldApr += recordList[recordList.length - 1].accYieldApr;\\n            accEarnedKsdAmount += recordList[recordList.length - 1].accEarnedKsdAmount;\\n            accRefundedKsdAmount += recordList[recordList.length - 1].accRefundedKsdAmount;\\n            accStabilityFeeKsdAmount += recordList[recordList.length - 1].accStabilityFeeKsdAmount;\\n            accTargetKsdAmount += recordList[recordList.length - 1].accTargetKsdAmount;\\n        }\\n        recordList.push(\\n            YieldRecord({\\n                accYieldApr: accYieldApr,\\n                accEarnedKsdAmount: accEarnedKsdAmount,\\n                accRefundedKsdAmount: accRefundedKsdAmount,\\n                accStabilityFeeKsdAmount: accStabilityFeeKsdAmount,\\n                accTargetKsdAmount: accTargetKsdAmount,\\n                totalLoan: totalLoan,\\n                rate: rate,\\n                timestamp: block.timestamp\\n            })\\n        );\\n        updateCursor(collateralType);\\n    }\\n\\n    // ksd apr\\n    function updateCursor(bytes32 collateralType) public whenNotPaused {\\n        YieldRecord[] storage recordList = record[collateralType];\\n        uint256 length = recordList.length;\\n        if (length <= 1) {\\n            return;\\n        }\\n        YieldRecord memory curRecord = recordList[length - 1];\\n        uint256 _prevCursor = prevCursor[collateralType];\\n\\n        uint256 i = _prevCursor;\\n        for (; i < _prevCursor + 100; i++) {\\n            if (recordList[i + 1].timestamp < curRecord.timestamp - 2 hours) {\\n                continue;\\n            }\\n            break;\\n        }\\n        prevCursor[collateralType] = i;\\n    }\\n\\n    function getYieldApr(bytes32 collateralType) public view override returns (uint256) {\\n        YieldRecord[] storage recordList = record[collateralType];\\n        if (recordList.length <= 1) {\\n            return 0;\\n        }\\n        YieldRecord memory curRecord = recordList[recordList.length - 1];\\n        YieldRecord memory prevRecord = recordList[prevCursor[collateralType]];\\n        if (curRecord.timestamp <= 0 || prevRecord.timestamp <= 0) {\\n            return 0;\\n        }\\n        return (curRecord.accYieldApr - prevRecord.accYieldApr) / (curRecord.timestamp - prevRecord.timestamp);\\n    }\\n\\n    function getTargetApr() public view override returns (uint256) {\\n        uint256 klayYieldApr = getYieldApr(bytes32(\\\"klay\\\"));\\n        return klayYieldApr;\\n    }\\n\\n    function manageProfit(bytes32 collateralType, uint256 earnedKsdAmount) external override onlyAdmin whenNotPaused {\\n        ksd.transferFrom(msg.sender, address(this), earnedKsdAmount);\\n        if (collateralType == bytes32(\\\"klay\\\")) {\\n            ksd.approve(address(ksdRewardManager), earnedKsdAmount);\\n            ksdRewardManager.distribute(earnedKsdAmount);\\n            saveRecord(collateralType, earnedKsdAmount, 0, 0, earnedKsdAmount);\\n            return;\\n        }\\n\\n        (, uint256 totalLoan, uint256 rate, , , ) = ledger.collateralInfo(collateralType);\\n\\n        YieldRecord[] storage recordList = record[collateralType];\\n        if (recordList.length < 1) {\\n            ksd.approve(address(ksdRewardManager), earnedKsdAmount);\\n            ksdRewardManager.distribute(earnedKsdAmount);\\n            stabilityFeeCollector.updateRate(collateralType);\\n            saveRecord(collateralType, earnedKsdAmount, 0, 0, 0);\\n            return;\\n        }\\n        YieldRecord memory curRecord = recordList[recordList.length - 1];\\n        YieldRecord memory prevRecord = recordList[prevCursor[collateralType]];\\n\\n        uint256 stabilityFeeKsdAmount = 0;\\n        uint256 targetKsdAmount = 0;\\n        uint256 ksdAmountToRefund = 0;\\n        {\\n            {\\n                uint256 elapsedTime = block.timestamp - curRecord.timestamp;\\n                uint256 loanedKsdAmount = curRecord.totalLoan.rayMul(curRecord.rate);\\n                uint256 nextRate = stabilityFeeCollector.getRateToUpdate(collateralType);\\n                stabilityFeeKsdAmount = totalLoan.rayMul(nextRate - rate);\\n                targetKsdAmount = (loanedKsdAmount.rayMul(getTargetApr()) * elapsedTime) / 365 days;\\n            }\\n\\n            uint256 earnedKsdAmountForClosedInterval = curRecord.accEarnedKsdAmount - prevRecord.accEarnedKsdAmount + earnedKsdAmount;\\n            uint256 refundedKsdAmountForOpenInterval = curRecord.accRefundedKsdAmount - prevRecord.accRefundedKsdAmount; // wad\\n            uint256 stabilityFeeKsdAmountForClosedInterval = curRecord.accStabilityFeeKsdAmount +\\n                stabilityFeeKsdAmount -\\n                prevRecord.accStabilityFeeKsdAmount; // wad\\n            uint256 targetKsdAmountForClosedInterval = curRecord.accTargetKsdAmount + targetKsdAmount - prevRecord.accTargetKsdAmount; // wad\\n\\n            uint256 gatheredKsdAmount = (earnedKsdAmountForClosedInterval +\\n                stabilityFeeKsdAmountForClosedInterval -\\n                refundedKsdAmountForOpenInterval);\\n            if (gatheredKsdAmount > targetKsdAmountForClosedInterval) {\\n                 ksdAmountToRefund = gatheredKsdAmount - targetKsdAmountForClosedInterval;\\n                 ksdAmountToRefund = Math.min(ksdAmountToRefund, earnedKsdAmount);\\n            }\\n        }\\n\\n        ksd.approve(address(ksdRefundManager), ksdAmountToRefund);\\n        ksd.approve(address(ksdRewardManager), earnedKsdAmount - ksdAmountToRefund);\\n        ksdRefundManager.refund(collateralType, ksdAmountToRefund);\\n        ksdRewardManager.distribute(earnedKsdAmount - ksdAmountToRefund);\\n        stabilityFeeCollector.updateRate(collateralType);\\n        saveRecord(collateralType, earnedKsdAmount, ksdAmountToRefund, stabilityFeeKsdAmount, targetKsdAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x621bda6369c5471624f7497b822a90a45e23275d020cc2f878e08e52d693f0ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611fda806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638456cb59116100f9578063d090e67611610097578063eae1c14d11610071578063eae1c14d146103bb578063ed1f87dd146103ce578063f2fde38b146103e1578063fceb239c146103f4576101a9565b8063d090e67614610382578063d366f3b914610395578063d547741f146103a8576101a9565b8063a6d5f103116100d3578063a6d5f10314610329578063b4cbe3961461033c578063c9251be41461035c578063d05f70711461036f576101a9565b80638456cb591461030657806391d148541461030e578063a217fddf14610321576101a9565b806336568abe1161016657806356397c351161014057806356397c35146102b65780635c975abb146102c957806367414102146102e057806371ccecb6146102f3576101a9565b806336568abe1461025a5780633a45095b1461026d5780633f4ba83a146102ae576101a9565b80630e34ac4e146101ae5780630f5bcc72146101c957806318c9d00b14610217578063248a9ca3146102215780632f2ff15d1461023457806332ad61dd14610247575b600080fd5b6101b6610414565b6040519081526020015b60405180910390f35b6101dc6101d7366004611dd1565b61042d565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016101c0565b61021f610492565b005b6101b661022f366004611d8e565b610519565b61021f610242366004611da6565b610532565b61021f610255366004611d8e565b610554565b61021f610268366004611da6565b6106d0565b61029661027b366004611d8e565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101c0565b61021f61074e565b600654610296906001600160a01b031681565b60025460ff165b60405190151581526020016101c0565b6101b66102ee366004611d8e565b6107ec565b600a54610296906001600160a01b031681565b61021f610999565b6102d061031c366004611da6565b610a0d565b6101b6600081565b600754610296906001600160a01b031681565b6101b661034a366004611d8e565b60009081526004602052604090205490565b61021f61036a366004611da6565b610a3a565b600954610296906001600160a01b031681565b600854610296906001600160a01b031681565b61021f6103a3366004611da6565b610a7a565b61021f6103b6366004611da6565b610bf9565b61021f6103c9366004611dd1565b610c16565b61021f6103dc366004611df2565b611544565b61021f6103ef366004611d54565b6118b7565b6101b6610402366004611d8e565b60056020526000908152604090205481565b600080610427636b6c617960e01b6107ec565b91505090565b6004602052816000526040600020818154811061044957600080fd5b9060005260206000209060080201600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b600054610100900460ff16806104a75750303b155b806104b5575060005460ff16155b6104da5760405162461bcd60e51b81526004016104d190611eb7565b60405180910390fd5b600054610100900460ff161580156104fc576000805461ffff19166101011790555b6105046118ed565b8015610516576000805461ff00191690555b50565b600081815260016020819052604090912001545b919050565b61053b82610519565b6105458133611984565b61054f83836119e8565b505050565b60025460ff16156105775760405162461bcd60e51b81526004016104d190611e8d565b6000818152600460205260409020805460018111610596575050610516565b6000826105a4600184611f5c565b815481106105c257634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805161010081018252600890940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058082015460a0860152600682015460c086015260079091015460e085015288855290915290912054909150805b610643826064611f05565b8110156106ba57611c208360e0015161065c9190611f5c565b85610668836001611f05565b8154811061068657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016007015410156106a3576106a8565b6106ba565b806106b281611f73565b915050610638565b6000868152600560205260409020555050505050565b6001600160a01b03811633146107405760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104d1565b61074a8282611a53565b5050565b60025460ff166107975760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104d1565b653830bab9b2b960d11b6107ab8133611984565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6000818152600460205260408120805460011061080d57600091505061052d565b8054600090829061082090600190611f5c565b8154811061083e57634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805161010081018252600890940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058082015460a0860152600682015460c086015260079091015460e08501528885529091528220548454919350849181106108d157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905060008260e00151111580610953575060e0810151155b15610964576000935050505061052d565b8060e001518260e001516109789190611f5c565b815183516109869190611f5c565b6109909190611f1d565b95945050505050565b60025460ff16156109bc5760405162461bcd60e51b81526004016104d190611e8d565b653830bab9b2b960d11b6109d08133611984565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016107e1565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b610a4c6430b236b4b760d91b33611984565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b610a8c6437bbb732b960d91b33611984565b81653632b233b2b960d11b1415610abd57600680546001600160a01b0319166001600160a01b03831617905561074a565b81621adcd960ea1b1415610aeb57600780546001600160a01b0319166001600160a01b03831617905561074a565b817439ba30b134b634ba3ca332b2a1b7b63632b1ba37b960591b1415610b2b57600880546001600160a01b0319166001600160a01b03831617905561074a565b816f35b9b22932bbb0b93226b0b730b3b2b960811b1415610b6657600980546001600160a01b0319166001600160a01b03831617905561074a565b816f35b9b22932b33ab73226b0b730b3b2b960811b1415610ba157600a80546001600160a01b0319166001600160a01b03831617905561074a565b60405162461bcd60e51b815260206004820152602760248201527f5969656c644d616e616765723a3a636f6e6669673a756e7265636f676e697a65604482015266642d706172616d60c81b60648201526084016104d1565b610c0282610519565b610c0c8133611984565b61054f8383611a53565b610c286430b236b4b760d91b33611984565b60025460ff1615610c4b5760405162461bcd60e51b81526004016104d190611e8d565b6007546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190611d6e565b50636b6c617960e01b821415610ddf5760075460095460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015610d3557600080fd5b505af1158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d9190611d6e565b506009546040516391c05b0b60e01b8152600481018390526001600160a01b03909116906391c05b0b90602401600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b50505050610dda828260008085611544565b61074a565b600654604051637d5422a760e01b81526004810184905260009182916001600160a01b0390911690637d5422a79060240160c06040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611e44565b50505060008781526004602052604090208054929550909350915060011115610fdf5760075460095460405163095ea7b360e01b81526001600160a01b0391821660048201526024810187905291169063095ea7b390604401602060405180830381600087803b158015610ed357600080fd5b505af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190611d6e565b506009546040516391c05b0b60e01b8152600481018690526001600160a01b03909116906391c05b0b90602401600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b5050600854604051637b66492160e11b8152600481018990526001600160a01b03909116925063f6cc92429150602401600060405180830381600087803b158015610fb057600080fd5b505af1158015610fc4573d6000803e3d6000fd5b50505050610fd785856000806000611544565b50505061074a565b80546000908290610ff290600190611f5c565b8154811061101057634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805161010081018252600890940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058082015460a0860152600682015460c086015260079091015460e08501528a85529091528220548454919350849181106110a357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000806000808560e00151426111259190611f5c565b905060006111448760c001518860a00151611aba90919063ffffffff16565b6008546040516324f3163560e01b8152600481018f90529192506000916001600160a01b03909116906324f316359060240160206040518083038186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190611e2c565b90506111dc6111d58b83611f5c565b8c90611aba565b95506301e13380836111f66111ef610414565b8590611aba565b6112009190611f3d565b61120a9190611f1d565b9450505050600089856020015187602001516112269190611f5c565b6112309190611f05565b90506000856040015187604001516112489190611f5c565b9050600086606001518689606001516112619190611f05565b61126b9190611f5c565b905060008760800151868a608001516112849190611f05565b61128e9190611f5c565b905060008361129d8487611f05565b6112a79190611f5c565b9050818111156112ca576112bb8282611f5c565b95506112c7868f611b8e565b95505b5050600754600a5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529116935063095ea7b392506044019050602060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190611d6e565b506007546009546001600160a01b039182169163095ea7b3911661137c848d611f5c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190611d6e565b50600a5460405163695eda1960e01b8152600481018c9052602481018390526001600160a01b039091169063695eda1990604401600060405180830381600087803b15801561144857600080fd5b505af115801561145c573d6000803e3d6000fd5b50506009546001600160a01b031691506391c05b0b905061147d838c611f5c565b6040518263ffffffff1660e01b815260040161149b91815260200190565b600060405180830381600087803b1580156114b557600080fd5b505af11580156114c9573d6000803e3d6000fd5b5050600854604051637b66492160e11b8152600481018e90526001600160a01b03909116925063f6cc92429150602401600060405180830381600087803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b505050506115388a8a838686611544565b50505050505050505050565b6115566430b236b4b760d91b33611984565b60025460ff16156115795760405162461bcd60e51b81526004016104d190611e8d565b600654604051637d5422a760e01b81526004810187905260009182916001600160a01b0390911690637d5422a79060240160c06040518083038186803b1580156115c257600080fd5b505afa1580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa9190611e44565b505050925092505060006b033b2e3c9fd0803ce8000000828461161d9190611f3d565b6116279190611f1d565b905060008111611639575050506118b0565b868686866000856116566b033b2e3c9fd0803ce800000087611f3d565b611664906301e13380611f3d565b61166e9190611f1d565b60008e81526004602052604090208054919250901561180d578054819061169790600190611f5c565b815481106116b557634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160000154826116d29190611f05565b815490925081906116e590600190611f5c565b8154811061170357634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160010154866117209190611f05565b8154909650819061173390600190611f5c565b8154811061175157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600201548561176e9190611f05565b8154909550819061178190600190611f5c565b8154811061179f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160030154846117bc9190611f05565b815490945081906117cf90600190611f5c565b815481106117ed57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600401548361180a9190611f05565b92505b60408051610100810182528381526020808201898152928201888152606083018881526080840188815260a085018f815260c086018f81524260e08801908152895460018181018c5560008c81529890982098516008909102909801978855975195870195909555925160028601559051600385015551600484015551600583015551600682015590516007909101556118a68e610554565b5050505050505050505b5050505050565b6118c96437bbb732b960d91b33611984565b6118db6437bbb732b960d91b826119e8565b6105166437bbb732b960d91b33611a53565b600054610100900460ff16806119025750303b155b80611910575060005460ff16155b61192c5760405162461bcd60e51b81526004016104d190611eb7565b600054610100900460ff1615801561194e576000805461ffff19166101011790555b611956611ba4565b611971653830bab9b2b960d11b6437bbb732b960d91b611c0d565b610504653830bab9b2b960d11b33611c62565b61198e8282610a0d565b61074a5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016104d1565b6119f28282610a0d565b61074a5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611a5d8282610a0d565b1561074a5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000821580611ac7575081155b15611ad457506000610a34565b81611aec60026b033b2e3c9fd0803ce8000000611f1d565b611af890600019611f5c565b611b029190611f1d565b831115611b515760405162461bcd60e51b815260206004820152601c60248201527f5761645261794d6174683a3a7261794d756c3a206f766572666c6f770000000060448201526064016104d1565b6b033b2e3c9fd0803ce8000000611b69600282611f1d565b611b738486611f3d565b611b7d9190611f05565b611b879190611f1d565b9392505050565b6000818310611b9d5781611b87565b5090919050565b600054610100900460ff1680611bb95750303b155b80611bc7575060005460ff16155b611be35760405162461bcd60e51b81526004016104d190611eb7565b600054610100900460ff16158015611c05576000805461ffff19166101011790555b610504611c6c565b6000611c1883610519565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61074a82826119e8565b600054610100900460ff1680611c815750303b155b80611c8f575060005460ff16155b611cab5760405162461bcd60e51b81526004016104d190611eb7565b600054610100900460ff16158015611ccd576000805461ffff19166101011790555b611cdf6437bbb732b960d91b33611c62565b611cf96430b236b4b760d91b6437bbb732b960d91b611c0d565b611d166737b832b930ba37b960c11b6437bbb732b960d91b611c0d565b611d286430b236b4b760d91b33611c62565b6105046737b832b930ba37b960c11b33611c62565b80356001600160a01b038116811461052d57600080fd5b600060208284031215611d65578081fd5b611b8782611d3d565b600060208284031215611d7f578081fd5b81518015158114611b87578182fd5b600060208284031215611d9f578081fd5b5035919050565b60008060408385031215611db8578081fd5b82359150611dc860208401611d3d565b90509250929050565b60008060408385031215611de3578182fd5b50508035926020909101359150565b600080600080600060a08688031215611e09578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208284031215611e3d578081fd5b5051919050565b60008060008060008060c08789031215611e5c578081fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115611f1857611f18611f8e565b500190565b600082611f3857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f5757611f57611f8e565b500290565b600082821015611f6e57611f6e611f8e565b500390565b6000600019821415611f8757611f87611f8e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206ac194019430341b0721af7699eeeaae7f9830b5449add3b766340c16049b15b64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638456cb59116100f9578063d090e67611610097578063eae1c14d11610071578063eae1c14d146103bb578063ed1f87dd146103ce578063f2fde38b146103e1578063fceb239c146103f4576101a9565b8063d090e67614610382578063d366f3b914610395578063d547741f146103a8576101a9565b8063a6d5f103116100d3578063a6d5f10314610329578063b4cbe3961461033c578063c9251be41461035c578063d05f70711461036f576101a9565b80638456cb591461030657806391d148541461030e578063a217fddf14610321576101a9565b806336568abe1161016657806356397c351161014057806356397c35146102b65780635c975abb146102c957806367414102146102e057806371ccecb6146102f3576101a9565b806336568abe1461025a5780633a45095b1461026d5780633f4ba83a146102ae576101a9565b80630e34ac4e146101ae5780630f5bcc72146101c957806318c9d00b14610217578063248a9ca3146102215780632f2ff15d1461023457806332ad61dd14610247575b600080fd5b6101b6610414565b6040519081526020015b60405180910390f35b6101dc6101d7366004611dd1565b61042d565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016101c0565b61021f610492565b005b6101b661022f366004611d8e565b610519565b61021f610242366004611da6565b610532565b61021f610255366004611d8e565b610554565b61021f610268366004611da6565b6106d0565b61029661027b366004611d8e565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101c0565b61021f61074e565b600654610296906001600160a01b031681565b60025460ff165b60405190151581526020016101c0565b6101b66102ee366004611d8e565b6107ec565b600a54610296906001600160a01b031681565b61021f610999565b6102d061031c366004611da6565b610a0d565b6101b6600081565b600754610296906001600160a01b031681565b6101b661034a366004611d8e565b60009081526004602052604090205490565b61021f61036a366004611da6565b610a3a565b600954610296906001600160a01b031681565b600854610296906001600160a01b031681565b61021f6103a3366004611da6565b610a7a565b61021f6103b6366004611da6565b610bf9565b61021f6103c9366004611dd1565b610c16565b61021f6103dc366004611df2565b611544565b61021f6103ef366004611d54565b6118b7565b6101b6610402366004611d8e565b60056020526000908152604090205481565b600080610427636b6c617960e01b6107ec565b91505090565b6004602052816000526040600020818154811061044957600080fd5b9060005260206000209060080201600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b600054610100900460ff16806104a75750303b155b806104b5575060005460ff16155b6104da5760405162461bcd60e51b81526004016104d190611eb7565b60405180910390fd5b600054610100900460ff161580156104fc576000805461ffff19166101011790555b6105046118ed565b8015610516576000805461ff00191690555b50565b600081815260016020819052604090912001545b919050565b61053b82610519565b6105458133611984565b61054f83836119e8565b505050565b60025460ff16156105775760405162461bcd60e51b81526004016104d190611e8d565b6000818152600460205260409020805460018111610596575050610516565b6000826105a4600184611f5c565b815481106105c257634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805161010081018252600890940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058082015460a0860152600682015460c086015260079091015460e085015288855290915290912054909150805b610643826064611f05565b8110156106ba57611c208360e0015161065c9190611f5c565b85610668836001611f05565b8154811061068657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016007015410156106a3576106a8565b6106ba565b806106b281611f73565b915050610638565b6000868152600560205260409020555050505050565b6001600160a01b03811633146107405760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104d1565b61074a8282611a53565b5050565b60025460ff166107975760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104d1565b653830bab9b2b960d11b6107ab8133611984565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6000818152600460205260408120805460011061080d57600091505061052d565b8054600090829061082090600190611f5c565b8154811061083e57634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805161010081018252600890940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058082015460a0860152600682015460c086015260079091015460e08501528885529091528220548454919350849181106108d157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905060008260e00151111580610953575060e0810151155b15610964576000935050505061052d565b8060e001518260e001516109789190611f5c565b815183516109869190611f5c565b6109909190611f1d565b95945050505050565b60025460ff16156109bc5760405162461bcd60e51b81526004016104d190611e8d565b653830bab9b2b960d11b6109d08133611984565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016107e1565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b610a4c6430b236b4b760d91b33611984565b60009182526003602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b610a8c6437bbb732b960d91b33611984565b81653632b233b2b960d11b1415610abd57600680546001600160a01b0319166001600160a01b03831617905561074a565b81621adcd960ea1b1415610aeb57600780546001600160a01b0319166001600160a01b03831617905561074a565b817439ba30b134b634ba3ca332b2a1b7b63632b1ba37b960591b1415610b2b57600880546001600160a01b0319166001600160a01b03831617905561074a565b816f35b9b22932bbb0b93226b0b730b3b2b960811b1415610b6657600980546001600160a01b0319166001600160a01b03831617905561074a565b816f35b9b22932b33ab73226b0b730b3b2b960811b1415610ba157600a80546001600160a01b0319166001600160a01b03831617905561074a565b60405162461bcd60e51b815260206004820152602760248201527f5969656c644d616e616765723a3a636f6e6669673a756e7265636f676e697a65604482015266642d706172616d60c81b60648201526084016104d1565b610c0282610519565b610c0c8133611984565b61054f8383611a53565b610c286430b236b4b760d91b33611984565b60025460ff1615610c4b5760405162461bcd60e51b81526004016104d190611e8d565b6007546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190611d6e565b50636b6c617960e01b821415610ddf5760075460095460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015610d3557600080fd5b505af1158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d9190611d6e565b506009546040516391c05b0b60e01b8152600481018390526001600160a01b03909116906391c05b0b90602401600060405180830381600087803b158015610db457600080fd5b505af1158015610dc8573d6000803e3d6000fd5b50505050610dda828260008085611544565b61074a565b600654604051637d5422a760e01b81526004810184905260009182916001600160a01b0390911690637d5422a79060240160c06040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611e44565b50505060008781526004602052604090208054929550909350915060011115610fdf5760075460095460405163095ea7b360e01b81526001600160a01b0391821660048201526024810187905291169063095ea7b390604401602060405180830381600087803b158015610ed357600080fd5b505af1158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190611d6e565b506009546040516391c05b0b60e01b8152600481018690526001600160a01b03909116906391c05b0b90602401600060405180830381600087803b158015610f5257600080fd5b505af1158015610f66573d6000803e3d6000fd5b5050600854604051637b66492160e11b8152600481018990526001600160a01b03909116925063f6cc92429150602401600060405180830381600087803b158015610fb057600080fd5b505af1158015610fc4573d6000803e3d6000fd5b50505050610fd785856000806000611544565b50505061074a565b80546000908290610ff290600190611f5c565b8154811061101057634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805161010081018252600890940290910180548452600181015484840152600281015484830152600381015460608501526004810154608085015260058082015460a0860152600682015460c086015260079091015460e08501528a85529091528220548454919350849181106110a357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000806000808560e00151426111259190611f5c565b905060006111448760c001518860a00151611aba90919063ffffffff16565b6008546040516324f3163560e01b8152600481018f90529192506000916001600160a01b03909116906324f316359060240160206040518083038186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190611e2c565b90506111dc6111d58b83611f5c565b8c90611aba565b95506301e13380836111f66111ef610414565b8590611aba565b6112009190611f3d565b61120a9190611f1d565b9450505050600089856020015187602001516112269190611f5c565b6112309190611f05565b90506000856040015187604001516112489190611f5c565b9050600086606001518689606001516112619190611f05565b61126b9190611f5c565b905060008760800151868a608001516112849190611f05565b61128e9190611f5c565b905060008361129d8487611f05565b6112a79190611f5c565b9050818111156112ca576112bb8282611f5c565b95506112c7868f611b8e565b95505b5050600754600a5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529116935063095ea7b392506044019050602060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190611d6e565b506007546009546001600160a01b039182169163095ea7b3911661137c848d611f5c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa9190611d6e565b50600a5460405163695eda1960e01b8152600481018c9052602481018390526001600160a01b039091169063695eda1990604401600060405180830381600087803b15801561144857600080fd5b505af115801561145c573d6000803e3d6000fd5b50506009546001600160a01b031691506391c05b0b905061147d838c611f5c565b6040518263ffffffff1660e01b815260040161149b91815260200190565b600060405180830381600087803b1580156114b557600080fd5b505af11580156114c9573d6000803e3d6000fd5b5050600854604051637b66492160e11b8152600481018e90526001600160a01b03909116925063f6cc92429150602401600060405180830381600087803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b505050506115388a8a838686611544565b50505050505050505050565b6115566430b236b4b760d91b33611984565b60025460ff16156115795760405162461bcd60e51b81526004016104d190611e8d565b600654604051637d5422a760e01b81526004810187905260009182916001600160a01b0390911690637d5422a79060240160c06040518083038186803b1580156115c257600080fd5b505afa1580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa9190611e44565b505050925092505060006b033b2e3c9fd0803ce8000000828461161d9190611f3d565b6116279190611f1d565b905060008111611639575050506118b0565b868686866000856116566b033b2e3c9fd0803ce800000087611f3d565b611664906301e13380611f3d565b61166e9190611f1d565b60008e81526004602052604090208054919250901561180d578054819061169790600190611f5c565b815481106116b557634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160000154826116d29190611f05565b815490925081906116e590600190611f5c565b8154811061170357634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160010154866117209190611f05565b8154909650819061173390600190611f5c565b8154811061175157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600201548561176e9190611f05565b8154909550819061178190600190611f5c565b8154811061179f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020160030154846117bc9190611f05565b815490945081906117cf90600190611f5c565b815481106117ed57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600401548361180a9190611f05565b92505b60408051610100810182528381526020808201898152928201888152606083018881526080840188815260a085018f815260c086018f81524260e08801908152895460018181018c5560008c81529890982098516008909102909801978855975195870195909555925160028601559051600385015551600484015551600583015551600682015590516007909101556118a68e610554565b5050505050505050505b5050505050565b6118c96437bbb732b960d91b33611984565b6118db6437bbb732b960d91b826119e8565b6105166437bbb732b960d91b33611a53565b600054610100900460ff16806119025750303b155b80611910575060005460ff16155b61192c5760405162461bcd60e51b81526004016104d190611eb7565b600054610100900460ff1615801561194e576000805461ffff19166101011790555b611956611ba4565b611971653830bab9b2b960d11b6437bbb732b960d91b611c0d565b610504653830bab9b2b960d11b33611c62565b61198e8282610a0d565b61074a5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016104d1565b6119f28282610a0d565b61074a5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611a5d8282610a0d565b1561074a5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000821580611ac7575081155b15611ad457506000610a34565b81611aec60026b033b2e3c9fd0803ce8000000611f1d565b611af890600019611f5c565b611b029190611f1d565b831115611b515760405162461bcd60e51b815260206004820152601c60248201527f5761645261794d6174683a3a7261794d756c3a206f766572666c6f770000000060448201526064016104d1565b6b033b2e3c9fd0803ce8000000611b69600282611f1d565b611b738486611f3d565b611b7d9190611f05565b611b879190611f1d565b9392505050565b6000818310611b9d5781611b87565b5090919050565b600054610100900460ff1680611bb95750303b155b80611bc7575060005460ff16155b611be35760405162461bcd60e51b81526004016104d190611eb7565b600054610100900460ff16158015611c05576000805461ffff19166101011790555b610504611c6c565b6000611c1883610519565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61074a82826119e8565b600054610100900460ff1680611c815750303b155b80611c8f575060005460ff16155b611cab5760405162461bcd60e51b81526004016104d190611eb7565b600054610100900460ff16158015611ccd576000805461ffff19166101011790555b611cdf6437bbb732b960d91b33611c62565b611cf96430b236b4b760d91b6437bbb732b960d91b611c0d565b611d166737b832b930ba37b960c11b6437bbb732b960d91b611c0d565b611d286430b236b4b760d91b33611c62565b6105046737b832b930ba37b960c11b33611c62565b80356001600160a01b038116811461052d57600080fd5b600060208284031215611d65578081fd5b611b8782611d3d565b600060208284031215611d7f578081fd5b81518015158114611b87578182fd5b600060208284031215611d9f578081fd5b5035919050565b60008060408385031215611db8578081fd5b82359150611dc860208401611d3d565b90509250929050565b60008060408385031215611de3578182fd5b50508035926020909101359150565b600080600080600060a08688031215611e09578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208284031215611e3d578081fd5b5051919050565b60008060008060008060c08789031215611e5c578081fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115611f1857611f18611f8e565b500190565b600082611f3857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f5757611f57611f8e565b500290565b600082821015611f6e57611f6e611f8e565b500390565b6000600019821415611f8757611f87611f8e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212206ac194019430341b0721af7699eeeaae7f9830b5449add3b766340c16049b15b64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25013,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25016,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 21959,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21954_storage)"
      },
      {
        "astId": 22349,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 44514,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "yieldFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 44521,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "record",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_array(t_struct(YieldRecord)9712_storage)dyn_storage)"
      },
      {
        "astId": 44525,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "prevCursor",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 44528,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "ledger",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILedger)8858"
      },
      {
        "astId": 44531,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "ksd",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IKIP7)9935"
      },
      {
        "astId": 44534,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "stabilityFeeCollector",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IStabilityFeeCollector)9333"
      },
      {
        "astId": 44537,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "ksdRewardManager",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IDistributor)7377"
      },
      {
        "astId": 44540,
        "contract": "contracts/yield/YieldManager.sol:YieldManager",
        "label": "ksdRefundManager",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IKsdRefundManager)8558"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(YieldRecord)9712_storage)dyn_storage": {
        "base": "t_struct(YieldRecord)9712_storage",
        "encoding": "dynamic_array",
        "label": "struct IYieldManager.YieldRecord[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDistributor)7377": {
        "encoding": "inplace",
        "label": "contract IDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IKIP7)9935": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKsdRefundManager)8558": {
        "encoding": "inplace",
        "label": "contract IKsdRefundManager",
        "numberOfBytes": "20"
      },
      "t_contract(ILedger)8858": {
        "encoding": "inplace",
        "label": "contract ILedger",
        "numberOfBytes": "20"
      },
      "t_contract(IStabilityFeeCollector)9333": {
        "encoding": "inplace",
        "label": "contract IStabilityFeeCollector",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_array(t_struct(YieldRecord)9712_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IYieldManager.YieldRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(YieldRecord)9712_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21954_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21954_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)21954_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 21951,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21953,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(YieldRecord)9712_storage": {
        "encoding": "inplace",
        "label": "struct IYieldManager.YieldRecord",
        "members": [
          {
            "astId": 9697,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "accYieldApr",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9699,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "accEarnedKsdAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9701,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "accRefundedKsdAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9703,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "accStabilityFeeKsdAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9705,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "accTargetKsdAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9707,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "totalLoan",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9709,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "rate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9711,
            "contract": "contracts/yield/YieldManager.sol:YieldManager",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}