{
  "address": "0x779d423a06e6E7D1187897A157Ed4312472AEc5A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__KlaySwapBridge_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "exchangeKctNeg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "exchangeKctPos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "exchangeKlayNeg",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "exchangeKlayPos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IKlaytnFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksd",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ksdRewardManager",
      "outputs": [
        {
          "internalType": "contract IDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "tokenToPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8491fc32850144d2aace8f385394efe22b79efffde57c4c5e2fe043031e1f8f2",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0x779d423a06e6E7D1187897A157Ed4312472AEc5A",
    "transactionIndex": 4,
    "gasUsed": "1793712",
    "logsBloom": "0x
    "blockHash": "0xf6bd10f48eedc5c0a71c22a38f0db91d9d5f9ada760d7d00736e15620aaf9ae2",
    "transactionHash": "0x8491fc32850144d2aace8f385394efe22b79efffde57c4c5e2fe043031e1f8f2",
    "logs": [],
    "blockNumber": 79130345,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "daac9cba34dfabe5953ff704314717f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__KlaySwapBridge_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"exchangeKctNeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"exchangeKctPos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"exchangeKlayNeg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"exchangeKlayPos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IKlaytnFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksd\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksdRewardManager\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"tokenToPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Klayswap is an AMM DEX protocol running on Klaytn\",\"kind\":\"dev\",\"methods\":{\"exchangeKctNeg(address,uint256,address,uint256,address[])\":{\"details\":\"\\\"I want to pay {amountA} amount of tokenA in exchange for at least {amountB} amount of tokenB\\\"      e.g., suppose amountA = 100 and amountB = 200            If the pool is able to send 200 tokenB in exchange for 98 tokenA, the exchange will take place and the user will pay 98 tokenA in exchange for 200 tokenB.            if the pool demands {msg.sender} 101 tokenA in exchange for 200 tokenB, the exchange will not take place.\",\"params\":{\"amountA\":\"The maximum amount of tokenA that {msg.sender} is willing to pay\",\"amountB\":\"The exact amount of the tokenB that {msg.sender} wants to receive              (i.e., If the pool demands {msg.sender} to pay more than {msg.value} tokenA, it is a deal breaker) {msg.sender} will pay the amount of tokenA just enough to buy {amountB} amount of the tokenB, and the remaining tokenA will be returned to {msg.sender}.\",\"path\":\"Path to replace tokenA with tokenB in klayswap.\",\"tokenA\":\"The address of the token {msg.sender} wants to pay\",\"tokenB\":\"TokenB address\"}},\"exchangeKctPos(address,uint256,address,uint256,address[])\":{\"details\":\"\\\"I want to pay {amountA} amount of tokenA in exchange for at least {amountB} amount of tokenB\\\"      e.g., suppose amountA = 100 and amountB = 200            if the pool is able to pay 250 tokenB, the deal is valid. So msg.sender will pay 100 tokenA and receive 250 tokenB            if the pool is not able to pay 250 tokenB, the exchange does not take place\",\"params\":{\"amountA\":\"The exact amount of tokenA msg.sender wants to pay\",\"amountB\":\"Minimum amount of tokenB that {msg.sender} wants to receive                (i.e., if msg.sender cannot receive this amount of tokenB, it's a deal breaker)\",\"path\":\"Path to replace tokenA with tokenB in klayswap.\",\"tokenA\":\"The address of the token {msg.sender} wants to pay\",\"tokenB\":\"TokenB address\"}},\"exchangeKlayNeg(address,uint256,address[])\":{\"details\":\"\\\"I want to pay up to {msg.value} amount of Klay in exchange for {amount} amount of token\\\"      e.g., suppose {msg.value} = 100 and amount = 200            If the pool is able to send 200 tokens in exchange for 98 Klay, the exchange will take place and the user will pay 98 Klay in exchange for 200 tokens.            if the pool demands {msg.sender} 101 Klay in exchange for 200 tokens, the exchange will not take place.msg.value: The maximum amount of Klay that {msg.sender} is willing to pay\",\"params\":{\"amount\":\"The exact amount of the token that {msg.sender} wants to receive              (i.e., If the pool demands {msg.sender} to pay more than {msg.value}, it is a deal breaker) {msg.sender} will pay the amount of Klay just enough to buy {amount} amount of the token, and the remaining Klay will be returned to {msg.sender}.\",\"path\":\"Path to replace tokenA with tokenB in klayswap.\",\"token\":\"Address of token {msg.sender} wants to buy\"}},\"exchangeKlayPos(address,uint256,address[])\":{\"details\":\"\\\"I want to pay {msg.value} amount of Klay in exchange for at least {amountB} amount of token\\\"      e.g., suppose {msg.value} = 100 and amount = 200            if the pool is able to pay 250 tokens, the deal is valid. So msg.sender will pay 100 Klay and receive 250 tokenB            if the pool is not able to pay 250 tokens, the exchange does not take placemsg.value: The exact amount of Klay that {msg.sender} wants to pay\",\"params\":{\"amount\":\"Minimum amount of token that account wants to receive                (i.e., if msg.sender cannot receive this amount of tokenB, it's a deal breaker)\",\"path\":\"Path to replace tokenA with tokenB in klayswap.\",\"token\":\"Address of token {msg.sender} wants to buy\"}},\"tokenToPool(address,address)\":{\"params\":{\"tokenA\":\"Address of tokenA.\",\"tokenB\":\"Address of tokenB.\"},\"returns\":{\"pool\":\"Address of the pool.\"}}},\"title\":\"Interaction contract with klaySwap.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"config(bytes32,address)\":{\"notice\":\"Initialize interface variables.\"},\"exchangeKctPos(address,uint256,address,uint256,address[])\":{\"notice\":\"Exchange tokenA for tokenB.\"},\"exchangeKlayNeg(address,uint256,address[])\":{\"notice\":\"Exchange Klay for tokenB.\"},\"exchangeKlayPos(address,uint256,address[])\":{\"notice\":\"Exchange Klay for token.\"},\"tokenToPool(address,address)\":{\"notice\":\"Get pool(exchange) address from tokens.\"}},\"notice\":\"This contract utilizes the exchange functions of klaySwap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/KlaySwapBridge.sol\":\"KlaySwapBridge\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IBKlay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./kip/IKIP7Extended.sol\\\";\\n\\n/// @title Bonded Klay Contract\\n/// @notice Mint/Burn logic of Bklay via klay\\ninterface IBKlay is IKIP7Extended {\\n    event UnstakeKlay(address from, address to, uint256 amount);\\n    event WithdrawToken(address from, address to, uint256 amount);\\n    event WithdrawKlay(address from, address to, uint256 amount);\\n    event ClaimKlay(address usr, uint256 amount);\\n\\n    function claimCount(address user) external view returns (uint256);\\n\\n    function unstakeRecordCount(address user) external view returns (uint256);\\n\\n    function unstakeRecord(address user, uint256 index)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function stakeKlay(address to) external payable;\\n\\n    function stakeAKlay(address to, uint256 amount) external;\\n\\n    function unstakeKlay(address to, uint256 amount) external;\\n\\n    function withdrawToken(address to, uint256 amount) external;\\n\\n    function withdrawKlay(address to, uint256 amount) external;\\n\\n    /// @notice Unstaking status for all yields.\\n    function pendingKlay(address usr) external view returns (uint256 completed, uint256 yet);\\n\\n    /// @notice Claim on every yield, send claimed klay to user.\\n    function claimKlay(address usr) external;\\n}\\n\",\"keccak256\":\"0x7dfee04969033816255389bd4edaaf00cc084eb6f446ae91fdce62d1ed87e6a2\",\"license\":\"MIT\"},\"contracts/interface/IDKSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/kip/KIP7Detailed.sol\\\";\\n\\npragma solidity 0.8.3;\\n\\n/// @title A delegated stable coin.\\n/// @notice Users can deposit ksd and in return receive dksd,\\n/// and also dksd holder can exchange dksd to ksd in a ratio of 1 to 1.\\n/// The purpose of this contract is distributing profit of yield farming to dksd holder.\\n/// The profit of yield framing is swapped into KSD, and the KSD distributed to dKSD holder.\\n/// Therefore, the balance of dKSD holder increases with the passing of time.\\n/// For example, if you deposit 100KSD at first, you receive 100dKSD.\\n/// With the passing of time, the balance of your DKSD becomes 101dKSD.\\n/// And then, you can withdraw 101KSD.\\ninterface IDKSD is IKIP7Detailed {\\n    /// @notice value of liquidityIndex\\n    function liquidityIndex() external view returns (uint256);\\n\\n    /// @notice precision of scaled values\\n    function precision() external pure returns (uint256);\\n\\n    /// @notice deposit ksd\\n    /// @param to address of receiving dksd\\n    /// @param amount amount of depositing ksd\\n    function deposit(address to, uint256 amount) external;\\n\\n    /// @notice withdraw ksd\\n    /// @param to address of receiving ksd\\n    /// @param amount amount of withdrawing dksd\\n    function withdraw(address to, uint256 amount) external;\\n\\n    /// @notice receive ksd and distribute the ksd to dksd holder\\n    /// @param ksdAmount amount of receiving ksd\\n    function earn(uint256 ksdAmount) external;\\n\\n    /// @notice calculate amount of corresponding to rawAmount\\n    /// @param rawAmount rawAmount\\n    /// @return amount of corresponding to rawAmount\\n    function fromRawAmount(uint256 rawAmount) external view returns (uint256);\\n\\n    /// @notice calculate rawAmount of corresponding to amount\\n    /// @param amount amount\\n    function toRawAmount(uint256 amount) external view returns (uint256);\\n\\n    /// @notice get raw balance of user\\n    /// @param usr address of user\\n    function rawBalanceOf(address usr) external view returns (uint256);\\n\\n    /// @notice get raw total balance\\n    function rawTotalSupply() external view returns (uint256);\\n\\n    event Deposit(address indexed user, address to, uint256 amount, uint256 liquidityIndex);\\n    event Withdraw(address indexed user, address to, uint256 amount, uint256 liquidityIndex);\\n    event Earn(uint256 now, uint256 ksdAmount, uint256 liquidityIndex);\\n}\\n\",\"keccak256\":\"0x10b1a2c17e756ccf1fc1b13a431d175e3b570d1db9b4bb12059131ea843fce58\",\"license\":\"MIT\"},\"contracts/interface/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @title distribute ksd\\ninterface IDistributor {\\n    /// @notice distribute ksd profit\\n    /// @param amount amount of profit\\n    function distribute(uint256 amount) external;\\n\\n    event Distribute(uint256 now, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2758bce16dcd91f7f850cf38217460e7327d7b246fcd912b9f38b00a06949d83\",\"license\":\"MIT\"},\"contracts/interface/IKlaySwapBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./klayswap/IKlaytnExchangeImpl.sol\\\";\\nimport \\\"./klayswap/IKlaytnFactoryImpl.sol\\\";\\nimport \\\"./klayswap/IKlaySwapSupporterExtended.sol\\\";\\n\\n/// @title Interaction contract with klayswap.\\n/// @notice Use exchange functions in klayswap.\\ninterface IKlaySwapBridge {\\n    /// @notice Get pool(exchange) address from tokens.\\n    function tokenToPool(address tokenA, address tokenB) external view returns (address);\\n\\n    /// @notice Exchange klay for another token.\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    /// @notice Exchange tokenA for tokenB.\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    /// @notice Exchange klay for another token.\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    /// @notice Exchange tokenA for tokenB.\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1bde114f35291d568ed1348d316afb44285383f085006c23c68431fc9cccedc6\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\n\\ninterface IKIP7Detailed is IKIP7 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb19fcc63818f59c23defe41b45aa9235cd43a373d97fe222fc939ad3f0f697c9\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\nimport \\\"./IKIP7Detailed.sol\\\";\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7Extended is IKIP7Detailed {\\n    function mint(address usr, uint256 amount) external returns (bool);\\n\\n    function burn(address usr, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x68ea4321698aef5d82970660626d6e07ea4908b0b94bee9d6ceb2f8776c6c06b\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP7Receiver {\\n    function onKIP7Received(\\n        address _operator,\\n        address _from,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x28382ebf22d533d01fb1385a4a598f98769ed91e657208711ba5797a1509d261\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaySwapSupporterExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlaySwapSupporterExtended {\\n    function _version() external pure returns (string memory);\\n\\n    // sklay \\ub9cc\\ud07c unstaking\\n    function _estimateKlayFromDelegation(uint256 sklay) external view returns (uint256);\\n\\n    // klay \\ub9cc\\ud07c staking\\n    function _estimateSKlayFromDelegation(uint256 klay) external view returns (uint256);\\n\\n    // klay => sklay swap\\n    function _estimateKlayFromSwap(uint256 sklay) external view returns (uint256);\\n\\n    // sklay => klay swap\\n    function _estimateSKlayFromSwap(uint256 klay) external view returns (uint256);\\n\\n    // sklay \\ub9cc\\ud07c addLiquidity \\ud588\\uc744\\ub54c \\ud544\\uc694\\ud55c klay\\n    function _estimateKlayFromLiquidity(\\n        uint256 sklay,\\n        uint256 swapKlay,\\n        uint256 swapSKlay\\n    ) external view returns (uint256);\\n\\n    // klay \\ub9cc\\ud07c addLiquidity \\ud588\\uc744\\ub54c \\ud544\\uc694\\ud55c sklay\\n    function _estimateSKlayFromLiquidity(uint256 klay) external view returns (uint256);\\n\\n    // (klay, sklay) \\ub9cc\\ud07c addLiquidity \\ud588\\uc744\\ub54c \\uc608\\uc0c1\\n    function _estimateAddLiquidity(uint256 klay, uint256 sklay)\\n        external\\n        view\\n        returns (\\n            bool res,\\n            uint256 estimatedLP,\\n            uint256 estimatedKlay,\\n            uint256 estimatedSKlay\\n        );\\n\\n    function _estimateLPFromKlay(uint256 amount) external view returns (uint256 lp);\\n\\n    function _estimateKlayFromLP(uint256 amount) external view returns (uint256 klay);\\n\\n    function _estimateKlayByQuickWithdraw(uint256 amount)\\n        external\\n        view\\n        returns (\\n            uint256 klay,\\n            uint256 sklay,\\n            uint256 klayFromSwap,\\n            uint256 totalReturn\\n        );\\n\\n    function _calc(uint256 klay)\\n        external\\n        view\\n        returns (\\n            bool find,\\n            uint256 liquidityKlay,\\n            uint256 delegationKlay,\\n            uint256 swapKlay,\\n            uint256 totalSKlay\\n        );\\n\\n    function _calcKlayForDelegation(\\n        uint256 klay,\\n        uint256 klayForSwap,\\n        uint256 sklayBySwap\\n    ) external view returns (uint256);\\n\\n    function _getPoolRate() external view returns (uint256 delegationPoolRate, uint256 swapPoolRate);\\n\\n    function _comparePoolRate() external view returns (bool);\\n\\n    function _getUserStat(address user)\\n        external\\n        view\\n        returns (\\n            address wallet,\\n            uint256 lp,\\n            uint256 klay,\\n            uint256 ksp,\\n            uint256 lastClaimedIndex,\\n            uint256 historyIndex,\\n            uint256 rewardKSPSum,\\n            uint256 lastKSPIndex\\n        );\\n\\n    function addLiquidity(uint256 swapPoolRate) external payable;\\n\\n    // klay \\ub2e8\\uc704\\n    // lp \\uc218\\ub7c9 \\uacc4\\uc0b0\\ud574\\ub0b4\\uba74\\uc11c \\uc18c\\ub7c9 \\ucc28\\uc774\\ub0a0 \\uc218 \\uc788\\ub2e4.\\n    // lp 1 wei \\ub354 \\ubc1b\\ub294\\ub2e4\\n\\n    // function removeLiquidity(uint amount, bool quick, uint swapPoolRate, uint minTotalReturn) external;\\n    function removeLiquidity(\\n        address user,\\n        uint256 amount,\\n        bool quick,\\n        uint256 swapPoolRate,\\n        uint256 minTotalReturn\\n    ) external;\\n\\n    // function claimKlay(uint hid) external;\\n    function claimKlay(address usr, uint256 hid) external;\\n\\n    function claimKSP() external;\\n\\n    function claimToken(address token) external;\\n\\n    function claimCount(address usr) external view returns (uint256);\\n\\n    function historyCount(address usr) external view returns (uint256);\\n\\n    function history(address usr, uint256 hid)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xef31daf3cecfb3803193d7e840d4430316b5c02f369a027666d478c6bed3b63a\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnExchangeImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../kip/IKIP7Detailed.sol\\\";\\n\\ninterface IKlaytnExchange is IKIP7Detailed {\\n    function fee() external view returns (uint256);\\n\\n    function getCurrentPool() external view returns (uint256, uint256);\\n\\n    function addKctLiquidity(uint256 amountA, uint256 amountB) external;\\n\\n    function estimatePos(address token, uint256 amount) external view returns (uint256);\\n\\n    function estimateNeg(address token, uint256 amount) external view returns (uint256);\\n\\n    function addKlayLiquidity(uint256 amount) external payable;\\n\\n    function tokenA() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function removeLiquidity(uint256 amount) external;\\n\\n    function claimReward() external;\\n\\n    function updateMiningIndex() external;\\n\\n    function changeMiningRate(uint256 _mining) external;\\n}\\n\",\"keccak256\":\"0xf73ef854715fe5c95229cb544fb23bb98483976769eace23a24a9b841c4cbe44\",\"license\":\"MIT\"},\"contracts/interface/klayswap/IKlaytnFactoryImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IKlaytnFactory {\\n    function tokenToPool(address tokenA, address tokenB) external view returns (address);\\n\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external;\\n\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable;\\n\\n    function getPoolCount() external view returns (uint256);\\n\\n    function createKctPool(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        uint256 fee\\n    ) external;\\n\\n    function createKlayPool(\\n        address token,\\n        uint256 amount,\\n        uint256 fee\\n    ) external payable;\\n\\n    function getPoolAddress(uint256 idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0x1dff8b30ec20ec0060f34b4255e919823c1725a0190fc9e413dc0afa72f2b8f0\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/kip/KIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../../interface/kip/IKIP13.sol\\\";\\nimport \\\"../openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract KIP13 is Initializable, IKIP13 {\\n    bytes4 private constant _INTERFACE_ID_KIP13 = 0x01ffc9a7;\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    function __KIP13_init() internal initializer {\\n        _registerInterface(_INTERFACE_ID_KIP13);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"KIP13::_registerInterface: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb258571d866799d24f0334192c74b12c90462a1838e7478d5ae9855fef40b8cf\",\"license\":\"MIT\"},\"contracts/library/kip/KIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../openzeppelin/proxy/Initializable.sol\\\";\\nimport \\\"../../interface/kip/IKIP7.sol\\\";\\nimport \\\"../../interface/kip/IKIP7Receiver.sol\\\";\\nimport \\\"./KIP13.sol\\\";\\n\\ncontract KIP7 is KIP13, IKIP7 {\\n    using Address for address;\\n\\n    bytes4 private constant _KIP7_RECEIVED = 0x9d188c22;\\n\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    bytes4 private constant _INTERFACE_ID_KIP7 = 0x65787371;\\n\\n    function __KIP7_init() internal initializer {\\n        __KIP13_init();\\n        __KIP7_init_unchained();\\n    }\\n\\n    function __KIP7_init_unchained() private initializer {\\n        _registerInterface(_INTERFACE_ID_KIP7);\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function safeTransfer(address recipient, uint256 amount) public virtual override {\\n        safeTransfer(recipient, amount, \\\"\\\");\\n    }\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        transfer(recipient, amount);\\n        require(_checkOnKIP7Received(msg.sender, recipient, amount, data), \\\"KIP7::safeTransfer: transfer to non KIP7Receiver implementer\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override {\\n        safeTransferFrom(sender, recipient, amount, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        transferFrom(sender, recipient, amount);\\n        require(_checkOnKIP7Received(sender, recipient, amount, data), \\\"KIP7::safeTransferFrom: transfer to non KIP7Receiver implementer\\\");\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"KIP7::_transfer: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"KIP7::_transfer: transfer to the zero address\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(owner != address(0), \\\"KIP7::_approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"KIP7::_approve: approve to the zero address\\\");\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _checkOnKIP7Received(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (!recipient.isContract()) {\\n            return true;\\n        }\\n\\n        bytes4 retval = IKIP7Receiver(recipient).onKIP7Received(msg.sender, sender, amount, _data);\\n        return (retval == _KIP7_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x521bfda25e27804fa98e9e4ecc3ecd02dda2d4adc807fba29749fddbe30c215c\",\"license\":\"MIT\"},\"contracts/library/kip/KIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\nimport \\\"../openzeppelin/proxy/Initializable.sol\\\";\\nimport \\\"../../interface/kip/IKIP7Detailed.sol\\\";\\nimport \\\"./KIP7.sol\\\";\\n\\ncontract KIP7Detailed is KIP7, IKIP7Detailed {\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 internal _decimals;\\n\\n    bytes4 private constant INTERFACE_ID_KIP7_METADATA = 0xa219a025;\\n\\n    function __KIP7Detailed_init(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal initializer {\\n        __KIP7_init();\\n        __KIP7Detailed_init_unchained(name_, symbol_, decimals_);\\n    }\\n\\n    function __KIP7Detailed_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) private initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        _registerInterface(INTERFACE_ID_KIP7_METADATA);\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x601577a4c26b7675999a2eb07e99c4b59f82b0faa5a15202be72f4a49366c1e0\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x61c683ae2ea61903ccc65eb60878b7ab1f1513412221dcbdca4178fceddd45fe\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/utils/KlaySwapBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../library/AccessControl.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnExchangeImpl.sol\\\";\\nimport \\\"../interface/klayswap/IKlaytnFactoryImpl.sol\\\";\\nimport \\\"../interface/klayswap/IKlaySwapSupporterExtended.sol\\\";\\nimport \\\"../interface/IKlaySwapBridge.sol\\\";\\nimport \\\"../interface/IDKSD.sol\\\";\\nimport \\\"../interface/IBKlay.sol\\\";\\nimport \\\"../library/Pausable.sol\\\";\\nimport \\\"../interface/IDistributor.sol\\\";\\n\\n/// @title Interaction contract with klaySwap.\\n/// @notice This contract utilizes the exchange functions of klaySwap.\\n/// @dev Klayswap is an AMM DEX protocol running on Klaytn\\n/*\\n    Some concept of exchages to understand in KlaySwap\\n    positive exchange\\n        - The amount {msg.sender} pays is fixed\\n        - The amount {msg.sender} receives is induced from it\\n            - {msg.sender} may set the minimum amount to receive in order to avoid unnecessary slippage losses\\n    negative exchange\\n        - The amount {msg.sender} receives is fixed\\n        - The amount {msg.sender} pays is induced from it\\n            - {msg.sender} may set the maximum amount to pay in order to avoid unnecessary slippage losses\\n*/\\ncontract KlaySwapBridge is IKlaySwapBridge, AccessControl, Pausable {\\n    // --- data ---\\n    IKIP7 public ksd; // ksd token contract (stable token)\\n    IKlaytnFactory public factory; // klayswap factory contract (refer to klayswap/KlaytnFactory.impl.sol)\\n    IDistributor public ksdRewardManager; // ksdRewardManager token contract, distribute ksd reward\\n\\n    function __KlaySwapBridge_init() public initializer {\\n        __Pausable_init();\\n    }\\n\\n    // --- config ---\\n    /// @notice Initialize interface variables.\\n    function config(bytes32 what, address data) external onlyAdmin {\\n        if (what == \\\"ksd\\\") ksd = IKIP7(data);\\n        else if (what == \\\"factory\\\") factory = IKlaytnFactory(data);\\n        else if (what == \\\"ksdRewardManager\\\") ksdRewardManager = IDistributor(data);\\n        else revert(\\\"klaySwapBridge::config:unrecognized-param\\\");\\n    }\\n\\n    /// @notice Get pool(exchange) address from tokens.\\n    /// @param tokenA Address of tokenA.\\n    /// @param tokenB Address of tokenB.\\n    /// @return pool Address of the pool.\\n    function tokenToPool(address tokenA, address tokenB) public view override returns (address pool) {\\n        pool = factory.tokenToPool(tokenA, tokenB);\\n        require(pool != address(0), \\\"KlaySwapBridge::tokenToPool: pool is not initialized\\\");\\n    }\\n\\n    /// @notice Exchange Klay for token.\\n    /// @dev \\\"I want to pay {msg.value} amount of Klay in exchange for at least {amountB} amount of token\\\"\\n    ///      e.g., suppose {msg.value} = 100 and amount = 200\\n    ///            if the pool is able to pay 250 tokens, the deal is valid. So msg.sender will pay 100 Klay and receive 250 tokenB\\n    ///            if the pool is not able to pay 250 tokens, the exchange does not take place\\n    /// @param token Address of token {msg.sender} wants to buy\\n    /// @dev msg.value: The exact amount of Klay that {msg.sender} wants to pay\\n    /// @param amount Minimum amount of token that account wants to receive\\n    ///                (i.e., if msg.sender cannot receive this amount of tokenB, it's a deal breaker)\\n    /// @param path Path to replace tokenA with tokenB in klayswap.\\n    function exchangeKlayPos(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable override {\\n        uint256 beforeBalance = IKIP7(token).balanceOf(address(this));\\n        factory.exchangeKlayPos{value: msg.value}(token, amount, path);\\n        uint256 afterBalance = IKIP7(token).balanceOf(address(this));\\n        IKIP7(token).transfer(msg.sender, afterBalance - beforeBalance);\\n    }\\n\\n    /// @notice Exchange tokenA for tokenB.\\n    /// @dev \\\"I want to pay {amountA} amount of tokenA in exchange for at least {amountB} amount of tokenB\\\"\\n    ///      e.g., suppose amountA = 100 and amountB = 200\\n    ///            if the pool is able to pay 250 tokenB, the deal is valid. So msg.sender will pay 100 tokenA and receive 250 tokenB\\n    ///            if the pool is not able to pay 250 tokenB, the exchange does not take place\\n    /// @param tokenA The address of the token {msg.sender} wants to pay\\n    /// @param amountA The exact amount of tokenA msg.sender wants to pay\\n    /// @param tokenB TokenB address\\n    /// @param amountB Minimum amount of tokenB that {msg.sender} wants to receive\\n    ///                (i.e., if msg.sender cannot receive this amount of tokenB, it's a deal breaker)\\n    /// @param path Path to replace tokenA with tokenB in klayswap.\\n    function exchangeKctPos(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external override {\\n        IKIP7(tokenA).transferFrom(msg.sender, address(this), amountA);\\n        IKIP7(tokenA).approve(address(factory), amountA);\\n        uint256 beforeBBalance = IKIP7(tokenB).balanceOf(address(this));\\n        factory.exchangeKctPos(tokenA, amountA, tokenB, amountB, path);\\n        uint256 afterBBalance = IKIP7(tokenB).balanceOf(address(this));\\n        IKIP7(tokenB).transfer(msg.sender, afterBBalance - beforeBBalance);\\n    }\\n\\n    /// @notice Exchange Klay for tokenB.\\n    /// @dev \\\"I want to pay up to {msg.value} amount of Klay in exchange for {amount} amount of token\\\"\\n    ///      e.g., suppose {msg.value} = 100 and amount = 200\\n    ///            If the pool is able to send 200 tokens in exchange for 98 Klay, the exchange will take place and the user will pay 98 Klay in exchange for 200 tokens.\\n    ///            if the pool demands {msg.sender} 101 Klay in exchange for 200 tokens, the exchange will not take place.\\n    /// @param token Address of token {msg.sender} wants to buy\\n    /// @param amount The exact amount of the token that {msg.sender} wants to receive\\n    ///              (i.e., If the pool demands {msg.sender} to pay more than {msg.value}, it is a deal breaker)\\n    /// {msg.sender} will pay the amount of Klay just enough to buy {amount} amount of the token, and the remaining Klay will be returned to {msg.sender}.\\n    /// @dev msg.value: The maximum amount of Klay that {msg.sender} is willing to pay\\n    /// @param path Path to replace tokenA with tokenB in klayswap.\\n    function exchangeKlayNeg(\\n        address token,\\n        uint256 amount,\\n        address[] calldata path\\n    ) external payable override {\\n        uint256 beforeBalance = address(this).balance;\\n        factory.exchangeKlayNeg{value: msg.value}(token, amount, path);\\n        uint256 afterBalance = address(this).balance;\\n        IKIP7(token).transfer(msg.sender, amount);\\n\\n        uint256 refundAmount = msg.value - (beforeBalance - afterBalance);\\n        msg.sender.call{value: refundAmount}(\\\"\\\");\\n    }\\n\\n    // @notice Exchange tokenA for tokenB.\\n    /// @dev \\\"I want to pay {amountA} amount of tokenA in exchange for at least {amountB} amount of tokenB\\\"\\n    ///      e.g., suppose amountA = 100 and amountB = 200\\n    ///            If the pool is able to send 200 tokenB in exchange for 98 tokenA, the exchange will take place and the user will pay 98 tokenA in exchange for 200 tokenB.\\n    ///            if the pool demands {msg.sender} 101 tokenA in exchange for 200 tokenB, the exchange will not take place.\\n    /// @param tokenA The address of the token {msg.sender} wants to pay\\n    /// @param amountA The maximum amount of tokenA that {msg.sender} is willing to pay\\n    /// @param tokenB TokenB address\\n    /// @param amountB The exact amount of the tokenB that {msg.sender} wants to receive\\n    ///              (i.e., If the pool demands {msg.sender} to pay more than {msg.value} tokenA, it is a deal breaker)\\n    /// {msg.sender} will pay the amount of tokenA just enough to buy {amountB} amount of the tokenB, and the remaining tokenA will be returned to {msg.sender}.\\n    /// @param path Path to replace tokenA with tokenB in klayswap.\\n    function exchangeKctNeg(\\n        address tokenA,\\n        uint256 amountA,\\n        address tokenB,\\n        uint256 amountB,\\n        address[] calldata path\\n    ) external override {\\n        IKIP7(tokenA).transferFrom(msg.sender, address(this), amountA);\\n        IKIP7(tokenA).approve(address(factory), amountA);\\n        uint256 beforeABalance = IKIP7(tokenA).balanceOf(address(this));\\n        factory.exchangeKctNeg(tokenA, amountA, tokenB, amountB, path);\\n        uint256 afterABalance = IKIP7(tokenA).balanceOf(address(this));\\n        IKIP7(tokenB).transfer(msg.sender, amountB);\\n\\n        uint256 refundAmount = amountA - (beforeABalance - afterABalance);\\n        IKIP7(tokenA).transfer(msg.sender, refundAmount);\\n    }\\n\\n    /// @notice Fallback function.\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xe80357f8c5d0fee98cd088d3e8b4102f6902de758ec33d65f0e705a66103e72a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061197d806100206000396000f3fe6080604052600436106101235760003560e01c8063a217fddf116100a0578063d05f707111610064578063d05f707114610310578063d366f3b914610330578063d547741f14610350578063f2fde38b14610370578063fd435cb9146103905761012a565b8063a217fddf14610276578063a40cdc8e1461028b578063a6d5f103146102a0578063a7c07e92146102dd578063c45a0155146102f05761012a565b806352f28c17116100e757806352f28c17146101dd5780635a3acc50146101fd5780635c975abb1461021d5780638456cb591461024157806391d14854146102565761012a565b80631b2ba1141461012f578063248a9ca3146101445780632f2ff15d1461018857806336568abe146101a85780633f4ba83a146101c85761012a565b3661012a57005b600080fd5b61014261013d366004611732565b6103b0565b005b34801561015057600080fd5b5061017561015f3660046117ac565b6000908152600160208190526040909120015490565b6040519081526020015b60405180910390f35b34801561019457600080fd5b506101426101a33660046117c4565b6105b2565b3480156101b457600080fd5b506101426101c33660046117c4565b6105de565b3480156101d457600080fd5b50610142610661565b3480156101e957600080fd5b506101426101f83660046116b8565b6106ff565b34801561020957600080fd5b506101426102183660046116b8565b610a13565b34801561022957600080fd5b5060025460ff165b604051901515815260200161017f565b34801561024d57600080fd5b50610142610dab565b34801561026257600080fd5b506102316102713660046117c4565b610e42565b34801561028257600080fd5b50610175600081565b34801561029757600080fd5b50610142610e6f565b3480156102ac57600080fd5b506002546102c59061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161017f565b6101426102eb366004611732565b610eed565b3480156102fc57600080fd5b506003546102c5906001600160a01b031681565b34801561031c57600080fd5b506004546102c5906001600160a01b031681565b34801561033c57600080fd5b5061014261034b3660046117c4565b611035565b34801561035c57600080fd5b5061014261036b3660046117c4565b611141565b34801561037c57600080fd5b5061014261038b366004611641565b611168565b34801561039c57600080fd5b506102c56103ab366004611680565b61119e565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a91906117e8565b6003546040516306cae84560e21b81529192506001600160a01b031690631b2ba11490349061046390899089908990899060040161188f565b6000604051808303818588803b15801561047c57600080fd5b505af1158015610490573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b03891692506370a08231915060240160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f91906117e8565b90506001600160a01b03861663a9059cbb3361052b858561190f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561057157600080fd5b505af1158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a9919061178c565b50505050505050565b600082815260016020819052604090912001546105cf8133611299565b6105d983836112fd565b505050565b6001600160a01b03811633146106535760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61065d8282611368565b5050565b60025460ff166106aa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161064a565b653830bab9b2b960d11b6106be8133611299565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd90606401602060405180830381600087803b15801561074d57600080fd5b505af1158015610761573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610785919061178c565b5060035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c919061178c565b506040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088791906117e8565b6003546040516352f28c1760e01b81529192506001600160a01b0316906352f28c17906108c2908a908a908a908a908a908a90600401611848565b600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03881691506370a082319060240160206040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e91906117e8565b90506001600160a01b03861663a9059cbb3361098a858561190f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156109d057600080fd5b505af11580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a08919061178c565b505050505050505050565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd90606401602060405180830381600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a99919061178c565b5060035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b158015610ae857600080fd5b505af1158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b20919061178c565b506040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b158015610b6357600080fd5b505afa158015610b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9b91906117e8565b6003546040516305a3acc560e41b81529192506001600160a01b031690635a3acc5090610bd6908a908a908a908a908a908a90600401611848565b600060405180830381600087803b158015610bf057600080fd5b505af1158015610c04573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038a1691506370a082319060240160206040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8291906117e8565b60405163a9059cbb60e01b8152336004820152602481018790529091506001600160a01b0387169063a9059cbb90604401602060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061178c565b506000610d12828461190f565b610d1c908961190f565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b038a169063a9059cbb90604401602060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f919061178c565b50505050505050505050565b60025460ff1615610df15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161064a565b653830bab9b2b960d11b610e058133611299565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016106f4565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b600054610100900460ff1680610e845750303b155b80610e92575060005460ff16155b610eae5760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff16158015610ed0576000805461ffff19166101011790555b610ed86113cf565b8015610eea576000805461ff00191690555b50565b6003546040516353e03f4960e11b81523031916001600160a01b03169063a7c07e92903490610f2690899089908990899060040161188f565b6000604051808303818588803b158015610f3f57600080fd5b505af1158015610f53573d6000803e3d6000fd5b505060405163a9059cbb60e01b815233600482015260248101889052303193506001600160a01b038916925063a9059cbb9150604401602060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb919061178c565b506000610fe8828461190f565b610ff2903461190f565b60405190915033908290600081818185875af1925050503d8060008114610d9f576040519150601f19603f3d011682016040523d82523d6000602084013e610d9f565b6110476430b236b4b760d91b33611299565b81621adcd960ea1b141561107a5760028054610100600160a81b0319166101006001600160a01b0384160217905561065d565b8166666163746f727960c81b14156110ac57600380546001600160a01b0319166001600160a01b03831617905561065d565b816f35b9b22932bbb0b93226b0b730b3b2b960811b14156110e757600480546001600160a01b0319166001600160a01b03831617905561065d565b60405162461bcd60e51b815260206004820152602960248201527f6b6c6179537761704272696467653a3a636f6e6669673a756e7265636f676e696044820152687a65642d706172616d60b81b606482015260840161064a565b6000828152600160208190526040909120015461115e8133611299565b6105d98383611368565b61117a6437bbb732b960d91b33611299565b61118c6437bbb732b960d91b826112fd565b610eea6437bbb732b960d91b33611368565b60035460405163fd435cb960e01b81526001600160a01b0384811660048301528381166024830152600092169063fd435cb99060440160206040518083038186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190611664565b90506001600160a01b038116610e695760405162461bcd60e51b815260206004820152603460248201527f4b6c6179537761704272696467653a3a746f6b656e546f506f6f6c3a20706f6f6044820152731b081a5cc81b9bdd081a5b9a5d1a585b1a5e995960621b606482015260840161064a565b6112a38282610e42565b61065d5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b606482015260840161064a565b6113078282610e42565b61065d5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6113728282610e42565b1561065d5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff16806113e45750303b155b806113f2575060005460ff16155b61140e5760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff16158015611430576000805461ffff19166101011790555b611438611466565b611453653830bab9b2b960d11b6437bbb732b960d91b6114cf565b610ed8653830bab9b2b960d11b3361151c565b600054610100900460ff168061147b5750303b155b80611489575060005460ff16155b6114a55760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff161580156114c7576000805461ffff19166101011790555b610ed8611526565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61065d82826112fd565b600054610100900460ff168061153b5750303b155b80611549575060005460ff16155b6115655760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff16158015611587576000805461ffff19166101011790555b6115996437bbb732b960d91b3361151c565b6115b36430b236b4b760d91b6437bbb732b960d91b6114cf565b6115d06737b832b930ba37b960c11b6437bbb732b960d91b6114cf565b6115e26430b236b4b760d91b3361151c565b610ed86737b832b930ba37b960c11b3361151c565b60008083601f840112611608578182fd5b50813567ffffffffffffffff81111561161f578182fd5b6020830191508360208260051b850101111561163a57600080fd5b9250929050565b600060208284031215611652578081fd5b813561165d81611932565b9392505050565b600060208284031215611675578081fd5b815161165d81611932565b60008060408385031215611692578081fd5b823561169d81611932565b915060208301356116ad81611932565b809150509250929050565b60008060008060008060a087890312156116d0578182fd5b86356116db81611932565b95506020870135945060408701356116f281611932565b935060608701359250608087013567ffffffffffffffff811115611714578283fd5b61172089828a016115f7565b979a9699509497509295939492505050565b60008060008060608587031215611747578384fd5b843561175281611932565b935060208501359250604085013567ffffffffffffffff811115611774578283fd5b611780878288016115f7565b95989497509550505050565b60006020828403121561179d578081fd5b8151801515811461165d578182fd5b6000602082840312156117bd578081fd5b5035919050565b600080604083850312156117d6578182fd5b8235915060208301356116ad81611932565b6000602082840312156117f9578081fd5b5051919050565b60008284526020808501945082825b8581101561183d57813561182281611932565b6001600160a01b03168752958201959082019060010161180f565b509495945050505050565b6001600160a01b03878116825260208201879052851660408201526060810184905260a0608082018190526000906118839083018486611800565b98975050505050505050565b600060018060a01b0386168252846020830152606060408301526118b7606083018486611800565b9695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101561192d57634e487b7160e01b81526011600452602481fd5b500390565b6001600160a01b0381168114610eea57600080fdfea2646970667358221220bb441f543a54acb636c82a9bd3a286359685b5f616f2ed38cf1f7d2a191ae81164736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c8063a217fddf116100a0578063d05f707111610064578063d05f707114610310578063d366f3b914610330578063d547741f14610350578063f2fde38b14610370578063fd435cb9146103905761012a565b8063a217fddf14610276578063a40cdc8e1461028b578063a6d5f103146102a0578063a7c07e92146102dd578063c45a0155146102f05761012a565b806352f28c17116100e757806352f28c17146101dd5780635a3acc50146101fd5780635c975abb1461021d5780638456cb591461024157806391d14854146102565761012a565b80631b2ba1141461012f578063248a9ca3146101445780632f2ff15d1461018857806336568abe146101a85780633f4ba83a146101c85761012a565b3661012a57005b600080fd5b61014261013d366004611732565b6103b0565b005b34801561015057600080fd5b5061017561015f3660046117ac565b6000908152600160208190526040909120015490565b6040519081526020015b60405180910390f35b34801561019457600080fd5b506101426101a33660046117c4565b6105b2565b3480156101b457600080fd5b506101426101c33660046117c4565b6105de565b3480156101d457600080fd5b50610142610661565b3480156101e957600080fd5b506101426101f83660046116b8565b6106ff565b34801561020957600080fd5b506101426102183660046116b8565b610a13565b34801561022957600080fd5b5060025460ff165b604051901515815260200161017f565b34801561024d57600080fd5b50610142610dab565b34801561026257600080fd5b506102316102713660046117c4565b610e42565b34801561028257600080fd5b50610175600081565b34801561029757600080fd5b50610142610e6f565b3480156102ac57600080fd5b506002546102c59061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161017f565b6101426102eb366004611732565b610eed565b3480156102fc57600080fd5b506003546102c5906001600160a01b031681565b34801561031c57600080fd5b506004546102c5906001600160a01b031681565b34801561033c57600080fd5b5061014261034b3660046117c4565b611035565b34801561035c57600080fd5b5061014261036b3660046117c4565b611141565b34801561037c57600080fd5b5061014261038b366004611641565b611168565b34801561039c57600080fd5b506102c56103ab366004611680565b61119e565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a91906117e8565b6003546040516306cae84560e21b81529192506001600160a01b031690631b2ba11490349061046390899089908990899060040161188f565b6000604051808303818588803b15801561047c57600080fd5b505af1158015610490573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b03891692506370a08231915060240160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f91906117e8565b90506001600160a01b03861663a9059cbb3361052b858561190f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561057157600080fd5b505af1158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a9919061178c565b50505050505050565b600082815260016020819052604090912001546105cf8133611299565b6105d983836112fd565b505050565b6001600160a01b03811633146106535760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61065d8282611368565b5050565b60025460ff166106aa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161064a565b653830bab9b2b960d11b6106be8133611299565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd90606401602060405180830381600087803b15801561074d57600080fd5b505af1158015610761573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610785919061178c565b5060035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c919061178c565b506040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088791906117e8565b6003546040516352f28c1760e01b81529192506001600160a01b0316906352f28c17906108c2908a908a908a908a908a908a90600401611848565b600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03881691506370a082319060240160206040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e91906117e8565b90506001600160a01b03861663a9059cbb3361098a858561190f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156109d057600080fd5b505af11580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a08919061178c565b505050505050505050565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd90606401602060405180830381600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a99919061178c565b5060035460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529087169063095ea7b390604401602060405180830381600087803b158015610ae857600080fd5b505af1158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b20919061178c565b506040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b158015610b6357600080fd5b505afa158015610b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9b91906117e8565b6003546040516305a3acc560e41b81529192506001600160a01b031690635a3acc5090610bd6908a908a908a908a908a908a90600401611848565b600060405180830381600087803b158015610bf057600080fd5b505af1158015610c04573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038a1691506370a082319060240160206040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8291906117e8565b60405163a9059cbb60e01b8152336004820152602481018790529091506001600160a01b0387169063a9059cbb90604401602060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061178c565b506000610d12828461190f565b610d1c908961190f565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b038a169063a9059cbb90604401602060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f919061178c565b50505050505050505050565b60025460ff1615610df15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161064a565b653830bab9b2b960d11b610e058133611299565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016106f4565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b600054610100900460ff1680610e845750303b155b80610e92575060005460ff16155b610eae5760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff16158015610ed0576000805461ffff19166101011790555b610ed86113cf565b8015610eea576000805461ff00191690555b50565b6003546040516353e03f4960e11b81523031916001600160a01b03169063a7c07e92903490610f2690899089908990899060040161188f565b6000604051808303818588803b158015610f3f57600080fd5b505af1158015610f53573d6000803e3d6000fd5b505060405163a9059cbb60e01b815233600482015260248101889052303193506001600160a01b038916925063a9059cbb9150604401602060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb919061178c565b506000610fe8828461190f565b610ff2903461190f565b60405190915033908290600081818185875af1925050503d8060008114610d9f576040519150601f19603f3d011682016040523d82523d6000602084013e610d9f565b6110476430b236b4b760d91b33611299565b81621adcd960ea1b141561107a5760028054610100600160a81b0319166101006001600160a01b0384160217905561065d565b8166666163746f727960c81b14156110ac57600380546001600160a01b0319166001600160a01b03831617905561065d565b816f35b9b22932bbb0b93226b0b730b3b2b960811b14156110e757600480546001600160a01b0319166001600160a01b03831617905561065d565b60405162461bcd60e51b815260206004820152602960248201527f6b6c6179537761704272696467653a3a636f6e6669673a756e7265636f676e696044820152687a65642d706172616d60b81b606482015260840161064a565b6000828152600160208190526040909120015461115e8133611299565b6105d98383611368565b61117a6437bbb732b960d91b33611299565b61118c6437bbb732b960d91b826112fd565b610eea6437bbb732b960d91b33611368565b60035460405163fd435cb960e01b81526001600160a01b0384811660048301528381166024830152600092169063fd435cb99060440160206040518083038186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190611664565b90506001600160a01b038116610e695760405162461bcd60e51b815260206004820152603460248201527f4b6c6179537761704272696467653a3a746f6b656e546f506f6f6c3a20706f6f6044820152731b081a5cc81b9bdd081a5b9a5d1a585b1a5e995960621b606482015260840161064a565b6112a38282610e42565b61065d5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b606482015260840161064a565b6113078282610e42565b61065d5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6113728282610e42565b1561065d5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff16806113e45750303b155b806113f2575060005460ff16155b61140e5760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff16158015611430576000805461ffff19166101011790555b611438611466565b611453653830bab9b2b960d11b6437bbb732b960d91b6114cf565b610ed8653830bab9b2b960d11b3361151c565b600054610100900460ff168061147b5750303b155b80611489575060005460ff16155b6114a55760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff161580156114c7576000805461ffff19166101011790555b610ed8611526565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61065d82826112fd565b600054610100900460ff168061153b5750303b155b80611549575060005460ff16155b6115655760405162461bcd60e51b815260040161064a906118c1565b600054610100900460ff16158015611587576000805461ffff19166101011790555b6115996437bbb732b960d91b3361151c565b6115b36430b236b4b760d91b6437bbb732b960d91b6114cf565b6115d06737b832b930ba37b960c11b6437bbb732b960d91b6114cf565b6115e26430b236b4b760d91b3361151c565b610ed86737b832b930ba37b960c11b3361151c565b60008083601f840112611608578182fd5b50813567ffffffffffffffff81111561161f578182fd5b6020830191508360208260051b850101111561163a57600080fd5b9250929050565b600060208284031215611652578081fd5b813561165d81611932565b9392505050565b600060208284031215611675578081fd5b815161165d81611932565b60008060408385031215611692578081fd5b823561169d81611932565b915060208301356116ad81611932565b809150509250929050565b60008060008060008060a087890312156116d0578182fd5b86356116db81611932565b95506020870135945060408701356116f281611932565b935060608701359250608087013567ffffffffffffffff811115611714578283fd5b61172089828a016115f7565b979a9699509497509295939492505050565b60008060008060608587031215611747578384fd5b843561175281611932565b935060208501359250604085013567ffffffffffffffff811115611774578283fd5b611780878288016115f7565b95989497509550505050565b60006020828403121561179d578081fd5b8151801515811461165d578182fd5b6000602082840312156117bd578081fd5b5035919050565b600080604083850312156117d6578182fd5b8235915060208301356116ad81611932565b6000602082840312156117f9578081fd5b5051919050565b60008284526020808501945082825b8581101561183d57813561182281611932565b6001600160a01b03168752958201959082019060010161180f565b509495945050505050565b6001600160a01b03878116825260208201879052851660408201526060810184905260a0608082018190526000906118839083018486611800565b98975050505050505050565b600060018060a01b0386168252846020830152606060408301526118b7606083018486611800565b9695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101561192d57634e487b7160e01b81526011600452602481fd5b500390565b6001600160a01b0381168114610eea57600080fdfea2646970667358221220bb441f543a54acb636c82a9bd3a286359685b5f616f2ed38cf1f7d2a191ae81164736f6c63430008030033",
  "devdoc": {
    "details": "Klayswap is an AMM DEX protocol running on Klaytn",
    "kind": "dev",
    "methods": {
      "exchangeKctNeg(address,uint256,address,uint256,address[])": {
        "details": "\"I want to pay {amountA} amount of tokenA in exchange for at least {amountB} amount of tokenB\"      e.g., suppose amountA = 100 and amountB = 200            If the pool is able to send 200 tokenB in exchange for 98 tokenA, the exchange will take place and the user will pay 98 tokenA in exchange for 200 tokenB.            if the pool demands {msg.sender} 101 tokenA in exchange for 200 tokenB, the exchange will not take place.",
        "params": {
          "amountA": "The maximum amount of tokenA that {msg.sender} is willing to pay",
          "amountB": "The exact amount of the tokenB that {msg.sender} wants to receive              (i.e., If the pool demands {msg.sender} to pay more than {msg.value} tokenA, it is a deal breaker) {msg.sender} will pay the amount of tokenA just enough to buy {amountB} amount of the tokenB, and the remaining tokenA will be returned to {msg.sender}.",
          "path": "Path to replace tokenA with tokenB in klayswap.",
          "tokenA": "The address of the token {msg.sender} wants to pay",
          "tokenB": "TokenB address"
        }
      },
      "exchangeKctPos(address,uint256,address,uint256,address[])": {
        "details": "\"I want to pay {amountA} amount of tokenA in exchange for at least {amountB} amount of tokenB\"      e.g., suppose amountA = 100 and amountB = 200            if the pool is able to pay 250 tokenB, the deal is valid. So msg.sender will pay 100 tokenA and receive 250 tokenB            if the pool is not able to pay 250 tokenB, the exchange does not take place",
        "params": {
          "amountA": "The exact amount of tokenA msg.sender wants to pay",
          "amountB": "Minimum amount of tokenB that {msg.sender} wants to receive                (i.e., if msg.sender cannot receive this amount of tokenB, it's a deal breaker)",
          "path": "Path to replace tokenA with tokenB in klayswap.",
          "tokenA": "The address of the token {msg.sender} wants to pay",
          "tokenB": "TokenB address"
        }
      },
      "exchangeKlayNeg(address,uint256,address[])": {
        "details": "\"I want to pay up to {msg.value} amount of Klay in exchange for {amount} amount of token\"      e.g., suppose {msg.value} = 100 and amount = 200            If the pool is able to send 200 tokens in exchange for 98 Klay, the exchange will take place and the user will pay 98 Klay in exchange for 200 tokens.            if the pool demands {msg.sender} 101 Klay in exchange for 200 tokens, the exchange will not take place.msg.value: The maximum amount of Klay that {msg.sender} is willing to pay",
        "params": {
          "amount": "The exact amount of the token that {msg.sender} wants to receive              (i.e., If the pool demands {msg.sender} to pay more than {msg.value}, it is a deal breaker) {msg.sender} will pay the amount of Klay just enough to buy {amount} amount of the token, and the remaining Klay will be returned to {msg.sender}.",
          "path": "Path to replace tokenA with tokenB in klayswap.",
          "token": "Address of token {msg.sender} wants to buy"
        }
      },
      "exchangeKlayPos(address,uint256,address[])": {
        "details": "\"I want to pay {msg.value} amount of Klay in exchange for at least {amountB} amount of token\"      e.g., suppose {msg.value} = 100 and amount = 200            if the pool is able to pay 250 tokens, the deal is valid. So msg.sender will pay 100 Klay and receive 250 tokenB            if the pool is not able to pay 250 tokens, the exchange does not take placemsg.value: The exact amount of Klay that {msg.sender} wants to pay",
        "params": {
          "amount": "Minimum amount of token that account wants to receive                (i.e., if msg.sender cannot receive this amount of tokenB, it's a deal breaker)",
          "path": "Path to replace tokenA with tokenB in klayswap.",
          "token": "Address of token {msg.sender} wants to buy"
        }
      },
      "tokenToPool(address,address)": {
        "params": {
          "tokenA": "Address of tokenA.",
          "tokenB": "Address of tokenB."
        },
        "returns": {
          "pool": "Address of the pool."
        }
      }
    },
    "title": "Interaction contract with klaySwap.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "config(bytes32,address)": {
        "notice": "Initialize interface variables."
      },
      "exchangeKctPos(address,uint256,address,uint256,address[])": {
        "notice": "Exchange tokenA for tokenB."
      },
      "exchangeKlayNeg(address,uint256,address[])": {
        "notice": "Exchange Klay for tokenB."
      },
      "exchangeKlayPos(address,uint256,address[])": {
        "notice": "Exchange Klay for token."
      },
      "tokenToPool(address,address)": {
        "notice": "Get pool(exchange) address from tokens."
      }
    },
    "notice": "This contract utilizes the exchange functions of klaySwap.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23220,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23223,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20166,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)"
      },
      {
        "astId": 20556,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 36231,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "ksd",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IKIP7)9881"
      },
      {
        "astId": 36234,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "factory",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKlaytnFactory)10766"
      },
      {
        "astId": 36237,
        "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
        "label": "ksdRewardManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IDistributor)7358"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDistributor)7358": {
        "encoding": "inplace",
        "label": "contract IDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IKIP7)9881": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKlaytnFactory)10766": {
        "encoding": "inplace",
        "label": "contract IKlaytnFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)20161_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)20161_storage"
      },
      "t_struct(RoleData)20161_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 20158,
            "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20160,
            "contract": "contracts/utils/KlaySwapBridge.sol:KlaySwapBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}