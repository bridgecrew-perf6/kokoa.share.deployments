{
  "address": "0x80e5eD2c38b83220e09d106ce10278fA591D4fB2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bklay_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "otcFund_",
          "type": "address"
        }
      ],
      "name": "__MockFlashBorrower_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "actionFlashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bklay",
      "outputs": [
        {
          "internalType": "contract IBKlay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "klayAmount",
          "type": "uint256"
        }
      ],
      "name": "getFlashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "klayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "otcFund",
      "outputs": [
        {
          "internalType": "contract IOtcFund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x717d9fa83278efd70817e457171ccb39bac92c515801ac3032f72f655de88618",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0x80e5eD2c38b83220e09d106ce10278fA591D4fB2",
    "transactionIndex": 360,
    "gasUsed": "480110",
    "logsBloom": "0x
    "blockHash": "0x0676f180a32fd407c285ea128aa504049d79d62cbe91a183f38dc148d5a3c0f5",
    "transactionHash": "0x717d9fa83278efd70817e457171ccb39bac92c515801ac3032f72f655de88618",
    "logs": [],
    "blockNumber": 76732684,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf0c562fa02e80b5423ab50011008f6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bklay_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"otcFund_\",\"type\":\"address\"}],\"name\":\"__MockFlashBorrower_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"actionFlashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bklay\",\"outputs\":[{\"internalType\":\"contract IBKlay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"klayAmount\",\"type\":\"uint256\"}],\"name\":\"getFlashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"klayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otcFund\",\"outputs\":[{\"internalType\":\"contract IOtcFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onFlashLoan(address,uint256,uint256,bytes)\":{\"notice\":\"action flash loan\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockFlashBorrower.sol\":\"MockFlashBorrower\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IBKlay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./kip/IKIP7Extended.sol\\\";\\n\\n/// @title Bonded Klay Contract\\n/// @notice Mint/Burn logic of Bklay via klay\\ninterface IBKlay is IKIP7Extended {\\n    event UnstakeKlay(address from, address to, uint256 amount);\\n    event WithdrawToken(address from, address to, uint256 amount);\\n    event WithdrawKlay(address from, address to, uint256 amount);\\n    event ClaimKlay(address usr, uint256 amount);\\n\\n    function claimCount(address user) external view returns (uint256);\\n\\n    function unstakeRecordCount(address user) external view returns (uint256);\\n\\n    function unstakeRecord(address user, uint256 index)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function stakeKlay(address to) external payable;\\n\\n    function stakeAKlay(address to, uint256 amount) external;\\n\\n    function unstakeKlay(address to, uint256 amount) external;\\n\\n    function withdrawToken(address to, uint256 amount) external;\\n\\n    function withdrawKlay(address to, uint256 amount) external;\\n\\n    /// @notice Unstaking status for all yields.\\n    function pendingKlay(address usr) external view returns (uint256 completed, uint256 yet);\\n\\n    /// @notice Claim on every yield, send claimed klay to user.\\n    function claimKlay(address usr) external;\\n}\\n\",\"keccak256\":\"0x7dfee04969033816255389bd4edaaf00cc084eb6f446ae91fdce62d1ed87e6a2\",\"license\":\"MIT\"},\"contracts/interface/IFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IFlashBorrower {\\n    /// @notice action flash loan\\n    function onFlashLoan(\\n        address account,\\n        uint256 klayAmount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x010ba6999ce5ec61bc6dc0e67452d452d1d45d99b56cdfd697c03d56e6bce72f\",\"license\":\"MIT\"},\"contracts/interface/IOtcFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IOtcFund {\\n    function depositKlay() external payable;\\n\\n    function withdrawKlay(uint256 amount) external;\\n\\n    function flashLoan(\\n        address account,\\n        uint256 klayAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function flashFee(uint256 klayAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3fd44d1be43afabec5535283f4f4be1202a2497bd56e0737c53a523c0ade4cef\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\n\\ninterface IKIP7Detailed is IKIP7 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb19fcc63818f59c23defe41b45aa9235cd43a373d97fe222fc939ad3f0f697c9\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP7.sol\\\";\\nimport \\\"./IKIP7Detailed.sol\\\";\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7Extended is IKIP7Detailed {\\n    function mint(address usr, uint256 amount) external returns (bool);\\n\\n    function burn(address usr, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x68ea4321698aef5d82970660626d6e07ea4908b0b94bee9d6ceb2f8776c6c06b\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/mock/MockFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../interface/IFlashBorrower.sol\\\";\\nimport \\\"../interface/IOtcFund.sol\\\";\\nimport \\\"../interface/IBKlay.sol\\\";\\nimport \\\"../library/openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract MockFlashBorrower is IFlashBorrower, Initializable {\\n    IBKlay public bklay;\\n    IOtcFund public otcFund;\\n\\n    function __MockFlashBorrower_init(address bklay_, address otcFund_) public initializer {\\n        bklay = IBKlay(bklay_);\\n        otcFund = IOtcFund(otcFund_);\\n    }\\n\\n    function onFlashLoan(\\n        address account,\\n        uint256 klayAmount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        // due to compiler warning\\n        data;\\n        uint256 rewardAmount = klayAmount + fee;\\n        //bklay.mint(address(this), rewardAmount);\\n        //aklay.stakeKlay{value: msg.value}(address(this));\\n        bklay.stakeKlay{value: rewardAmount}(address(this));\\n        bklay.transfer(account, rewardAmount);\\n        return true;\\n    }\\n\\n    function actionFlashLoan(uint256 amount) external returns (bool) {\\n        otcFund.flashLoan(address(this), amount, \\\"\\\");\\n        return true;\\n    }\\n\\n    function getFlashFee(uint256 klayAmount) external view returns (uint256) {\\n        uint256 fee = otcFund.flashFee(klayAmount);\\n        return fee;\\n    }\\n\\n    function transfer() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7943267669a0528dd492a57bea8cfa067c8eefd3ff37a4a798c1894b9c6b70c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610645806100206000396000f3fe6080604052600436106100745760003560e01c80639caee1131161004e5780639caee113146100e5578063bc04038a14610105578063e017335514610125578063e0a4486b146101635761007b565b806385c7c326146100805780638a4068dd146100b35780639b8ea104146100b55761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b3660046105bb565b610183565b6040519081526020015b60405180910390f35b005b3480156100c157600080fd5b506100d56100d03660046105bb565b61020d565b60405190151581526020016100aa565b3480156100f157600080fd5b506100d5610100366004610505565b6102a9565b34801561011157600080fd5b506100b36101203660046104d3565b6103b8565b34801561013157600080fd5b5060005461014b906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b34801561016f57600080fd5b5060015461014b906001600160a01b031681565b6001546040516353d7a33d60e11b81526004810183905260009182916001600160a01b039091169063a7af467a9060240160206040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020491906105d3565b9150505b919050565b60015460405163701195a160e11b81523060048201526024810183905260606044820152600060648201819052916001600160a01b03169063e0232b4290608401602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610594565b50600192915050565b6000806102b685876105eb565b600054604051632b89466d60e21b81523060048201529192506201000090046001600160a01b03169063ae2519b49083906024016000604051808303818588803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505060005460405163a9059cbb60e01b81526001600160a01b038c811660048301526024820187905262010000909204909116935063a9059cbb92506044019050602060405180830381600087803b15801561037257600080fd5b505af1158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa9190610594565b506001979650505050505050565b600054610100900460ff16806103cd5750303b155b806103db575060005460ff16155b6104425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610464576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156104b7576000805461ff00191690555b505050565b80356001600160a01b038116811461020857600080fd5b600080604083850312156104e5578182fd5b6104ee836104bc565b91506104fc602084016104bc565b90509250929050565b60008060008060006080868803121561051c578081fd5b610525866104bc565b94506020860135935060408601359250606086013567ffffffffffffffff8082111561054f578283fd5b818801915088601f830112610562578283fd5b813581811115610570578384fd5b896020828501011115610581578384fd5b9699959850939650602001949392505050565b6000602082840312156105a5578081fd5b815180151581146105b4578182fd5b9392505050565b6000602082840312156105cc578081fd5b5035919050565b6000602082840312156105e4578081fd5b5051919050565b6000821982111561060a57634e487b7160e01b81526011600452602481fd5b50019056fea264697066735822122081cf5fb7ccd0869e2dfcaf5a26bb98a11f4596801e2112b5611def9f5924dc7964736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639caee1131161004e5780639caee113146100e5578063bc04038a14610105578063e017335514610125578063e0a4486b146101635761007b565b806385c7c326146100805780638a4068dd146100b35780639b8ea104146100b55761007b565b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b3660046105bb565b610183565b6040519081526020015b60405180910390f35b005b3480156100c157600080fd5b506100d56100d03660046105bb565b61020d565b60405190151581526020016100aa565b3480156100f157600080fd5b506100d5610100366004610505565b6102a9565b34801561011157600080fd5b506100b36101203660046104d3565b6103b8565b34801561013157600080fd5b5060005461014b906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b34801561016f57600080fd5b5060015461014b906001600160a01b031681565b6001546040516353d7a33d60e11b81526004810183905260009182916001600160a01b039091169063a7af467a9060240160206040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020491906105d3565b9150505b919050565b60015460405163701195a160e11b81523060048201526024810183905260606044820152600060648201819052916001600160a01b03169063e0232b4290608401602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610594565b50600192915050565b6000806102b685876105eb565b600054604051632b89466d60e21b81523060048201529192506201000090046001600160a01b03169063ae2519b49083906024016000604051808303818588803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505060005460405163a9059cbb60e01b81526001600160a01b038c811660048301526024820187905262010000909204909116935063a9059cbb92506044019050602060405180830381600087803b15801561037257600080fd5b505af1158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa9190610594565b506001979650505050505050565b600054610100900460ff16806103cd5750303b155b806103db575060005460ff16155b6104425760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610464576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156104b7576000805461ff00191690555b505050565b80356001600160a01b038116811461020857600080fd5b600080604083850312156104e5578182fd5b6104ee836104bc565b91506104fc602084016104bc565b90509250929050565b60008060008060006080868803121561051c578081fd5b610525866104bc565b94506020860135935060408601359250606086013567ffffffffffffffff8082111561054f578283fd5b818801915088601f830112610562578283fd5b813581811115610570578384fd5b896020828501011115610581578384fd5b9699959850939650602001949392505050565b6000602082840312156105a5578081fd5b815180151581146105b4578182fd5b9392505050565b6000602082840312156105cc578081fd5b5035919050565b6000602082840312156105e4578081fd5b5051919050565b6000821982111561060a57634e487b7160e01b81526011600452602481fd5b50019056fea264697066735822122081cf5fb7ccd0869e2dfcaf5a26bb98a11f4596801e2112b5611def9f5924dc7964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onFlashLoan(address,uint256,uint256,bytes)": {
        "notice": "action flash loan"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14952,
        "contract": "contracts/mock/MockFlashBorrower.sol:MockFlashBorrower",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14955,
        "contract": "contracts/mock/MockFlashBorrower.sol:MockFlashBorrower",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17015,
        "contract": "contracts/mock/MockFlashBorrower.sol:MockFlashBorrower",
        "label": "bklay",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IBKlay)3800"
      },
      {
        "astId": 17018,
        "contract": "contracts/mock/MockFlashBorrower.sol:MockFlashBorrower",
        "label": "otcFund",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOtcFund)5133"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBKlay)3800": {
        "encoding": "inplace",
        "label": "contract IBKlay",
        "numberOfBytes": "20"
      },
      "t_contract(IOtcFund)5133": {
        "encoding": "inplace",
        "label": "contract IOtcFund",
        "numberOfBytes": "20"
      }
    }
  }
}