{
  "address": "0x5F32cC416C6554d94A1d87aaC0C2a96c4Adb7dc1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kokoaRewardManager",
          "type": "address"
        }
      ],
      "name": "__AKlayKokoaLpStakingPool_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "kokoaRewardManager_",
          "type": "address"
        }
      ],
      "name": "__TokenStakingPool_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "config",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kokoaRewardManager",
      "outputs": [
        {
          "internalType": "contract IKokoaRewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IKIP7",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd57a41ce6ca9e4011c0c875112825f033c9eff0fec8818b96a80a023b8df0f20",
  "receipt": {
    "to": null,
    "from": "0x276199434a04b2607D5E95670e5cB6a7E7f10f3d",
    "contractAddress": "0x5F32cC416C6554d94A1d87aaC0C2a96c4Adb7dc1",
    "transactionIndex": 0,
    "gasUsed": "1107805",
    "logsBloom": "0x
    "blockHash": "0x5b9ddbe4318a16e537a51f4820620c7eff018b4b8feab0ada10ff370d056a8f1",
    "transactionHash": "0xd57a41ce6ca9e4011c0c875112825f033c9eff0fec8818b96a80a023b8df0f20",
    "logs": [],
    "blockNumber": 80581837,
    "cumulativeGasUsed": null,
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "de4f5741dec2c2b2fd1b551e118f3df0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kokoaRewardManager\",\"type\":\"address\"}],\"name\":\"__AKlayKokoaLpStakingPool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kokoaRewardManager_\",\"type\":\"address\"}],\"name\":\"__TokenStakingPool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kokoaRewardManager\",\"outputs\":[{\"internalType\":\"contract IKokoaRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IKIP7\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"stake(address,uint256)\":{\"notice\":\"stake token\"},\"unstake(address,uint256)\":{\"notice\":\"unstake token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reward/pool/AKlayKokoaLpStakingPool.sol\":\"AKlayKokoaLpStakingPool\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IKokoaRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\n/// @title A manager about kokoa rewards.\\n/// @dev It manages all kokoa rewards. It's base code is from sushiswap.\\n/// Therefore, the way to distribute reward is very similar to sushiswap.\\n/// The main difference between sushiswap and KokoaRewardManager is staking.\\n/// Sushiswap forces to stake token, but KokoaRewardManager does not own token.\\n/// It just expect registered pool to call onDeposit/onWithdraw/onChanged, and\\n/// get balance and totalSupply of pool to calculate how to distribute reward.\\n/// \\ub610\\ud55c, \\uae30\\uc874 sushiswap \\uc5d0\\uc11c\\ub294 \\ube14\\ub85d\\ub2f9 minting\\uc774 \\ub418\\uc5b4 \\ub9ac\\uc6cc\\ub4dc\\ub97c \\uc0dd\\uc0b0\\ud588\\uc9c0\\ub9cc,\\n/// \\uc774 \\ubcc0\\ud615\\ub41c \\ucf54\\ub4dc\\uc5d0\\uc11c\\ub294 vesting \\ub85c\\uc9c1\\uc5d0 \\ub530\\ub77c\\uc11c vesting\\ub41c \\uc591\\uc744 \\ub4f1\\ub85d\\ub41c \\ud480\\uc5d0\\uac8c \\ubd84\\ubc30\\ud55c\\ub2e4.\\ninterface IKokoaRewardManager {\\n    struct PoolInfo {\\n        uint256 accRewardPerShare;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        bool init;\\n        uint256 fee;\\n    }\\n\\n    struct UserInfo {\\n        int256 rewardDebt;\\n        uint256 claimedReward; // it is used in referral contract.\\n    }\\n\\n    /// @notice count of registered pools\\n    function poolLength() external view returns (uint256);\\n\\n    /// @notice user info.\\n    function userInfo(address, address) external view returns (int256, uint256);\\n\\n    /// @notice registered pool\\n    function rewardPool(uint256 index) external view returns (IRewardPool);\\n\\n    /// @notice all registered pools\\n    function rewardPools() external view returns (address[] memory);\\n\\n    /// @notice pool info\\n    function poolInfo(address pool)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n\\n    /// @notice total allocation point\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    /// @notice add pool to kokoaRewardManager\\n    /// @param allocPoint (allocPoint / totalAllocPoint) == kokoaRewardManager\\ub97c \\ud1b5\\ud574\\uc11c \\ub9c8\\uc774\\ub2dd\\ub41c \\ucd1d kokoa \\uc591 \\uc911\\uc5d0 \\uc774 \\ud480\\uc5d0 \\ubd84\\ubc30\\ub420 \\ube44\\uc728\\n    /// @param pool address of pool to register\\n    /// @dev \\uc774 \\ud568\\uc218\\ub294 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function add(\\n        uint256 allocPoint,\\n        address pool,\\n        uint256 fee\\n    ) external;\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c \\ud480\\uc774 \\ubc1b\\ub294 kokoa reward\\uc758 \\ube44\\uc728\\uc744 \\uc870\\uc808\\ud55c\\ub2e4.\\n    /// @param pool address of pool to register\\n    /// @param allocPoint (allocPoint / totalAllocPoint) == kokoaRewardManager\\ub97c \\ud1b5\\ud574\\uc11c \\ub9c8\\uc774\\ub2dd\\ub41c \\ucd1d kokoa \\uc591 \\uc911\\uc5d0 \\uc774 \\ud480\\uc5d0 \\ubd84\\ubc30\\ub420 \\ube44\\uc728\\n    /// @dev \\uc774 \\ud568\\uc218\\ub294 \\uac70\\ubc84\\ub10c\\uc2a4\\uc5d0 \\uc758\\ud574\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4.\\n    function set(\\n        address pool,\\n        uint256 allocPoint,\\n        uint256 fee\\n    ) external;\\n\\n    /// @notice amount of kokoa reward to distribute, but not claimed yet\\n    /// @param pool address of pool\\n    /// @param usr address of user who is distributed kokoa reward\\n    function claimableReward(\\n        address pool,\\n        address usr,\\n        bool bonus\\n    ) external view returns (uint256 pending);\\n\\n    /// @notice \\uc720\\uc800\\uc5d0\\uac8c \\ubd84\\ubc30\\ub420 reward \\uc591\\uc744 \\uc5c5\\ub370\\uc774\\ud2b8 \\uc2dc\\ud0a8\\ub2e4.\\n    /// @param pool address of pool to update\\n    /// @dev \\ub0b4\\ubd80\\uc801\\uc73c\\ub85c _updatePool\\uc774 \\ubd88\\ub9ac\\ub294\\ub370, \\uc774 \\ud568\\uc218\\ub294 \\uc720\\uc800\\uac00 \\ud480\\uc5d0 staking \\uc591\\uc774 \\ubcc0\\ud654\\ud558\\uac70\\ub098, reward\\ub97c claim\\ud558\\uae30 \\uc804\\uc5d0 \\ud56d\\uc0c1 \\ubd88\\ub9b0\\ub2e4\\n    /// \\ub530\\ub77c\\uc11c \\uc774 \\ud568\\uc218\\ub97c \\ubc16\\uc5d0\\uc11c \\uba85\\uc2dc\\uc801\\uc73c\\ub85c \\ubd88\\ub9b4 \\uc77c\\uc740 \\uac70\\uc758 \\uc5c6\\uc744 \\uac83\\uc774\\ub2e4. \\uc77c\\ub2e8 sushiswap \\uc5d0\\uc11c \\uad6c\\ud604\\ud588\\uae30 \\ub54c\\ubb38\\uc5d0 \\uac00\\uc838\\uc654\\ub2e4.\\n    function updatePool(address pool) external;\\n\\n    /// @notice \\uc5ec\\ub7ec \\ud480\\ub4e4\\uc5d0 \\ub300\\ud574\\uc11c updatePool\\uc744 \\uc2dc\\ucf1c\\uc900\\ub2e4.\\n    /// @param pools address list of pools to update\\n    function massUpdatePools(address[] calldata pools) external;\\n\\n    /// @notice reward \\ubd84\\ubc30\\uc591\\uc744 \\uacc4\\uc0b0\\ud560 \\ub54c \\ub098\\ub217\\uc148\\uc744 \\ud558\\ub294\\ub370, \\uc774\\ub54c \\uc5bc\\ub9c8\\ub9cc\\ud07c\\uc758 \\uc720\\ud6a8\\uc22b\\uc790\\ub85c \\ub098\\ub217\\uc148\\uc744 \\ud560 \\uac83\\uc778\\uc9c0 \\uacb0\\uc815\\ud55c\\ub2e4.\\n    function accRewardPrecision() external pure returns (uint256);\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c pool\\uc5d0\\uc11c \\uc720\\uc800\\uac00 staking\\ud55c \\uc591\\uc774 \\ub298\\uc5c8\\uc744 \\ub54c, \\uc720\\uc800\\uc5d0\\uac8c \\ubd84\\ubc30\\ud560 reward \\uc591\\uc744 \\uacc4\\uc0b0\\ud558\\uae30 \\uc704\\ud574\\uc11c \\ubd88\\ub9b0\\ub2e4.\\n    /// @param amount amount of increasing user's balance\\n    /// @param to address of user\\n    /// @dev \\ubb34\\uc870\\uac74 \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4. \\uc989 msg.sender == pool\\n    function onDeposit(uint256 amount, address to) external;\\n\\n    /// @notice \\ub4f1\\ub85d\\ub41c pool\\uc5d0\\uc11c \\uc720\\uc800\\uac00 staking\\ud55c \\uc591\\uc774 \\uc904\\uc5c8\\uc744 \\ub54c, \\uc720\\uc800\\uc5d0\\uac8c \\ubd84\\ubc30\\ud560 reward \\uc591\\uc744 \\uacc4\\uc0b0\\ud558\\uae30 \\uc704\\ud574\\uc11c \\ubd88\\ub9b0\\ub2e4.\\n    /// @param amount amount of increasing user's balance\\n    /// @param to address of user\\n    /// @dev \\ubb34\\uc870\\uac74 \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4. \\uc989 msg.sender == pool\\n    function onWithdraw(uint256 amount, address to) external;\\n\\n    /// @notice onDeposit\\uacfc onWithdraw\\uc758 wrapper\\n    /// @param amount amount of increasing user's balance\\n    /// @param to address of user\\n    /// @dev \\ubb34\\uc870\\uac74 \\ud574\\ub2f9 \\ud480\\uc5d0\\uc11c\\ub9cc \\ubd88\\ub824\\uc57c \\ud55c\\ub2e4. \\uc989 msg.sender == pool\\n    function onChanged(int256 amount, address to) external;\\n\\n    /// @notice \\uc720\\uc800\\uac00 \\ubd84\\ubc30\\ubc1b\\uc740 kokoa reward\\ub97c claim \\ud558\\ub294 function\\n    /// @param pool address of pool\\n    /// @param to receiver address of kokoa reward\\n    function claimReward(address pool, address to) external returns (bool success);\\n\\n    function claimRewardAll() external returns (bool success);\\n\\n    function claimRewardByOther(address pool, address usr) external returns (bool success);\\n\\n    function claimRewardAllByOther(address usr) external returns (bool success);\\n\\n    function claimRewardAndStake(address pool) external returns (bool success);\\n\\n    function claimRewardAndStakeByOther(address pool, address usr) external returns (bool success);\\n\\n    function claimRewardAndStakeAll() external returns (bool success);\\n\\n    // --- Event ---\\n\\n    event Deposit(address indexed pool, uint256 amount, address indexed to);\\n    event Withdraw(address indexed pool, uint256 amount, address indexed to);\\n    event ClaimReward(address indexed pool, address indexed user, uint256 amount);\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, address indexed lpToken, uint256 fee);\\n    event LogSetPool(address indexed pool, uint256 allocPoint, uint256 fee);\\n    event LogUpdatePool(address indexed pool, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accRewardPerShare);\\n    event LogInit();\\n}\\n\",\"keccak256\":\"0xf5fd39c90207f92e54dfface789fc8b9949c7fe270da35c57c503163db521e65\",\"license\":\"MIT\"},\"contracts/interface/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IRewardPool {\\n    function balanceOf(address usr) external view returns (uint256 balance);\\n\\n    function totalSupply() external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xeee82cf1d159c402ad5a1994821948516e692dcb5c20ae6235e5686ffea8b47d\",\"license\":\"MIT\"},\"contracts/interface/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IRewardPool.sol\\\";\\nimport \\\"./kip/IKIP7.sol\\\";\\n\\n/// @title A token staking pool.\\n/// @dev KokoaRewardManager gives reward user who stakes token to this pool.\\ninterface IStakingPool is IRewardPool {\\n    event Stake(address indexed from, address indexed to, uint256 amount);\\n    event Unstake(address indexed from, address indexed to, uint256 amount);\\n\\n    function token() external view returns (IKIP7);\\n\\n    /// @notice stake token\\n    function stake(address to, uint256 amount) external;\\n\\n    /// @notice unstake token\\n    function unstake(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xad13533bf43060acf2c6341c1a4ea798ebd008aa6a40dbe1b729edd683eb9ee0\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP13.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IKIP13 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x651958b745058d476a41ab467d508d2fe6c131d83cdbe9dfe28b3893d32c48fd\",\"license\":\"MIT\"},\"contracts/interface/kip/IKIP7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IKIP13.sol\\\";\\n\\ninterface IKIP7 is IKIP13 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function safeTransfer(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransfer(address recipient, uint256 amount) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fb8afaff38611db93f55c13447c08ea47e5392b895a75bf43999808176528e0\",\"license\":\"MIT\"},\"contracts/library/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./openzeppelin/proxy/Initializable.sol\\\";\\n\\ncontract AccessControl is Initializable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _checkRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        _checkRole(bytes32(\\\"operator\\\"), msg.sender);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() private initializer {\\n        _setupRole(bytes32(\\\"owner\\\"), msg.sender);\\n        _setRoleAdmin(bytes32(\\\"admin\\\"), bytes32(\\\"owner\\\"));\\n        _setRoleAdmin(bytes32(\\\"operator\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"admin\\\"), msg.sender);\\n        _setupRole(bytes32(\\\"operator\\\"), msg.sender);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\\"AccessControl:_checkRole:invalid role\\\");\\n        }\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    // --- ownable --\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _grantRole(bytes32(\\\"owner\\\"), newOwner);\\n        _revokeRole(bytes32(\\\"owner\\\"), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x16d2c3697b545ce0f8f6508d64eef0522b972736cbe77fc7c2e7e50a348f94b8\",\"license\":\"MIT\"},\"contracts/library/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract Pausable is AccessControl {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    function __Pausable_init() internal initializer {\\n        __AccessControl_init();\\n        _setRoleAdmin(bytes32(\\\"pauser\\\"), bytes32(\\\"owner\\\"));\\n        _setupRole(bytes32(\\\"pauser\\\"), msg.sender);\\n    }\\n\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public whenNotPaused onlyRole(\\\"pauser\\\") {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public whenPaused onlyRole(\\\"pauser\\\") {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x09830075c06c05d623c2db6ce3f84b495181ab439043cdaab714060b9fc23f5a\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    // -- Kokoa --\\n    // extended\\n\\n    function add(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + uint256(y);\\n            require(y >= 0 || z <= x, \\\"SafeMath: addition overflow\\\");\\n            require(y <= 0 || z >= x, \\\"SafeMath: addition overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - uint256(y);\\n            require(y <= 0 || z <= x, \\\"SafeMath: subtraction overflow\\\");\\n            require(y >= 0 || z >= x, \\\"SafeMath: subtraction overflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = int256(x) * y;\\n            require(int256(x) >= 0, \\\"SafeMath: multiplication overflow\\\");\\n            require(y == 0 || z / y == int256(x), \\\"SafeMath: multiplication overflow\\\");\\n        }\\n    }\\n\\n    function mul(int256 x, uint256 y) internal pure returns (int256 z) {\\n        z = x * int256(y);\\n        require(int256(y) >= 0, \\\"SafeMath: multiplication overflow\\\");\\n        require(x == 0 || z / x == int256(y), \\\"SafeMath: multiplication overflow\\\");\\n    }\\n\\n    // -- makerdao --\\n    // extended\\n    uint256 constant ONE = 10**27;\\n    uint256 constant RAY = 10**27;\\n    uint256 constant WAD = 10**18;\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * RAY;\\n        z = z / y;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"SafeMath:: rmul: overflow\\\");\\n        z = z / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x, \\\"SafeMath:: wmul: overflow\\\");\\n        z = z / WAD;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x >= y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    // from uniswap\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n            z = x;\\n            x = (y / x + x) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc470c98add15d467271436b0ab2d99fc66a45f32d0ddd93d58436b74962b0f79\",\"license\":\"MIT\"},\"contracts/library/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.3;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x95a413b1c4dc23bacf1a16b826a929f2ff756835e3ff3018aeff63afd497886f\",\"license\":\"MIT\"},\"contracts/reward/pool/AKlayKokoaLpStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./TokenStakingPool.sol\\\";\\n\\ncontract AKlayKokoaLpStakingPool is TokenStakingPool {\\n    function __AKlayKokoaLpStakingPool_init(address token, address kokoaRewardManager) public initializer {\\n        __TokenStakingPool_init(token, kokoaRewardManager);\\n    }\\n}\\n\",\"keccak256\":\"0xbedaa383dfbf3c2d545b9e3bf76920ba0759311ba3918d44f51fcb532e6d178d\",\"license\":\"MIT\"},\"contracts/reward/pool/TokenStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../.././library/openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../.././interface/IStakingPool.sol\\\";\\nimport \\\"../.././interface/IKokoaRewardManager.sol\\\";\\nimport \\\"../.././interface/kip/IKIP7.sol\\\";\\nimport \\\"../.././library/AccessControl.sol\\\";\\nimport \\\"../.././library/Pausable.sol\\\";\\n\\ncontract TokenStakingPool is IStakingPool, AccessControl, Pausable {\\n    // --- data ---\\n    IKIP7 public override token; // usually, lp token\\n    IKokoaRewardManager public kokoaRewardManager;\\n\\n    uint256 public override totalSupply;\\n    mapping(address => uint256) public override balanceOf;\\n\\n    function __TokenStakingPool_init(address token_, address kokoaRewardManager_) public initializer {\\n        __Pausable_init();\\n        token = IKIP7(token_);\\n        kokoaRewardManager = IKokoaRewardManager(kokoaRewardManager_);\\n    }\\n\\n    // bypress\\uc5d0\\uc11c bypress stable lp -> cypress stable lp \\uc774\\ub3d9\\uc744 \\uc704\\ud574\\uc11c \\ucd94\\n    function config(bytes32 what, address data) external onlyOwner {\\n        if (what == \\\"token\\\") token = IKIP7(data);\\n        else revert(\\\"TokenStakingPool::config: unrecognized-param\\\");\\n    }\\n\\n    function stake(address to, uint256 amount) external override whenNotPaused {\\n        kokoaRewardManager.onDeposit(amount, to);\\n\\n        token.transferFrom(msg.sender, address(this), amount);\\n        balanceOf[to] = balanceOf[to] + amount;\\n        totalSupply = totalSupply + amount;\\n\\n        emit Stake(msg.sender, to, amount);\\n    }\\n\\n    function unstake(address to, uint256 amount) public override whenNotPaused {\\n        kokoaRewardManager.onWithdraw(amount, msg.sender);\\n\\n        token.transfer(to, amount);\\n        balanceOf[msg.sender] = balanceOf[msg.sender] - amount;\\n        totalSupply = totalSupply - amount;\\n\\n        emit Unstake(msg.sender, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x271a104190e87a3aa308effdbab2fb2b0d446bf5763a56a697af30ed7297cdac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f6d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638456cb59116100ad578063d366f3b911610071578063d366f3b91461022b578063d547741f1461023e578063e127f94614610251578063f2fde38b1461027c578063fc0c546a1461028f57610121565b80638456cb59146101e257806391d14854146101ea578063a217fddf146101fd578063adc9772e14610205578063c2a672e01461021857610121565b806336568abe116100f457806336568abe1461017d5780633f4ba83a14610190578063557b5c36146101985780635c975abb146101ab57806370a08231146101c257610121565b806312e8ef9a1461012657806318160ddd1461013b578063248a9ca3146101575780632f2ff15d1461016a575b600080fd5b610139610134366004610dc5565b6102a7565b005b61014460045481565b6040519081526020015b60405180910390f35b610144610165366004610e40565b61036f565b610139610178366004610e58565b610388565b61013961018b366004610e58565b6103a5565b610139610423565b6101396101a6366004610dc5565b6104c1565b60025460ff165b604051901515815260200161014e565b6101446101d0366004610da4565b60056020526000908152604090205481565b610139610542565b6101b26101f8366004610e58565b6105b6565b610144600081565b610139610213366004610df7565b6105e1565b610139610226366004610df7565b61078c565b610139610239366004610e58565b610919565b61013961024c366004610e58565b6109bd565b600354610264906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b61013961028a366004610da4565b6109da565b6002546102649061010090046001600160a01b031681565b600054610100900460ff16806102bc5750303b155b806102ca575060005460ff16155b6102ef5760405162461bcd60e51b81526004016102e690610ea4565b60405180910390fd5b600054610100900460ff16158015610311576000805461ffff19166101011790555b610319610a13565b60028054610100600160a81b0319166101006001600160a01b038681169190910291909117909155600380546001600160a01b031916918416919091179055801561036a576000805461ff00191690555b505050565b600081815260016020819052604090912001545b919050565b6103918261036f565b61039b8133610abe565b61036a8383610b22565b6001600160a01b03811633146104155760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102e6565b61041f8282610b8d565b5050565b60025460ff1661046c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102e6565b653830bab9b2b960d11b6104808133610abe565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b600054610100900460ff16806104d65750303b155b806104e4575060005460ff16155b6105005760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610522576000805461ffff19166101011790555b61052c83836102a7565b801561036a576000805461ff0019169055505050565b60025460ff16156105655760405162461bcd60e51b81526004016102e690610e7a565b653830bab9b2b960d11b6105798133610abe565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016104b6565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460ff16156106045760405162461bcd60e51b81526004016102e690610e7a565b600354604051632fa99e6b60e21b8152600481018390526001600160a01b0384811660248301529091169063bea679ac90604401600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b50506002546040516323b872dd60e01b8152336004820152306024820152604481018590526101009091046001600160a01b031692506323b872dd9150606401602060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190610e20565b506001600160a01b03821660009081526005602052604090205461071d908290610ef2565b6001600160a01b038316600090815260056020526040902055600454610744908290610ef2565b6004556040518181526001600160a01b0383169033907f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f7906020015b60405180910390a35050565b60025460ff16156107af5760405162461bcd60e51b81526004016102e690610e7a565b600354604051633cdd675760e21b8152600481018390523360248201526001600160a01b039091169063f3759d5c90604401600060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505060025460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052610100909204909116925063a9059cbb9150604401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f9190610e20565b50336000908152600560205260409020546108bb908290610f0a565b336000908152600560205260409020556004546108d9908290610f0a565b6004556040518181526001600160a01b0383169033907f390b1276974b9463e5d66ab10df69b6f3d7b930eb066a0e66df327edd2cc811c90602001610780565b61092b6437bbb732b960d91b33610abe565b81643a37b5b2b760d91b14156109605760028054610100600160a81b0319166101006001600160a01b0384160217905561041f565b60405162461bcd60e51b815260206004820152602c60248201527f546f6b656e5374616b696e67506f6f6c3a3a636f6e6669673a20756e7265636f60448201526b676e697a65642d706172616d60a01b60648201526084016102e6565b6109c68261036f565b6109d08133610abe565b61036a8383610b8d565b6109ec6437bbb732b960d91b33610abe565b6109fe6437bbb732b960d91b82610b22565b610a106437bbb732b960d91b33610b8d565b50565b600054610100900460ff1680610a285750303b155b80610a36575060005460ff16155b610a525760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610a74576000805461ffff19166101011790555b610a7c610bf4565b610a97653830bab9b2b960d11b6437bbb732b960d91b610c5d565b610aaa653830bab9b2b960d11b33610cb2565b8015610a10576000805461ff001916905550565b610ac882826105b6565b61041f5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016102e6565b610b2c82826105b6565b61041f5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610b9782826105b6565b1561041f5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680610c095750303b155b80610c17575060005460ff16155b610c335760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610c55576000805461ffff19166101011790555b610aaa610cbc565b6000610c688361036f565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61041f8282610b22565b600054610100900460ff1680610cd15750303b155b80610cdf575060005460ff16155b610cfb5760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610d1d576000805461ffff19166101011790555b610d2f6437bbb732b960d91b33610cb2565b610d496430b236b4b760d91b6437bbb732b960d91b610c5d565b610d666737b832b930ba37b960c11b6437bbb732b960d91b610c5d565b610d786430b236b4b760d91b33610cb2565b610aaa6737b832b930ba37b960c11b33610cb2565b80356001600160a01b038116811461038357600080fd5b600060208284031215610db5578081fd5b610dbe82610d8d565b9392505050565b60008060408385031215610dd7578081fd5b610de083610d8d565b9150610dee60208401610d8d565b90509250929050565b60008060408385031215610e09578182fd5b610e1283610d8d565b946020939093013593505050565b600060208284031215610e31578081fd5b81518015158114610dbe578182fd5b600060208284031215610e51578081fd5b5035919050565b60008060408385031215610e6a578182fd5b82359150610dee60208401610d8d565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115610f0557610f05610f21565b500190565b600082821015610f1c57610f1c610f21565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a2849c639b767a163a972d0bf871bdcd9e2748e6a5f9273461660d7cf951dae664736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638456cb59116100ad578063d366f3b911610071578063d366f3b91461022b578063d547741f1461023e578063e127f94614610251578063f2fde38b1461027c578063fc0c546a1461028f57610121565b80638456cb59146101e257806391d14854146101ea578063a217fddf146101fd578063adc9772e14610205578063c2a672e01461021857610121565b806336568abe116100f457806336568abe1461017d5780633f4ba83a14610190578063557b5c36146101985780635c975abb146101ab57806370a08231146101c257610121565b806312e8ef9a1461012657806318160ddd1461013b578063248a9ca3146101575780632f2ff15d1461016a575b600080fd5b610139610134366004610dc5565b6102a7565b005b61014460045481565b6040519081526020015b60405180910390f35b610144610165366004610e40565b61036f565b610139610178366004610e58565b610388565b61013961018b366004610e58565b6103a5565b610139610423565b6101396101a6366004610dc5565b6104c1565b60025460ff165b604051901515815260200161014e565b6101446101d0366004610da4565b60056020526000908152604090205481565b610139610542565b6101b26101f8366004610e58565b6105b6565b610144600081565b610139610213366004610df7565b6105e1565b610139610226366004610df7565b61078c565b610139610239366004610e58565b610919565b61013961024c366004610e58565b6109bd565b600354610264906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b61013961028a366004610da4565b6109da565b6002546102649061010090046001600160a01b031681565b600054610100900460ff16806102bc5750303b155b806102ca575060005460ff16155b6102ef5760405162461bcd60e51b81526004016102e690610ea4565b60405180910390fd5b600054610100900460ff16158015610311576000805461ffff19166101011790555b610319610a13565b60028054610100600160a81b0319166101006001600160a01b038681169190910291909117909155600380546001600160a01b031916918416919091179055801561036a576000805461ff00191690555b505050565b600081815260016020819052604090912001545b919050565b6103918261036f565b61039b8133610abe565b61036a8383610b22565b6001600160a01b03811633146104155760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102e6565b61041f8282610b8d565b5050565b60025460ff1661046c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102e6565b653830bab9b2b960d11b6104808133610abe565b6002805460ff191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b600054610100900460ff16806104d65750303b155b806104e4575060005460ff16155b6105005760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610522576000805461ffff19166101011790555b61052c83836102a7565b801561036a576000805461ff0019169055505050565b60025460ff16156105655760405162461bcd60e51b81526004016102e690610e7a565b653830bab9b2b960d11b6105798133610abe565b6002805460ff191660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016104b6565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460ff16156106045760405162461bcd60e51b81526004016102e690610e7a565b600354604051632fa99e6b60e21b8152600481018390526001600160a01b0384811660248301529091169063bea679ac90604401600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b50506002546040516323b872dd60e01b8152336004820152306024820152604481018590526101009091046001600160a01b031692506323b872dd9150606401602060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190610e20565b506001600160a01b03821660009081526005602052604090205461071d908290610ef2565b6001600160a01b038316600090815260056020526040902055600454610744908290610ef2565b6004556040518181526001600160a01b0383169033907f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f7906020015b60405180910390a35050565b60025460ff16156107af5760405162461bcd60e51b81526004016102e690610e7a565b600354604051633cdd675760e21b8152600481018390523360248201526001600160a01b039091169063f3759d5c90604401600060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505060025460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052610100909204909116925063a9059cbb9150604401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f9190610e20565b50336000908152600560205260409020546108bb908290610f0a565b336000908152600560205260409020556004546108d9908290610f0a565b6004556040518181526001600160a01b0383169033907f390b1276974b9463e5d66ab10df69b6f3d7b930eb066a0e66df327edd2cc811c90602001610780565b61092b6437bbb732b960d91b33610abe565b81643a37b5b2b760d91b14156109605760028054610100600160a81b0319166101006001600160a01b0384160217905561041f565b60405162461bcd60e51b815260206004820152602c60248201527f546f6b656e5374616b696e67506f6f6c3a3a636f6e6669673a20756e7265636f60448201526b676e697a65642d706172616d60a01b60648201526084016102e6565b6109c68261036f565b6109d08133610abe565b61036a8383610b8d565b6109ec6437bbb732b960d91b33610abe565b6109fe6437bbb732b960d91b82610b22565b610a106437bbb732b960d91b33610b8d565b50565b600054610100900460ff1680610a285750303b155b80610a36575060005460ff16155b610a525760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610a74576000805461ffff19166101011790555b610a7c610bf4565b610a97653830bab9b2b960d11b6437bbb732b960d91b610c5d565b610aaa653830bab9b2b960d11b33610cb2565b8015610a10576000805461ff001916905550565b610ac882826105b6565b61041f5760405162461bcd60e51b815260206004820152602560248201527f416363657373436f6e74726f6c3a5f636865636b526f6c653a696e76616c696460448201526420726f6c6560d81b60648201526084016102e6565b610b2c82826105b6565b61041f5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b610b9782826105b6565b1561041f5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680610c095750303b155b80610c17575060005460ff16155b610c335760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610c55576000805461ffff19166101011790555b610aaa610cbc565b6000610c688361036f565b6000848152600160208190526040808320909101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b61041f8282610b22565b600054610100900460ff1680610cd15750303b155b80610cdf575060005460ff16155b610cfb5760405162461bcd60e51b81526004016102e690610ea4565b600054610100900460ff16158015610d1d576000805461ffff19166101011790555b610d2f6437bbb732b960d91b33610cb2565b610d496430b236b4b760d91b6437bbb732b960d91b610c5d565b610d666737b832b930ba37b960c11b6437bbb732b960d91b610c5d565b610d786430b236b4b760d91b33610cb2565b610aaa6737b832b930ba37b960c11b33610cb2565b80356001600160a01b038116811461038357600080fd5b600060208284031215610db5578081fd5b610dbe82610d8d565b9392505050565b60008060408385031215610dd7578081fd5b610de083610d8d565b9150610dee60208401610d8d565b90509250929050565b60008060408385031215610e09578182fd5b610e1283610d8d565b946020939093013593505050565b600060208284031215610e31578081fd5b81518015158114610dbe578182fd5b600060208284031215610e51578081fd5b5035919050565b60008060408385031215610e6a578182fd5b82359150610dee60208401610d8d565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115610f0557610f05610f21565b500190565b600082821015610f1c57610f1c610f21565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a2849c639b767a163a972d0bf871bdcd9e2748e6a5f9273461660d7cf951dae664736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "stake(address,uint256)": {
        "notice": "stake token"
      },
      "unstake(address,uint256)": {
        "notice": "unstake token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24885,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24888,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 21831,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21826_storage)"
      },
      {
        "astId": 22221,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 34502,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "token",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IKIP7)9935"
      },
      {
        "astId": 34505,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "kokoaRewardManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKokoaRewardManager)8454"
      },
      {
        "astId": 34508,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 34513,
        "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IKIP7)9935": {
        "encoding": "inplace",
        "label": "contract IKIP7",
        "numberOfBytes": "20"
      },
      "t_contract(IKokoaRewardManager)8454": {
        "encoding": "inplace",
        "label": "contract IKokoaRewardManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21826_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21826_storage"
      },
      "t_struct(RoleData)21826_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 21823,
            "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21825,
            "contract": "contracts/reward/pool/AKlayKokoaLpStakingPool.sol:AKlayKokoaLpStakingPool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}